owner-info:
  support-group: containers
  service: chartmuseum
  maintainers:
    - Arno Uhlig
  helm-chart-url: https://github.com/sapcc/helm-charts/tree/master/global/chartmuseum-sapcc

chartmuseum:
  image:
    repository: keppel.eu-de-2.cloud.sap/ccloud-dockerhub-mirror/sapcc/chartmuseum
    tag: v0.9.0-openstack

  replicaCount: 3

  # Not persistent volume. Use OpenStack Swift backend.
  persistence:
    enabled: false

  service:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "8080"
      prometheus.io/targets: "kubernetes"

  ingress:
    enabled: true
    annotations:
      kubernetes.io/tls-acme: "true"
      disco: "true"

    # Defined in secrets.
    hosts:
      - name: "charts.tld"
        tls: true
        tlsSecret: tls-charts.tld

  env:
    # Name of an existing secret to get the secret values from.
    # existingSecret: chartmuseum-auth

    open:
      DISABLE_API: false
      DISABLE_METRICS: false
      AUTH_ANONYMOUS_GET: true

      # Store charts in OpenStack Swift backend.
      STORAGE: "openstack"
      # Defined in secrets.
      # OS_AUTH_URL:
      # OS_PROJECT_NAME:
      # OS_DOMAIN_NAME:
      # OS_USERNAME:
      # OS_PASSWORD:
      # STORAGE_OPENSTACK_CONTAINER:
      # STORAGE_OPENSTACK_REGION:

      # Use redis for caching of chart metadata.
      # CACHE: redis
      # CACHE_REDIS_ADDR: redis.chartmuseum.svc.cluster.local:6379
      # CACHE_REDIS_DB: 0
      # CACHE_REDIS_PASSWORD:

# Seed OpenStack user and Swift container.
seed:
  enabled: false
  # Defined in secrets.
  #  openstack:
  #    authURL:
  #    regionName:
  #    username:
  #    userDomainName:
  #    password:
  #    projectName:
  #    projectDomainName:
  #    containerName:

# Use redis for caching of chart metadata.
redis:
  enabled: false
  image:
    registry: keppel.eu-de-2.cloud.sap/ccloud-dockerhub-mirror
  metrics:
    enabled: true
    image:
      registry: keppel.eu-de-2.cloud.sap/ccloud-dockerhub-mirror
  # Defined in secrets.
  # password:

# Enable basic auth for all PUT, POST requests to the chartmuseum. Still allows anonymous GET requests.
# The following parameters are provided via a Secret named `chartmuseum-auth`
# which requires setting `.Values.chartmuseum.env.existingSecret=chartmuseum-auth.
basicAuth:
  enabled: false
  # username:
  # password:

alerts:
  prometheus: kubernetes
