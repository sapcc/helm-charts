apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "fullName" . }}
  labels:
    app: {{ include "fullName" . }}
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  podManagementPolicy: Parallel
  replicas: {{ .Values.replicas | default 1 }}
  selector:
    matchLabels:
      app: {{ include "fullName" . }}
      release: "{{ .Release.Name }}"
  serviceName: {{ include "fullName" . }}
  template:
    metadata:
      labels:
        app: {{ include "fullName" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
      annotations:
        {{- if and $.Values.global.linkerd_enabled $.Values.global.linkerd_requested }}
        linkerd.io/inject: enabled
        {{- end }}
        prometheus.io/scrape: "true"
        prometheus.io/targets: {{ required ".Values.alerts.prometheus missing" .Values.alerts.prometheus | quote }}
    {{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
    {{- end }}
    spec:
      affinity:
        nodeAffinity:
{{- if .Values.nodeAffinity }}
      {{- with .Values.nodeAffinity }}
{{ toYaml . | indent 10 }}
      {{- end }}
{{- include "pxc_maintenance_affinity" . }}
{{- include "pxc_node_reinstall_affinity" . }}
{{- else }}
          preferredDuringSchedulingIgnoredDuringExecution:
{{- include "pxc_maintenance_affinity" . }}
{{- include "pxc_node_reinstall_affinity" . }}
{{- end }}
          - weight: 1
            preference:
              matchExpressions:
                - key: "topology.kubernetes.io/zone"
                  operator: In
                  values:
                  - {{.Values.global.db_region}}a
      initContainers:
      - name: "remove-lost-found"
        image: "{{ required ".Values.global.dockerHubMirrorAlternateRegion is missing" .Values.global.dockerHubMirrorAlternateRegion }}/library/busybox:1.34.1"
        imagePullPolicy: IfNotPresent
        command:
        - "rm"
        - "-fr"
        - "/var/lib/mysql/lost+found"
        volumeMounts:
        - name: "{{ .Values.persistence.claimName }}"
          mountPath: /var/lib/mysql
      containers:
      - name: database
        image: "{{ required ".Values.global.dockerHubMirrorAlternateRegion is missing" .Values.global.dockerHubMirrorAlternateRegion }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command:
        - "/bin/bash"
        - "/startup-scripts/entrypoint.sh"
        resources:
{{ toYaml .Values.resources | indent 10 }}
        env:
        {{- if .Values.mysqlAllowEmptyPassword }}
        - name: MYSQL_ALLOW_EMPTY_PASSWORD
          value: "true"
        {{- else }}
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "fullName" . }}
              key: mysql-root-password
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "fullName" . }}
              key: mysql-password
        {{- end }}
        - name: XTRABACKUP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "fullName" . }}
              key: xtrabackup-password
        {{- if .Values.metricsExporter.enabled }}
        - name: METRICS_EXPORTER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "fullName" . }}
              key: exporter-password
        {{- end }}
        - name: MYSQL_USER
          value: {{ default "" .Values.db_user | quote }}
        - name: MYSQL_DATABASE
          value: {{ default "" .Values.db_name | quote }}
        - name: ALLOW_ROOT_FROM
          value: {{ .Values.allowRootFrom | quote }}
        - name: CLUSTER_NAME
          value: {{ include "fullName" . }}
        - name: SHORT_CLUSTER_NAME
          value: {{ template "percona-cluster.shortname" . }}
        - name: K8S_SERVICE_NAME
          value: {{ include "fullName" . }}-repl
        - name: PXC_STRICT_MODE
          value: {{ default "ENFORCING" .Values.pxc_strict_mode | quote }}
        - name: PXC_FORCE_BOOTSTRAP
          value: "false"
        - name: DEBUG
          value: "true"
        ports:
        - name: mysql
          containerPort: 3306
        - name: galera-repl
          containerPort: 4567
        - name: state-transfer
          containerPort: 4568
        - name: state-snapshot
          containerPort: 4444
        livenessProbe:
          exec:
            command:
              - "/bin/bash"
              - "-c"
              - "mysqladmin ping || test -e /var/lib/mysql/sst_in_progress"
          initialDelaySeconds: 600
          timeoutSeconds: 3
        readinessProbe:
          exec:
            command: ["/bin/bash", "/startup-scripts/readinessprobe.sh"]
          initialDelaySeconds: 30
          timeoutSeconds: 3
        volumeMounts:
        - name: "{{ .Values.persistence.claimName }}"
          mountPath: /var/lib/mysql
        - name: mysql-startup-scripts
          mountPath: /startup-scripts
        - name: mysql-config-files
          mountPath: /etc/mysql/conf.d
        - name: slash-root
          mountPath: /root
        - name: var-log
          mountPath: /var/log
        {{- if .Values.ssl.enabled }}
        - name: certificates
          mountPath: /ssl
        {{- end }}
      {{ if .Values.logTail }}
      - name: "logs"
        image: "{{ required ".Values.global.dockerHubMirrorAlternateRegion is missing" .Values.global.dockerHubMirrorAlternateRegion }}/library/busybox:1.34.1"
        imagePullPolicy: IfNotPresent
        command:
        - "tail"
        - "-f"
        - "/var/log/mysqld.log"
        volumeMounts:
        - name: var-log
          mountPath: /var/log
      {{ end }}
      {{ if .Values.metricsExporter.enabled }}
      - name: metrics
        {{- if .Values.metricsExporter.tag }}
        image: {{ required ".Values.global.dockerHubMirrorAlternateRegion is missing" .Values.global.dockerHubMirrorAlternateRegion }}/prom/mysqld-exporter:{{ .Values.metricsExporter.tag }}
        {{- else }}
        image: {{ required ".Values.global.dockerHubMirrorAlternateRegion is missing" .Values.global.dockerHubMirrorAlternateRegion }}/prom/mysqld-exporter
        {{- end }}
        imagePullPolicy: IfNotPresent
{{- if .Values.metricsExporter.commandOverrides }}
        command:
{{ toYaml .Values.metricsExporter.commandOverrides | indent 8 }}
{{- end }}
{{- if .Values.metricsExporter.argsOverrides }}
        args:
{{ toYaml .Values.metricsExporter.argsOverrides | indent 8 }}
{{- end }}
        env:
        - name: METRICS_EXPORTER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "fullName" . }}
              key: exporter-password
        - name: DATA_SOURCE_NAME
          value: "exporter:$(METRICS_EXPORTER_PASSWORD)@(localhost:3306)/"
        ports:
        - name: metrics
          containerPort: 9104
        volumeMounts:
        - name: slash-root
          mountPath: /root
        livenessProbe:
          exec:
            command: ["wget","-q","-O","-","localhost:9104"]
          initialDelaySeconds: 30
          timeoutSeconds: 2
        readinessProbe:
          exec:
            command: ["wget","-q","-O","-","localhost:9104"]
          initialDelaySeconds: 30
          timeoutSeconds: 2
      {{ end }}
      priorityClassName: {{ default "openstack-service-critical" .Values.priority_class | quote }}
      volumes:
      - name: slash-root
        emptyDir: {}
      - name: var-log
        emptyDir: {}
      - name: mysql-config-files
        configMap:
          name: {{ include "fullName" . }}-config-files
      - name: mysql-startup-scripts
        configMap:
          name: {{ include "fullName" . }}-startup-scripts
      {{- if not .Values.persistence.enabled }}
      - name: "{{ .Values.persistence.claimName }}"
        emptyDir: {}
      {{- end -}}
      {{- if .Values.ssl.enabled }}
      - name: certificates
        secret:
          secretName: {{ .Values.ssl.secret }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end -}}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: "{{ .Values.persistence.claimName }}"
    spec:
      accessModes: [{{ .Values.persistence.accessMode | quote }}]
      {{- if .Values.persistence.storageClass }}
      {{- if (eq "-" .Values.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.persistence.storageClass }}"
      {{- end }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.size | quote }}
  {{- end -}}
