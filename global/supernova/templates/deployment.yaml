# prettier-ignore

kind: Deployment
apiVersion: apps/v1

metadata:
  name: supernova

spec:
  selector:
    matchLabels:
      app: supernova

  revisionHistoryLimit: 3
  replicas: 0 #{{ .Values.replica_count }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 2
  template:
    metadata:
      labels:
        app: supernova
      annotations:
        # Hash supernova configMap and save in in annotation so that a change to it triggers a pod recycle (to ensure the new config file is read)
        supernova-config-hash: {{ include (print $.Template.BasePath "/supernova-config.yaml") $ | sha256sum }}
    spec:
      volumes:
        - name: alertmanager-certs
          secret:
            secretName: alertmanager-sso-cert
        - name: support-files
          configMap:
            name: supernova-config
      # The preStop hook below sleeps 30 seconds, extend the gracePeriod accordingly
      terminationGracePeriodSeconds: 60
      containers:
        - name: web
          image: {{ .Values.global.registry }}/supernova:{{ .Values.image.tag }}
          imagePullPolicy: {{.Values.image.pullPolicy}}
          ports:
            - name: http
              containerPort: 80

          volumeMounts:
            - name: alertmanager-certs
              mountPath: '/home/app/webapp/config/certs'
              readOnly: true  
            - name: support-files
              mountPath: '/home/app/webapp/config/support'
              readOnly: true       
          env:
            - name: REGION
              value: {{ .Values.region }}
            - name: REACT_APP_ALERTMANAGER_API_ENDPOINT
              value: {{ .Values.alertmanager_api_endpoint }}
            - name: REACT_APP_ALERTMANAGER_API_ENDPOINT_BACKUP
              value: {{ .Values.alertmanager_api_endpoint_backup }}
            - name: REACT_APP_PAGERDUTY_API_ENDPOINT
              value: {{ .Values.pagerduty_api_endpoint }}
            - name: REACT_APP_PAGERDUTY_API_TOKEN
              value: {{ .Values.pagerduty_api_token }}
            - name: REACT_APP_PAGERDUTY_SERVICE_USER_EMAIL
              value: {{ .Values.pagerduty_service_user_email }}
            - name: ALERTS_UPDATE_TIMEOUT_SEC
              value: {{ .Values.alerts_update_timeout_sec | quote }}
            - name: SILENCES_UPDATE_TIMEOUT_SEC
              value: {{ .Values.silences_update_timeout_sec | quote }}
            - name: ACKED_ALERTS_UPDATE_TIMEOUT_SEC
              value: {{ .Values.acked_alerts_update_timeout_sec | quote }}  
            - name: OIDC_ENDPOINT
              value: {{ .Values.oidc_endpoint | quote }}  
            - name: OIDC_CLIENT_ID
              value: {{ .Values.oidc_client_id | quote }}  
            - name: PAGERDUTY_SERVICE_IDS
              value: {{ .Values.pagerduty_service_ids | quote }}

          livenessProbe:
            httpGet:
              path: /system/liveliness
              port: 80
            timeoutSeconds: 10
            periodSeconds: 60
            initialDelaySeconds: 60
          readinessProbe:
            httpGet:
              path: /system/readiness
              port: 80
            timeoutSeconds: 5
            periodSeconds: 5
          lifecycle:
            preStop:
              exec:
                #Give the ingress some time to reload its config
                command: ["/bin/sh","-c","sleep 30"]
