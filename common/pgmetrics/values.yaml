# these values must be supplied by the regional globals.yaml
global:
  tld: ""
  region: ""
  quayIoMirror: ""

# if enabled, configures `stakater/Reloader` (annotations) to cause the
# deployment to do a rolling restart when referenced CMs and Secrets annotated
# with `reloader.stakater.com/match: "true"` (e.g. Secret with DB password)
# change
reloader:
  enabled: false

# database hostname (default is "{{.Release.Name}}-postgresql")
db_host: ""

# Which databases to monitor. This is an object with the database names as keys, and optional settings within the value. For example:
#
# databases:
#   first:
#     customMetrics: ... # same format as `.Values.customMetrics` below
#   second: {} # no special settings
databases: {}

# whether builtin collectors are enabled in the postgres-exporter
# (e.g. the bgwriter queries can be quite costly, so you might want to disable them if not used)
collectors:
  database: true
  replication_slot: true
  stat_bgwriter: true

image:
  repository: shared-app-images/postgres-exporter
  tag: 0.17.1-20250506224343

# resource requests and limits <http://kubernetes.io/docs/user-guide/compute-resources/>
resources:
  limits:
    memory: 128Mi
    cpu: 100m
  requests:
    memory: 64Mi
    cpu: 50m

# alert configuration for Prometheus
alerts:
  enabled: true
  # name of the Prometheus that scrapes the metrics and produces alerts
  prometheus: openstack
  # The tier label of the alerts.
  tier: os
  # The support group label of the alerts. Must be given in values.yaml of parent chart.
  support_group:
  # Configurable service label of the alerts. Defaults to `.Release.Name`.
  service: ""

  # An alert will be sent if the scrape duration of this exporter consistently
  # exceeds this threshold (value in seconds).
  scrape_duration_threshold: 5

# Queries defined in this section are executed separately in each database configured in `.Values.databases[]`.
# In the query string, the placeholder %PGDATABASE% is replaced by the database name.
#
# For customMetrics queries that are only applicable to specific databases, please use `.Values.databases[].customMetrics`.
customMetrics:
  pg_stat_user_tables:
    query: "SELECT '%PGDATABASE%' AS datname, schemaname, relname, seq_scan, seq_tup_read, idx_scan, idx_tup_fetch, n_tup_ins, n_tup_upd, n_tup_del, n_tup_hot_upd, n_live_tup, n_dead_tup, n_mod_since_analyze, last_vacuum, last_autovacuum, last_analyze, last_autoanalyze, vacuum_count, autovacuum_count, analyze_count, autoanalyze_count FROM pg_stat_user_tables"
    metrics:
      - datname:
          usage: "LABEL"
          description: "Name of the database that this table is in"
      - schemaname:
          usage: "LABEL"
          description: "Name of the schema that this table is in"
      - relname:
          usage: "LABEL"
          description: "Name of this table"
      - seq_scan:
          usage: "COUNTER"
          description: "Number of sequential scans initiated on this table"
      - seq_tup_read:
          usage: "COUNTER"
          description: "Number of live rows fetched by sequential scans"
      - idx_scan:
          usage: "COUNTER"
          description: "Number of index scans initiated on this table"
      - idx_tup_fetch:
          usage: "COUNTER"
          description: "Number of live rows fetched by index scans"
      - n_tup_ins:
          usage: "COUNTER"
          description: "Number of rows inserted"
      - n_tup_upd:
          usage: "COUNTER"
          description: "Number of rows updated"
      - n_tup_del:
          usage: "COUNTER"
          description: "Number of rows deleted"
      - n_tup_hot_upd:
          usage: "COUNTER"
          description: "Number of rows HOT updated (i.e., with no separate index update required)"
      - n_live_tup:
          usage: "GAUGE"
          description: "Estimated number of live rows"
      - n_dead_tup:
          usage: "GAUGE"
          description: "Estimated number of dead rows"
      - n_mod_since_analyze:
          usage: "GAUGE"
          description: "Estimated number of rows changed since last analyze"
      - last_vacuum:
          usage: "GAUGE"
          description: "Last time at which this table was manually vacuumed (not counting VACUUM FULL)"
      - last_autovacuum:
          usage: "GAUGE"
          description: "Last time at which this table was vacuumed by the autovacuum daemon"
      - last_analyze:
          usage: "GAUGE"
          description: "Last time at which this table was manually analyzed"
      - last_autoanalyze:
          usage: "GAUGE"
          description: "Last time at which this table was analyzed by the autovacuum daemon"
      - vacuum_count:
          usage: "COUNTER"
          description: "Number of times this table has been manually vacuumed (not counting VACUUM FULL)"
      - autovacuum_count:
          usage: "COUNTER"
          description: "Number of times this table has been vacuumed by the autovacuum daemon"
      - analyze_count:
          usage: "COUNTER"
          description: "Number of times this table has been manually analyzed"
      - autoanalyze_count:
          usage: "COUNTER"
          description: "Number of times this table has been analyzed by the autovacuum daemon"

  pg_replication:
    query: "SELECT '%PGDATABASE%' AS datname, EXTRACT(EPOCH FROM (now() - pg_last_xact_replay_timestamp()))::INT as lag"
    metrics:
      - datname:
          usage: "LABEL"
          description: "Name of the database that this table is in"
      - lag:
          usage: "GAUGE"
          description: "Replication lag behind master in seconds"

  pg_postmaster:
    query: "SELECT '%PGDATABASE%' AS datname, pg_postmaster_start_time as start_time_seconds from pg_postmaster_start_time()"
    metrics:
      - datname:
          usage: "LABEL"
          description: "Name of the database that this table is in"
      - start_time_seconds:
          usage: "GAUGE"
          description: "Time at which postmaster started"

  pg_stat_activity_by_client:
    query: "SELECT datname, CONCAT(COALESCE(HOST(client_addr), 'localhost'), ':', client_port) AS client_addr, application_name, state, COUNT(*) AS count FROM pg_stat_activity WHERE client_port IS NOT NULL GROUP BY datname, client_addr, client_port, application_name, state"
    metrics:
      - datname:
          usage: LABEL
          description: Database name
      - client_addr:
          usage: LABEL
          description: IP address and port from which client connected
      - application_name:
          usage: LABEL
          description: Application name as supplied by client
      - state:
          usage: LABEL
          description: Current state of connection
      - count:
          usage: GAUGE
          description: Number of open connections per client and connection state
