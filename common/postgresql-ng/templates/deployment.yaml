{{- $deployment_name := include "postgres.fullname" . -}}
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ $deployment_name }}
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{ template "postgres.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "postgres.fullname" . }} # backwards compability because selector cannot be changed
        name: {{ template "postgres.fullname" . }}
      annotations:
        kubectl.kubernetes.io/default-container: postgres
        checksum/etc: {{ include (print $.Template.BasePath  "/configmap.yaml") . | sha256sum }}
        {{- if and $.Values.global.linkerd_enabled $.Values.global.linkerd_requested }}
        linkerd.io/inject: enabled
        {{- end }}
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: cloud.sap/maintenance-state
                operator: In
                values:
                - operational

      {{- if .Values.nodeSelector }}
      nodeSelector: {{ toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}

      {{- if .Values.tolerations }}
      tolerations: {{ toYaml .Values.tolerations | nindent 8 }}
      {{- end }}

      initContainers:
      - name: generate-secrets
        image: "{{ include "preferredRegistry" . }}/shared-app-images/alpine-kubectl:3.19-latest"
        env:
        - name: DEBUG
          value: {{ quote .Values.debug }}
        - name: RELEASE
          value: {{ quote .Release.Name }}
        - name: DEPLOYMENT_NAME
          value: {{ $deployment_name }}
        - name: USERS
          value: {{ keys (.Values.users | required ".Values.users must be configured") | sortAlpha | join " " | quote }}
        command: [ ash, -c, {{ .Files.Get "bin/init-generate-secrets.sh" | quote }} ]

      containers:
      - name: postgres
        image: "{{ include "preferredRegistry" . }}/postgres-ng:{{ .Values.imageTag }}"
        imagePullPolicy: "IfNotPresent"
        env:
        - name: DEBUG
          value: {{ .Values.debug | quote }}
        - name: PERSISTENCE_ENABLED
          value: {{ .Values.persistence.enabled | quote }}
        - name: PGBACKUP_HOST
          value: '{{ .Release.Name }}-pgbackup.{{ .Release.Namespace }}.svc'
        - name: PGBIN
          value: "/usr/lib/postgresql/{{ .Values.postgresVersion}}/bin"
        - name: PGDATA
          value: "/var/lib/postgresql/{{ .Values.postgresVersion}}"
        - name: PGVERSION
          value: {{ .Values.postgresVersion | quote }}
        - name: PGDATABASE
          value: {{ .Values.postgresDatabase | quote }}
        - name: PGUSER
          value: postgres
        - name: PGAUTHMETHOD
          value: "{{ if ge ($.Values.postgresVersion | int) 12 }}scram-sha-256{{ else }}md5{{ end }}"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        {{- range $user, $settings := .Values.users }}
        - name: USER_PASSWORD_{{ $user | replace "-" "_" }}
          valueFrom:
            secretKeyRef:
              name: {{ $.Release.Name }}-pguser-{{ $user }}
              key: postgres-password
        {{- end }}

        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - bash
            - -c
            - "[[ -e /tmp/in-init ]] || exec pg_isready --host $POD_IP --timeout {{ .Values.probe_timeout_secs }}"
          initialDelaySeconds: 120
          timeoutSeconds: {{ .Values.probe_timeout_secs }}
          failureThreshold: {{ .Values.probe_failure_threshold }}
        readinessProbe:
          exec:
            command:
            - bash
            - -c
            - "[[ -e /tmp/in-init ]] || exec pg_isready --host $POD_IP --timeout {{ .Values.probe_timeout_secs }}"
          initialDelaySeconds: 5
          timeoutSeconds: {{ .Values.probe_timeout_secs }}
        resources:
          limits: {{ toYaml .Values.resources.limits | nindent 12 }}
          {{- if not (.Values.global.region | regexMatch "^qa-de-[2-6]$") }}
          requests: {{ toYaml .Values.resources.requests | nindent 12 }}
          {{- end }}
        volumeMounts:
        - name: data
          mountPath: /data
        - name: postgres-etc
          mountPath: /etc/postgresql
        {{- if .Values.sqlOnCreate }}
        - name: sql-on-create
          mountPath: /sql-on-create.d
        {{- end }}
        - name: sql-on-startup
          mountPath: /sql-on-startup.d
        {{- if .Values.sharedMemoryLimit }}
        - name: dev-shm
          mountPath: /dev/shm
        {{- end }}
      serviceAccountName: {{ template "postgres.fullname" . }}
      volumes:
      - name: postgres-etc
        configMap:
          name: {{ template "postgres.fullname" . }}-etc
      - name: data
      {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.existingClaim | default (include "postgres.fullname" .) }}
      {{- else }}
        emptyDir: {}
      {{- end }}
        {{- if .Values.sqlOnCreate }}
      - name: sql-on-create
        configMap:
          name: {{ template "postgres.fullname" . }}-sql-on-create
      {{- end }}
      - name: sql-on-startup
        configMap:
          name: {{ template "postgres.fullname" . }}-sql-on-startup
      {{- if .Values.sharedMemoryLimit }}
      - name: dev-shm
        emptyDir:
          medium: Memory
          sizeLimit: {{ .Values.sharedMemoryLimit }}
      {{- end }}
