kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ template "fullname" . }}
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
      annotations:
        kubectl.kubernetes.io/default-container: postgres
        checksum/etc: {{ include (print $.Template.BasePath  "/configmap.yaml") . | sha256sum }}
        {{- if and $.Values.global.linkerd_enabled $.Values.global.linkerd_requested }}
        linkerd.io/inject: enabled
        {{- end }}
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: cloud.sap/maintenance-state
                operator: In
                values:
                - operational

      initContainers:
      - name: generate-secrets
        # at the time of writing, kubectl is only available in edge
        image: "{{ include "preferredDockerHubMirror" . }}/library/alpine:edge"
        env:
        - name: DEBUG
          value: {{ quote .Values.debug }}
        - name: RELEASE
          value: {{ quote .Release.Name }}
        - name: USERS
          value: {{ keys (.Values.users | required ".Values.users must be configured") | join " " | quote }}
        command: [ ash, -c, {{ .Files.Get "bin/init-generate-secrets.sh" | quote }} ]

      containers:
      - name: postgres
        image: "{{ include "preferredRegistry" . }}/postgres-ng:{{ .Values.imageTag }}"
        imagePullPolicy: "IfNotPresent"
        args: ["-c", "config_file=/postgresql-conf/postgresql.conf"]
        env:
        - name: DEBUG
          value: {{ .Values.debug | quote }}
        - name: PGVERSION
          value: {{ .Values.postgresVersion | quote }}
        - name: PGDATABASE
          value: {{ .Values.postgresDatabase | quote }}
        - name: PGUSER
          value: {{ .Values.postgresUser | quote }}
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        {{- range $user, $settings := .Values.users }}
        - name: USER_PASSWORD_{{ $user }}
          valueFrom:
            secretKeyRef:
              name: {{ $.Release.Name }}-pguser-{{ $user }}
              key: postgres-password
        {{- end }}
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP

        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 120
          timeoutSeconds: {{ .Values.probe_timeout_secs }}
          failureThreshold: {{ .Values.probe_failure_threshold }}
        # We use the POD_IP to not have the pod become ready during the inital database setup
        # where the docker image briefly starts the db  for creating the user,
        # running custom setup scripts etc.
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: {{ .Values.probe_timeout_secs }}
        startupProbe:
          exec:
            command:
            - test
            - -f
            - /tmp/init-done
          initialDelaySeconds: 5
          timeoutSeconds: {{ .Values.probe_timeout_secs }}
        resources: {{ toYaml .Values.resources | nindent 10 }}
        volumeMounts:
        - name: data
          mountPath: /data
        - name: postgres-etc
          mountPath: /postgresql-conf
        {{- if .Values.sqlOnCreate }}
        - name: sql-on-create
          mountPath: /sql-on-create.d
        {{- end }}
        - name: sql-on-startup
          mountPath: /sql-on-startup.d
        {{- if .Values.sharedMemoryLimit }}
        - name: dev-shm
          mountPath: /dev/shm
        {{- end }}
      serviceAccountName: {{ template "fullname" . }}
      volumes:
      - name: postgres-etc
        configMap:
          name: {{ template "fullname" . }}-etc
      - name: data
      {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.existingClaim | default (include "fullname" .) }}
      {{- else }}
        emptyDir: {}
      {{- end }}
        {{- if .Values.sqlOnCreate }}
      - name: sql-on-create
        configMap:
          name: {{ template "fullname" . }}-sql-on-create
      {{- end }}
      - name: sql-on-startup
        configMap:
          name: {{ template "fullname" . }}-sql-on-startup
      {{- if .Values.sharedMemoryLimit }}
      - name: dev-shm
        emptyDir:
          medium: Memory
          sizeLimit: {{ .Values.sharedMemoryLimit }}
      {{- end }}
