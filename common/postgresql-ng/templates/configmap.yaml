{{- if .Values.crontab }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "postgres.fullname" . }}-crontab
data:
  root: |
    {{ .Values.crontab }}
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "postgres.fullname" . }}-etc
data:
  postgresql.conf: |
    {{- include (print .Template.BasePath "/_postgresql.conf.tpl") . | nindent 4 }}

---

{{- $userNames := keys .Values.users | sortAlpha }}
{{- if .Values.persistence.createBackupUser }}
  {{- $userNames = append $userNames "backup" }}
{{- end }}
{{- if .Values.createMetricsUser }}
  {{- $userNames = append $userNames "metrics" }}
{{- end }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "postgres.fullname" . }}-sql-on-startup
data:
  # first phase of SQL on startup: statements that are executed in the "postgres" database
  phase1-system.sql: |
    {{- if hasKey .Values.extensions "pg_stat_statements" }}
    CREATE EXTENSION IF NOT EXISTS pg_stat_statements;
    {{- end }}

    -- create databases as needed
    {{- range $dbName := keys .Values.databases | sortAlpha }}
    SELECT 'CREATE DATABASE "{{ $dbName }}"' WHERE NOT EXISTS (SELECT datname FROM pg_database WHERE datname='{{ $dbName }}')\gexec
    {{- end }}

    -- TODO: drop with next breaking update
    SELECT 'REASSIGN OWNED BY poor_mans_pg_read_all_data TO pg_read_all_data' WHERE EXISTS (SELECT rolname FROM pg_roles WHERE rolname='poor_mans_pg_read_all_data')\gexec
    SELECT 'DROP OWNED BY poor_mans_pg_read_all_data' WHERE EXISTS (SELECT rolname FROM pg_roles WHERE rolname='poor_mans_pg_read_all_data')\gexec
    DROP ROLE IF EXISTS poor_mans_pg_read_all_data;

    -- create users and update passwords if rotated
    SET password_encryption = 'scram-sha-256';
    {{- range $userName := $userNames }}
    SELECT 'CREATE ROLE "{{ $userName }}" WITH PASSWORD ''%USER_PASSWORD_{{ $userName | replace "-" "_" }}%'' LOGIN' WHERE NOT EXISTS (SELECT rolname FROM pg_authid WHERE rolname = '{{ $userName }}')\gexec
    ALTER USER "{{ $userName }}" WITH PASSWORD '%USER_PASSWORD_{{ $userName | replace "-" "_" }}%';
    {{- end }}

    {{- if $userNames | has "backup" }}
    -- maintain permissions for user "backup"
    GRANT pg_read_all_data to backup;
    {{- range (keys .Values.databases | sortAlpha) }}
    GRANT CONNECT ON DATABASE "{{ . }}" TO backup;
    {{- end }}
    {{- end }}

    {{- if $userNames | has "metrics" }}
    -- maintain permissions for user "metrics" (pg_read_all_data is required for custom metrics)
    GRANT pg_monitor to metrics;
    GRANT pg_read_all_data to metrics;
    {{- if ge ($.Values.postgresVersion | int) 16 }}
    GRANT pg_use_reserved_connections to metrics;
    {{- end }}
    {{- end }}

  # second phase of SQL on startup: statements that are executed in the respective payload databases
  {{- range $dbName := keys .Values.databases | sortAlpha }}
  {{- $settings := index $.Values.databases $dbName | default (dict) }}
  phase2-{{ $dbName }}.sql: |
    {{- $ownerName := $dbName }}
    -- maintain permissions for database owner "{{ $ownerName }}"
    ALTER DATABASE "{{ $dbName }}" OWNER TO "{{ $ownerName }}";
    ALTER SCHEMA public OWNER TO "{{ $ownerName }}";
    -- fixup ownership of individual objects (might be necessary when database ownership changes)
    SELECT format('ALTER TABLE %I.%I.%I OWNER TO "%I";', table_catalog, table_schema, table_name, '{{ $ownerName }}')
      FROM information_schema.tables WHERE table_schema = 'public'\gexec
    SELECT FORMAT('ALTER TYPE %I.%I.%I OWNER TO "%I";', current_database()::information_schema.sql_identifier, n.nspname, t.typname, '{{ $ownerName }}')
      FROM pg_catalog.pg_type t JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE t.typtype = 'e' AND n.nspname = 'public'\gexec

    {{- if $settings.sqlOnStartup }}
    -- application-specific startup code
    {{- $settings.sqlOnStartup | nindent 4 }}
    {{- end }}
  {{- end }}
