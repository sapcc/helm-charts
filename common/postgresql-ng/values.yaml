# If enabled, image references use `.Values.registryAlternateRegion` instead of `.Values.registry`.
useAlternateRegion: false

debug: false

# if enabled, annotates generated password Secrets with `stakater/Reloader`
# annotations to cause the consuming applications annotated with
# `reloader.stakater.com/auto: "true"` to be restarted when the corresponding
# Secrets change
reloader:
  annotateGeneratedSecrets: false

extensions:
  pg_stat_statements:
    max: 1000
    track: all

# Refer to the "ccloud/postgres-ng" repository in Keppel to see which image tags exist.
imageTag: '20250513093049'

# The version of postgres to start.
# This will be bumped over time and auto upgrade the database.
postgresVersion: 17

# a selection of postgresql.conf settings which can be changed via values
config:
  # Sets the option of the same name in the postgresql.conf.
  # If set to a positive integer value, logs statements that run for longer than this many milliseconds.
  log_min_duration_statement: -1

  # max allowed connections to the database
  # Note: Increasing max_connections costs ~400 bytes of shared memory per
  max_connections: 100

  random_page_cost: 1.1

# Databases to create. This is an object with the database names as keys, and optional settings within the value. For example:
#
# databases:
#   first:
#     sqlOnStartup: |
#       GRANT CONNECT, SELECT ON DATABASE "first" TO "acme";
#   second: {} # no special settings
#
# For each database declared here, there must be a user account with the same name in the `users` section below.
# That user will be the owner of the database, with privileges to execute DDL statements and read/write all data in it.
#
# The "sqlOnStartup" key is optional and will execute the given SQL statements
# within the database with superuser privileges on each startup of the PostgreSQL server.
# This is usually used to provide permissions to non-owner users.
databases: {}

# Users to create. This is an object with the user names as keys, and optional settings within the value. For example:
#
# users:
#   first:
#     secretName: mySecret
#     secretKey: myKey
#   second: {}
#
# By default, each user will have a password autogenerated by the DB pod.
# This password is placed in the "password" field of the secret "$RELEASE-pguser-$USERNAME".
# If auto generating secrets doesn't work for you, you can also manage them yourselves and provide the "secretKey" and "secretName" as shown above.
users: {}

createMetricsUser: true

# crontab to run in a side container to execute routine maintenance tasks
# Note: time is in UTC
# example:
# 42 23 * * * psql -tAd acme-db -c "VACUUM ANALYZE"
crontab: ""

# Persist data to a persistent volume
persistence:
  enabled: true
  createBackupUser: true
  accessMode: ReadWriteMany # compatibility to allow easy upgrades
  size: 10Gi
  # Re-use existing (unmanaged) PVC
  # existingClaim: claimName

# Size of /dev/shm. If null, we use whatever default amount the container
# runtime gives us (see `df -h /dev/shm` inside the Postgres container).
sharedMemoryLimit: null

probe_timeout_secs: 3
probe_failure_threshold: 6 # number of liveness probes that need to fail to trigger a pod restart

alerts:
  enabled: true
  support_group: null # This field must be filled by the top-level chart.
  service: null       # defaults to .Release.Name if not set

# Configure resource requests and limits
# ref: http://kubernetes.io/docs/user-guide/compute-resources/
resources: {}

# Configure a specific node label for pod assignment
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
nodeSelector: {}

# Configure tolerations for scheduling pods on tainted nodes
# ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []
