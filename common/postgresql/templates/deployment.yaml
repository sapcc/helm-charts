kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        component: "{{ .Values.postgresDatabase }}"
        type: database
        {{- if .Values.alerts.enabled }}
        alert-tier: {{ required ".Values.alerts.tier missing" .Values.alerts.tier }}
        alert-service: {{ include "alerts.service" . }}
        {{- end }}
      annotations:
        checksum/secrets: {{ include (print $.Template.BasePath  "/secrets.yaml") . | sha256sum }}
        checksum/etc: {{ include (print $.Template.BasePath  "/etc-configmap.yaml") . | sha256sum }}
    spec:
      containers:
      - name: postgres
{{- if .Values.custom_repository }}
        image: "{{.Values.global.imageRegistry}}/{{.Values.global.imageNamespace}}/{{ .Values.image }}:{{ .Values.imageTag }}"
{{- else }}
        image: "{{ .Values.image }}:{{ .Values.imageTag }}"
{{- end }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.imagePullPolicy | quote }}
{{- if .Values.debug }}
        command: ["sleep", "inf"]
{{- else }}
        args: ["-c", "config_file=/postgresql-conf/postgresql.conf", "-c", "hba_file=/postgresql-conf/pg-hba.conf"]
{{- end }}
        env:
        - name: POSTGRES_USER
          value: {{ default "postgres" .Values.postgresUser | quote }}
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: {{ default "postgres" .Values.postgresUser | quote }}
        - name: POSTGRES_DB
          value: {{ default "" .Values.postgresDatabase | quote }}
        - name: PGDATA
          value: /postgresql/data
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: postgres-password
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 120
          timeoutSeconds: {{ .Values.probe_timeout_secs }}
          failureThreshold: {{ .Values.probe_failure_threshold }}
        # We use the POD_IP to not have the pod become ready during the inital database setup
        # where the docker image briefly starts the db  for creating the user,
        # running custom setup scripts etc.
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: {{ .Values.probe_timeout_secs }}
        resources:
{{ toYaml (required "missing .resources" .Values.resources) | indent 10 }}
        volumeMounts:
        - name: data
          mountPath: /postgresql
        - name: postgres-etc
          mountPath: /postgresql-conf
{{- if .Values.dbInit }}
        - name: db-init
          mountPath: /docker-entrypoint-initdb.d
{{- end }}
{{- if .Values.dbMaintain }}
        - name: db-maintain
          mountPath: /docker-entrypoint-maintaindb.d
{{- end }}

{{- if and .Values.backup.enabled (not .Values.backup.splitDeployment) }}
{{- if .Values.backup.custom_repository }}
      - image: {{ .Values.backup.image }}:{{ .Values.backup.imageTag }}
{{- else }}
      - image: {{ default "hub.global.cloud.sap" .Values.global.imageRegistry}}/{{ .Values.backup.image }}:{{ .Values.backup.imageTag }}
{{- end }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.backup.imagePullPolicy | quote }}
        name: backup
        env:
          - name: MY_POD_NAME
            value: {{ template "fullname" . }}
          - name: MY_POD_NAMESPACE
            value: {{.Release.Namespace}}
          - name: OS_AUTH_URL
{{- if .Values.backup.os_auth_url }}
            value: {{ .Values.backup.os_auth_url }}
{{- else }}
            value: {{ include "default_keystone_url" . }}
{{- end }}
          - name: OS_AUTH_VERSION
            value: "3"
          - name: OS_USERNAME
            value: {{.Values.backup.os_username}}
          - name: OS_USER_DOMAIN_NAME
            value: {{.Values.backup.os_user_domain}}
          - name: OS_PROJECT_NAME
            value: {{.Values.backup.os_project_name}}
          - name: OS_PROJECT_DOMAIN_NAME
            value: {{.Values.backup.os_project_domain}}
          - name: OS_REGION_NAME
{{- if .Values.backup.os_region_name }}
            value: {{ .Values.backup.os_region_name }}
{{ else }}
            value: {{ .Values.global.region }}
{{- end }}
          - name: OS_PASSWORD
            value: {{.Values.backup.os_password | required "Please set .Values.backup.os_password" | quote}}
          - name: BACKUP_PGSQL_FULL
            value: {{.Values.backup.interval_full | quote}}
        {{- if .Values.backup.resources.enabled }}
        resources:
          limits:
            cpu: {{ .Values.backup.resources.limits.cpu | quote }}
            memory: {{ .Values.backup.resources.limits.memory | quote }}
          requests:
            cpu: {{ .Values.backup.resources.requests.cpu | quote }}
            memory: {{ .Values.backup.resources.requests.memory | quote }}
        {{- end }}
{{- end }}
      volumes:
      - name: postgres-etc
        configMap:
          name: {{ template "fullname" . }}-etc
      - name: data
      {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.existingClaim | default (include "fullname" .) }}
      {{- else }}
        emptyDir: {}
      {{- end }}
{{- if .Values.dbInit }}
      - name: db-init
        configMap:
          name: {{ .Values.dbInit }}
{{- end }}
{{- if .Values.dbMaintain }}
      - name: db-maintain
        configMap:
          name: {{ .Values.dbMaintain }}
{{- end }}
