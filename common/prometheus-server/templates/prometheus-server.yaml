{{- $root := . }}
{{- range $name := coalesce .Values.names .Values.global.targets (list .Values.name) }}
---
apiVersion: monitoring.coreos.com/v1
kind: Prometheus

metadata:
  name: {{ include "prometheus.name" (list $name $root) }}
  labels:
    prometheus: {{ include "prometheus.name" (list $name $root) }}
    common-chart: prometheus-server-{{ $.Chart.Version }}

spec:
  replicas: 1
  shards: 1

  {{ if $.Values.rbac.create -}}
  serviceAccountName: {{ include "serviceAccount.name" (list $name $root) }}
  {{- end }}

  image: {{ include "prometheus.image" $root }}

  # Select all ServiceMonitors with the label 'prometheus: <name>'.
  serviceMonitorSelector:
    matchLabels:
      prometheus: {{ include "prometheus.name" (list $name $root) }}

  # Select all PodMonitors with the label 'prometheus: <name>'.
  podMonitorSelector:
    matchLabels:
      prometheus: {{ include "prometheus.name" (list $name $root) }}

  # Select all ScrapeConfigs with the label 'prometheus: <name>'.
  scrapeConfigSelector:
    matchLabels:
      prometheus: {{ include "prometheus.name" (list $name $root) }}

  {{ if $.Values.serviceDiscoveries.probes.enabled }}
  # Select all Probes with the label 'prometheus: <name>'.
  probeSelector:
    matchLabels:
      prometheus: {{ include "prometheus.name" (list $name $root) }}
  {{- end }}

  # Select all (aggregation, alerting) PrometheusRules with the label 'prometheus: <name>'.
  ruleSelector:
    matchLabels:
      prometheus: {{ include "prometheus.name" (list $name $root) }}

  # Select rules, serviceMonitors, podMonitors from all namespaces.
  ruleNamespaceSelector: {}
  serviceMonitorNamespaceSelector: {}
  podMonitorNamespaceSelector: {}
  {{- if $.Values.serviceDiscoveries.probes.enabled }}
  probeNamespaceSelector: {}
  {{- end }}

  {{- if $.Values.remoteWriteTargets }}
  remoteWrite:
  {{- range $remoteWrite := $.Values.remoteWriteTargets }}
    - name: {{ $remoteWrite.name }}
      url: {{ $remoteWrite.url }}
      tlsConfig:
        ca:
          secret:
            name: {{ $remoteWrite.tlsConfig.ca.secret.name }}
            key: {{ $remoteWrite.tlsConfig.ca.secret.key }}
        cert:
          secret:
            name: {{ $remoteWrite.tlsConfig.cert.secret.name }}
            key: {{ $remoteWrite.tlsConfig.cert.secret.key }}
        keySecret:
          name: {{ $remoteWrite.tlsConfig.keySecret.name }}
          key: {{ $remoteWrite.tlsConfig.keySecret.key }}
      remoteTimeout: 60s
  {{- end }}
  {{- end }}

  # The labels to add to any time series or alerts when communicating with external systems (federation, remote storage, Alertmanager).
  externalLabels:
    region: {{ required ".Values.global.region missing" $.Values.global.region }}
    cluster: {{ if $.Values.global.cluster }}{{ $.Values.global.cluster }}{{ else }}{{ $.Values.global.region }}{{ end }}
    cluster_type: {{ required ".Values.global.clusterType missing" $.Values.global.clusterType }}
    {{- if $.Values.externalLabels }}
{{ toYaml $.Values.externalLabels | indent 4 }}
    {{- end }}

  {{- if and $.Values.global.linkerd_enabled $.Values.global.linkerd_requested }}
  podMetadata:
    annotations:
      linkerd.io/inject: enabled
      config.linkerd.io/proxy-ephemeral-storage-request: 10M
  {{- end }}

  {{ if $.Values.additionalScrapeConfigs -}}
  # Inject additional scrape configurations.
  additionalScrapeConfigs:
{{ toYaml $.Values.additionalScrapeConfigs | indent 4}}
  {{- end }}

  {{ if $.Values.scrapeInterval }}
  # Interval between consecutive scrapes.
  scrapeInterval: {{ $.Values.scrapeInterval }}
  {{ end }}

  {{ if $.Values.configMaps }}
  # Mount additional configmaps from the same namespace.
  configMaps:
{{ toYaml $.Values.configMaps | indent 4 }}
  {{- end }}

  # Mount additional secrets from the same namespace.
  secrets: {{ if not (or $.Values.secrets $.Values.alertmanagers.authentication.enabled) }}[]{{ end }}
  {{- if $.Values.secrets }}
{{ toYaml $.Values.secrets | indent 4 }}
  {{ end }}
  {{- if $.Values.alertmanagers.authentication.enabled }}
    - {{ include "prometheus.fullName" (list $name $root) }}-alertmanager-sso-cert
  {{ end }}

  {{ if $.Values.alertmanagers.hosts -}}
  # Alertmanager configuration.
  additionalAlertManagerConfigs:
    name: {{ include "prometheus.fullName" (list $name $root) }}-alertmanager-config
    key: config.yaml

  # Alertmanager configuration to ensure mandatory labels are present on alerts.
  additionalAlertRelabelConfigs:
    name: {{ include "prometheus.fullName" (list $name $root) }}-alertmanager-config
    key: relabelConfig.yaml
  {{- end }}

  {{ if $.Values.ingress.enabled -}}
  # The external URL of the Prometheus.
  externalUrl: https://{{ include "prometheus.externalURL" (list $name $root) }}
  {{- end }}

  # The retention time of the Prometheus.
  retention: {{ default "12h" $.Values.retentionTime }}

  # The log level of the Prometheus.
  logLevel: {{ default "warn" $.Values.logLevel }}

  # Storage configuration.
  # If configured, persistent storage is used, alternatively data is stored in memory.
  storage:
    {{- if $.Values.persistence.enabled }}
    volumeClaimTemplate:
      metadata:
        name: {{ include "pvc.name" (list $name $root) }}
        labels:
          prometheus: {{ include "prometheus.name" (list $name $root) }}
      spec:
        accessModes:
          - {{ required "$.Values.persistence.accessMode missing" $.Values.persistence.accessMode | quote }}
        resources:
          requests:
            storage: {{ required "$.Values.persistence.size missing" $.Values.persistence.size | quote }}
        {{ if $.Values.persistence.selector }}
        selector:
{{ toYaml $.Values.persistence.selector | indent 10 }}
        {{ end }}
    {{ else }}
    emptyDir:
      medium: Memory
    {{- end -}}

  {{ if $.Values.thanos.enabled }}
  # Thanos configuration.
  thanos:
    {{- if and (not $.Values.thanos.spec.objectStorageConfig) $.Values.thanos.objectStorageConfig.enabled }}
    objectStorageConfig:
      name: {{ include "thanos.objectStorageConfig.name" (list $name $root) }}
      key: {{ include "thanos.objectStorageConfig.key" $root }}
      optional: true
    {{ end }}
    logLevel: {{ default "warn" $.Values.thanos.logLevel }}
{{ toYaml $.Values.thanos.spec | indent 4 }}
  {{- end -}}

  {{ if $.Values.resources }}
  # Kubernetes resource requests and limits if configured.
  resources:
{{ toYaml $.Values.resources | indent 4 }}
  {{ end }}

  {{ if $.Values.securityContext }}
  # A security context defines privilege and access control settings for a Pod or Container.
  securityContext:
{{ toYaml $.Values.securityContext | indent 4 }}
  {{ end }}

  {{ if $.Values.tolerations }}
  # The pod tolerations.
  tolerations:
{{ toYaml $.Values.tolerations | indent 4 }}
  {{ end }}

  {{ if $.Values.affinity }}
  # Assign custom affinity rules to the prometheus instance.
  affinity:
{{ toYaml $.Values.affinity | indent 4 }}
  {{ end }}

  {{ if $.Values.nodeSelector }}
  # Define which Nodes the Pods are scheduled on.
  nodeSelector:
{{ toYaml $.Values.nodeSelector | indent 4 }}
  {{ end }}

{{- end }}
