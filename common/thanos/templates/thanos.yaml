{{- $root := . }}
{{- if .Values.enabled }}
{{- range $name := coalesce .Values.names .Values.global.targets (list .Values.name) }}
---
apiVersion: monitoring.banzaicloud.io/v1alpha1
kind: Thanos
metadata:
  name: {{ include "thanos.fullName" (list $name $root) }}
spec:
  queryDiscovery: false
  clusterDomain: {{ include "clusterDomainOrDefault" $root }}
  query:
    logLevel: {{ $.Values.logLevel }}
    queryAutoDownsampling: true
    queryReplicaLabel:
      - prometheus_replica
    {{- if $.Values.deployWholeThanos }}
    webRoutePrefix: {{ required "$.Values.query.webRouteprefix missing" $.Values.query.webRouteprefix }}
    webExternalPrefix: {{ required "$.Values.query.webRouteprefix missing" $.Values.query.webRouteprefix }}
    stores:
    # add stores for prometheus and thanos setup
      - prometheus-{{ include "thanos.name" (list $name $root) }}:10901
    {{- end }}
    serviceOverrides:
      metadata:
        labels:
          thanos: {{ include "thanos.name" (list $name $root) }}
        {{- if and $.Values.global.linkerd_enabled $.Values.global.linkerd_requested }}
        annotations:
          linkerd.io/inject: enabled
        {{- end }}
    deploymentOverrides:
      spec:
        replicas: {{ $.Values.query.replicas }}
        template:
          {{- if and $.Values.global.linkerd_enabled $.Values.global.linkerd_requested }}
          metadata:
            annotations:
              linkerd.io/inject: enabled
          {{- end }}
          spec:
            containers:
            - image: {{ include "thanosimage" $root }}
              name: query
            {{- if not $.Values.deployWholeThanos }}
              args:
              - query
              - --grpc-address=0.0.0.0:10901
              - --http-address=0.0.0.0:10902
              - --log.level={{ default "info" $.Values.query.logLevel }}
              - --query.auto-downsampling
              - --query.replica-label=prometheus_replica
              - --alert.query-url=http://{{- include "thanos.externalURL" (list $name $root) -}}
              {{- if $.Values.authentication.enabled }}
              - --grpc-client-tls-ca=/etc/tls/client-ca/ca.crt
              - --grpc-client-tls-cert=/etc/tls/client/tls.crt
              - --grpc-client-tls-key=/etc/tls/client/tls.key
              - --grpc-client-tls-secure
              {{- end }}
              - --store.sd-files=/conf/sd/servicediscovery.yaml
              - --store.sd-interval={{ default "5m" $.Values.querySDInterval }}
              {{- range $.Values.query.extraArgs}}
              - {{ . }}
              {{- end }}
              volumeMounts:
              {{- if $.Values.authentication.enabled }}
              - mountPath: /etc/tls/client
                name: client-certificate
                readOnly: true
              - mountPath: /etc/tls/client-ca
                name: client-ca
                readOnly: true
              {{- end }}
              - name: sd-config
                mountPath: /conf/sd
            securityContext:
              fsGroup: 0
              runAsGroup: 0
              runAsUser: 0
            volumes:
            {{- if $.Values.authentication.enabled }}
            - name: client-certificate
              secret:
                defaultMode: 420
                secretName: {{ include "thanos.fullName" (list $name $root) }}-grpcclient-crt
            - name: client-ca
              secret:
                defaultMode: 420
                secretName: {{ include "thanos.fullName" (list $name $root) }}-grpcclient-ca
            {{- end }}
            - configMap:
                defaultMode: 420
                name: {{ include "thanos.fullName" (list $name $root) }}-query-sd-configmap
              name: sd-config
            {{- end }}
  {{- if $.Values.deployWholeThanos }}
  storeGateway:
    logLevel: {{ $.Values.logLevel }}
    indexCacheSize: {{ required ".Values.store.indexCacheSize missing" $.Values.store.indexCacheSize }}
    chunkPoolSize: {{ required ".Values.store.chunkPoolSize missing" $.Values.store.chunkPoolSize }}
    storeGRPCSeriesMaxConcurrency: {{ required ".Values.store.seriesMaxConcurrency missing" $.Values.store.seriesMaxConcurrency }}
    serviceOverride:
      metadata:
        labels:
          thanos: {{ include "thanos.name" (list $name $root) }}
        {{- if and $.Values.global.linkerd_enabled $.Values.global.linkerd_requested }}
        annotations:
          linkerd.io/inject: enabled
        {{- end }}
    deploymentOverrides:
      {{- if and $.Values.global.linkerd_enabled $.Values.global.linkerd_requested }}
      metadata:
        annotations:
          linkerd.io/inject: enabled
      {{- end }}
      spec:
        template:
          spec:
            containers:
            - image: {{ include "thanosimage" $root }}
              name: store
            securityContext:
              fsGroup: 0
              runAsGroup: 0
              runAsUser: 0
  {{- end }}
{{- end }}
{{- end }}
