{{- if eq .Values.kind "deployment" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    type: rabbitmq
    component: {{ .Release.Name }}
    system: openstack
    {{- include "sharedservices.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicas }}
  revisionHistoryLimit: {{ .Values.upgrades.revisionHistory }}
  strategy:
    type: {{ .Values.upgrades.podReplacementStrategy }}
    {{ if eq .Values.upgrades.podReplacementStrategy "RollingUpdate" }}
    rollingUpdate:
      maxUnavailable: {{ .Values.upgrades.rollingUpdate.maxUnavailable }}
      maxSurge: {{ .Values.upgrades.rollingUpdate.maxSurge }}
    {{ end }}
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
      {{- include "sharedservices.labels" . | indent 8 }}  
      annotations:
        kubectl.kubernetes.io/default-container: rabbitmq
        checksum/container.init: {{ include (print $.Template.BasePath "/bin-secret.yaml") . | sha256sum }}
{{- if and (and $.Values.global.linkerd_enabled $.Values.global.linkerd_requested) $.Values.linkerd.enabled }}
        linkerd.io/inject: enabled
{{- end }}
{{- if .Values.customConfig }}
        checksum/custom.conf: {{ include (print .Template.BasePath "/etc/_rabbitmq-custom-config.tpl") . | sha256sum }}
{{- end }}
    spec:
      affinity:
        nodeAffinity:
{{- if .Values.nodeAffinity }}
      {{- with .Values.nodeAffinity }}
{{ toYaml . | indent 10 }}
      {{- end }}
{{- include "rabbitmq_maintenance_affinity" . }}
{{- include "rabbitmq_node_reinstall_affinity" . }}
{{- else }}
          preferredDuringSchedulingIgnoredDuringExecution:
{{- include "rabbitmq_maintenance_affinity" . }}
{{- include "rabbitmq_node_reinstall_affinity" . }}
{{- end }}
      hostname: {{ template "fullname" . }}
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        fsGroupChangePolicy: "OnRootMismatch"
      {{- if .Values.persistence.enabled }}
      initContainers:
      - name: volume-permissions
        image: "{{include "dockerHubMirror" .}}/library/busybox"
        imagePullPolicy: {{ default "IfNotPresent" .Values.imagePullPolicy | quote }}
        command:
        - /bin/sh
        - -c
        - |
          [ $(stat -c %u /var/lib/rabbitmq) -eq 999 ] || chown -R 999:999 /var/lib/rabbitmq
        securityContext:
          runAsUser: 0
        volumeMounts:
          - mountPath: /var/lib/rabbitmq
            name: rabbitmq-persistent-storage
      {{- end }}
      containers:
      - name: rabbitmq
        image: "{{include "dockerHubMirror" .}}/{{ .Values.image }}:{{.Values.imageTag }}"
        imagePullPolicy: {{ default "IfNotPresent" .Values.imagePullPolicy | quote }}
        env:
          - name: RABBIT_START_TIMEOUT
            value: {{ .Values.livenessProbe.initialDelaySeconds | quote }}
        command:
          - bash
        args:
          - /container.init/rabbitmq-start
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          exec:
            command:
            - rabbitmqctl
            - status
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          tcpSocket:
            port: public
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
        {{- end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        ports:
          - name: public
            containerPort: {{ default "5672" .Values.ports.public }}
          - name: management
            containerPort: {{ default "15672" .Values.ports.management }}
{{- if and (not .Values.metrics.sidecar.enabled) .Values.metrics.enabled }}
          - name: metrics
            containerPort: {{ default "15692" .Values.metrics.port }}
{{- end }}
        volumeMounts:
          - mountPath: /var/lib/rabbitmq
            name: rabbitmq-persistent-storage
          - mountPath: /container.init
            name: container-init
        {{- if .Values.customConfig }}
          - mountPath: /etc/rabbitmq/conf.d/20-custom.conf
            name: rabbitmq-custom-config
            subPath: 20-custom.conf
        {{- end }}
{{- if and .Values.metrics.sidecar.enabled .Values.metrics.enabled }}
      - name: metrics
        image: {{include "dockerHubMirror" .}}/{{ .Values.metrics.image }}:{{ .Values.metrics.imageTag }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.metrics.imagePullPolicy | quote }}
        env:
          - name: PUBLISH_PORT
            value: {{ default "9150" .Values.metrics.port | quote }}
          - name: RABBIT_USER
            value: {{ .Values.metrics.user | quote }}
          - name: RABBIT_PASSWORD
            value: {{ required ".Values.metrics.password missing" .Values.metrics.password | quote }}
          - name: RABBIT_URL
            value: "http://127.0.0.1:{{.Values.ports.management}}"
        resources:
{{ toYaml .Values.metrics.resources | indent 10 }}
        ports:
          - name: metrics
            containerPort: {{ default "9150" .Values.metrics.port }}
{{- end }}
      priorityClassName: {{ default "openstack-service-critical" .Values.priority_class | quote }}
      volumes:
        - name: rabbitmq-persistent-storage
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "fullname" .) }}
          {{- if gt (int .Values.replicas) 1 }}
            {{- fail "Persistence doesn't work with kind Deployment, and more than one replica" }}
          {{- end}}
        {{- else }}
          emptyDir: {}
        {{- end }}
        - name: container-init
          secret:
            secretName: {{ template "fullname" . }}-bin
      {{- if .Values.customConfig }}
        - name: rabbitmq-custom-config
          configMap:
            name: {{ template "fullname" . }}-custom-conf
      {{- end }}
{{- end }}
