{{- if gt .Values.replicas 1.0 }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    type: rabbitmq
    component: {{ .Release.Name }}
    system: openstack
spec:
  replicas: {{ .Values.replicas }}
  revisionHistoryLimit: {{ .Values.upgrades.revisionHistory }}
  updateStrategy:
    type: RollingUpdate
  serviceName: {{ template "fullname" . }}
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        release: {{ .Release.Name }}
      annotations:
        checksum/etc.config: {{ include (print $.Template.BasePath "/etc-configmap.yaml") . | sha256sum }}
        dashboard/url: http://{{ template "rabbitmq.release_host" . }}:{{ .Values.ports.management }}
    spec:
      securityContext:
        fsGroup: 999
      affinity:
        nodeAffinity:
{{- if .Values.nodeAffinity }}
      {{- with .Values.nodeAffinity }}
{{ toYaml . | indent 10 }}
      {{- end }}
{{- include "rabbitmq_maintenance_affinity" . }}
{{- include "rabbitmq_node_reinstall_affinity" . }}
{{- else }}
          preferredDuringSchedulingIgnoredDuringExecution:
{{- include "rabbitmq_maintenance_affinity" . }}
{{- include "rabbitmq_node_reinstall_affinity" . }}
{{- end }}
      containers:
      - name: rabbitmq
        image: "{{include "dockerHubMirror" .}}/{{ .Values.image }}:{{ .Values.clusterImageTag }}"
        imagePullPolicy: {{ default "IfNotPresent" .Values.imagePullPolicy | quote }}
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /
            port: management
          initialDelaySeconds: 180
          timeoutSeconds: 10
          periodSeconds: 60
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          exec:
            command: ["rabbitmq-diagnostics", "check_running"]
          initialDelaySeconds: 5
          timeoutSeconds: 3
        {{- end }}
        lifecycle:
          preStop:
            exec:
              command: ["sh", "-c 'sleep 5; while true; do rabbitmq-queues check_if_node_is_mirror_sync_critical --quiet; if [ $(echo $?) -eq 69 ]; then sleep 2; continue; fi; break; done'"]
        env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: RABBITMQ_NODENAME
            value: rabbit@$(MY_POD_NAME).{{ template "rabbitmq.release_host" . }}
          - name: RABBITMQ_USE_LONGNAME
            value: "true"
          - name: K8S_SERVICE_NAME
            value: {{ template "fullname" . }}
          - name: RABBITMQ_ERLANG_COOKIE
            value: {{ required ".Values.cluster.erlangCookie missing" .Values.cluster.erlangCookie }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        ports:
{{- range $_name, $_port := merge .Values.ports }}
          - name: {{ $_name }}
            protocol: TCP
            containerPort: {{ $_port }}
{{- end }}
        volumeMounts:
          - name: rabbitmq-persistent-storage
            mountPath: /var/lib/rabbitmq
          - name: config-volume
            mountPath: /etc/rabbitmq/rabbitmq.conf
            subPath: rabbitmq.conf
          - name: config-volume
            mountPath: /etc/rabbitmq/enabled_plugins
            subPath: enabled_plugins
          - name: config-volume
            mountPath: /etc/rabbitmq/definitions.json
            subPath: definitions.json
  {{- if .Values.metrics.enabled }}
      - name: metrics
        image: {{include "dockerHubMirror" .}}/{{ .Values.metrics.image }}:{{ .Values.metrics.imageTag }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.metrics.imagePullPolicy | quote }}
        env:
          - name: PUBLISH_PORT
            value: {{ default "9150" .Values.metrics.port | quote }}
          - name: RABBIT_USER
            value: {{ .Values.metrics.user | quote }}
          - name: RABBIT_PASSWORD
            value: {{ required ".Values.metrics.password missing" .Values.metrics.password | quote }}
          - name: RABBIT_URL
            value: "http://127.0.0.1:{{.Values.ports.management}}"
        resources:
{{ toYaml .Values.metrics.resources | indent 10 }}
        ports:
          - name: metrics
            containerPort: {{ default "9150" .Values.metrics.port }}
{{- end }}
      priorityClassName: {{ default "openstack-service-critical" .Values.priority_class | quote }}
      volumes:
      {{- if not .Values.persistence.enabled }}
        - name: rabbitmq-persistent-storage
          emptyDir: {}
      {{- end }}
        - name: config-volume
          projected:
            sources:
            - configMap:
                name: {{ template "fullname" . }}-config
                items:
                  - key: rabbitmq.conf
                    path: rabbitmq.conf
                  - key: enabled_plugins
                    path: enabled_plugins
                  - key: definitions.json
                    path: definitions.json
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: rabbitmq-persistent-storage
      labels:
        app: {{ template "fullname" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
        component: rabbitmq
    spec:
      accessModes:
      - {{ .Values.persistence.accessMode | quote }}
      {{- if .Values.persistence.storageClass }}
      storageClassName: {{ .Values.persistence.storageClass | quote }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.size | quote }}
  {{- end }}
{{- end }}
