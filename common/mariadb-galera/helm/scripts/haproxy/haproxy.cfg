{{- $usernameEnvVar := "" }}
{{- $passwordEnvVar := "" }}
{{- $userRequired := false }}

{{- range $userKey, $userValue := $.Values.proxy.haproxy.users }}
  {{- if $userValue.enabled }}
    {{- $usernameEnvVar = "" }}
    {{- $passwordEnvVar = "" }}
    {{- $userRequired = false }}
    {{- range $envKey, $envValue := $.Values.env }}
      {{- if (has "haproxy" $envValue.containerType) }}
        {{- if eq $userValue.secretName $envValue.secretName }}
          {{- $userRequired = true }}
          {{- if hasSuffix "_USERNAME" $envKey }}
            {{- $usernameEnvVar = $envKey }}
          {{- end }}
          {{- if hasSuffix "_PASSWORD" $envKey }}
            {{- $passwordEnvVar = $envKey }}
          {{- end }}
        {{- end }}
      {{- end }}
    {{- end }}
    {{- if $userRequired }}
      {{- if (not $usernameEnvVar) }}
        {{- fail (printf "'_USERNAME' environment variable for the '%s' user is not defined, but required for the HAProxy configuration" $userKey) }}
      {{- end }}
      {{- if (not $passwordEnvVar) }}
        {{- fail (printf "'_PASSWORD' environment variable for the '%s' user password is not defined, but required for the HAProxy configuration" $userKey) }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
global
  log stdout format rfc5424 local0 info

defaults
  log global
  retries {{ ($.Values.proxy.haproxy.retries | int) | default 2 }}
  timeout connect {{ $.Values.proxy.haproxy.timeout.connect | default "3s" }}
  timeout server {{ $.Values.proxy.haproxy.timeout.server | default "5s" }}
  timeout client {{ $.Values.proxy.haproxy.timeout.client | default "5s" }}

userlist stats-auth
  group readonly users "${HAPROXY_STATS_USERNAME}"
  user  "${HAPROXY_STATS_USERNAME}" insecure-password "${HAPROXY_STATS_PASSWORD}"

# frontend prometheus-exporter
#   mode http
#   {{ if $.Values.monitoring.proxy.enabled }}stats enable{{end}}
#   stats hide-version
#   stats refresh 10s
#   bind :{{ ($.Values.monitoring.proxy.haproxy.metricsPort | int) | default 8404 }}
#   http-request use-service prometheus-exporter if { path /metrics }
#   no log

frontend stats
  mode http
  stats enable
  stats hide-version
  {{ if $.Values.monitoring.proxy.enabled }}http-request use-service prometheus-exporter if { path /metrics }{{end}}
  stats uri /stats
  #stats realm HAProxy\ statistics
  stats refresh 10s
  bind :{{ (required "services.proxy.haproxy.backend.ports.stats.port missing" $.Values.services.proxy.haproxy.backend.ports.stats.port) }}
  acl AUTH http_auth(stats-auth)
  stats http-request auth unless AUTH

frontend mysql
  mode tcp
  bind :{{ $.Values.services.proxy.haproxy.frontend.ports.proxy.port }}
  default_backend mariadb-galera

backend mariadb-galera
  mode tcp
  option tcpka
  balance {{ $.Values.proxy.haproxy.backend.balance | default "source" }}
  option mysql-check user haproxy
  {{- /* MariaDB Galera backend services */}}
  {{- range $replicaNumber, $err := until ((include "replicaCount" (dict "global" $ "type" "database")) | int) }}
    {{- $nodeName := (include "nodeNamePrefix" (dict "global" $ "component" "database")) }}
    {{- $replicaString := ($replicaNumber| toString) }}
    {{- $mysqlPort := ((required ".services.database.frontend.ports.mysql.targetPort missing" $.Values.services.database.frontend.ports.mysql.targetPort) | toString) }}
  {{ printf "server %s-%s %s-%s.{{ $.Release.Namespace }}:%s check weight 1" $nodeName $replicaString $nodeName $replicaString $mysqlPort }}
  {{- end }}
