kind: Deployment
apiVersion: apps/v1

metadata:
  name: ironic-inspector
  labels:
    system: openstack
    type: backend
    component: ironic
spec:
  replicas: {{ .Values.pod.replicas.inspector }}
  revisionHistoryLimit: {{ .Values.pod.lifecycle.upgrades.deployments.revisionHistory }}
  strategy:
    type: {{ .Values.pod.lifecycle.upgrades.deployments.podReplacementStrategy }}
    {{ if eq .Values.pod.lifecycle.upgrades.deployments.podReplacementStrategy "RollingUpdate" }}
    rollingUpdate:
      maxUnavailable: {{ .Values.pod.lifecycle.upgrades.deployments.rollingupdate.maxUnavailable }}
      maxSurge: {{ .Values.pod.lifecycle.upgrades.deployments.rollingupdate.maxSurge }}
    {{ end }}
  selector:
    matchLabels:
      name: ironic-inspector
  template:
    metadata:
      labels:
        name: ironic-inspector
{{ tuple . "ironic" "api" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 8 }}
      annotations:
        configmap-etc-hash: {{ include (print $.Template.BasePath "/etc-configmap.yaml") . | sha256sum }}
        configmap-inspector-etc-hash: {{ include (print $.Template.BasePath "/inspector-etc-configmap.yaml") . | sha256sum }}
        secrets-hash: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- if or .Values.inspector.rpc_statsd_enabled .Values.proxysql.mode }}
        prometheus.io/scrape: "true"
        prometheus.io/targets: {{ required ".Values.alerts.prometheus missing" .Values.alerts.prometheus | quote }}
        {{- end }}
        {{- include "utils.linkerd.pod_and_service_annotation" . | indent 8 }}
    spec:
{{ tuple . "ironic" "inspector" | include "kubernetes_pod_anti_affinity" | indent 6 }}
      {{- include "utils.proxysql.pod_settings" . | indent 6 }}
      initContainers:
      {{- tuple . (dict "service" "ironic-api,ironic-rabbitmq") | include "utils.snippets.kubernetes_entrypoint_init_container" | indent 6 }}
      containers:
      - name: ironic-inspector
        {{- if .Values.oslo_metrics.enabled }}
        image: {{ .Values.global.registry }}/test-ironic:oslo-metrics01
        {{- else}}
        image: {{ .Values.global.registry }}/loci-ironic:{{ .Values.imageVersion }}
        {{- end }}
        imagePullPolicy: IfNotPresent
        command:
        - dumb-init
        - ironic-inspector
        securityContext:
          capabilities:
            add:
              - NET_ADMIN
        env:
        {{- if .Values.logging.handlers.sentry }}
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: sentry
              key: {{ .Chart.Name }}.DSN.python
        {{- end }}
        lifecycle:
          preStop:
            {{- include "utils.snippets.pre_stop_graceful_shutdown" . | indent 12 }}
        resources:
{{ toYaml .Values.pod.resources.inspector | indent 10 }}
        volumeMounts:
        - mountPath: /etc/ironic-inspector
          name: etcironic
        - mountPath: /etc/ironic-inspector/ironic-inspector.conf.d
          name: ironic-inspector-etc-confd
        - mountPath: /etc/ironic-inspector/ironic-inspector.conf
          name: ironic-inspector-etc
          subPath: ironic-inspector.conf
          readOnly: true
        - mountPath: /etc/ironic-inspector/rootwrap.conf
          name: ironic-etc
          subPath: rootwrap.conf
          readOnly: true
        - mountPath: /etc/sudoers.d/ironic-inspector-rootwrap
          name: ironic-inspector-rootwrap
          subPath: ironic-inspector-rootwrap
          readOnly: true
        - mountPath: /etc/ironic-inspector/logging.ini
          name: ironic-etc
          subPath: logging.ini
          readOnly: true
        - mountPath: /etc/ironic-inspector/policy.json
          name: ironic-etc
          subPath: policy.json
          readOnly: true
        - mountPath: /etc/ironic-inspector/rootwrap.d/ironic-inspector.filters
          name: ironic-etc
          subPath: ironic-inspector.filters
          readOnly: true
        {{- include "utils.proxysql.volume_mount" . | indent 8 }}
        {{- include "utils.trust_bundle.volume_mount" . | indent 8 }}
      {{- tuple . .Values.api.api_workers | include "utils.proxysql.container" | indent 6 }}
      {{- if and .Values.global.ironic_tftp_ip .Values.inspector.dhcp.range .Values.inspector.dhcp.options.router }}
      - name: dhcp
        image: {{ .Values.global.registry }}/ubuntu-source-staticdhcpd:{{.Values.imageVersionStaticdhcpd | default .Values.imageVersion | required "Please set ironic.imageVersion or similar"}}
        imagePullPolicy: IfNotPresent
        resources:
{{ toYaml .Values.pod.resources.dhcp | indent 10 }}
        command:
        - dumb-init
        - staticDHCPd
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - name: dhcp
          protocol: UDP
          containerPort: {{.Values.inspector.dhcp.port}}
        - name: dhcp-proxy
          protocol: UDP
          containerPort: {{.Values.inspector.dhcp.proxy_port}}
        volumeMounts:
        - mountPath: /conf
          name: dhcp-config
      {{- end }}
      {{- if .Values.inspector.rpc_statsd_enabled }}
      - name: oslo-exporter
        image: {{ .Values.global.dockerHubMirror }}/prom/statsd-exporter
        args:
        - --statsd.mapping-config=/etc/statsd/statsd-rpc-exporter.yaml
        ports:
        - name: metrics
          containerPort: 9102
          protocol: TCP
        - name: statsd-udp
          containerPort: {{ .Values.inspector.rpc_statsd_port }}
          protocol: UDP
        volumeMounts:
        - name: ironic-etc
          mountPath: /etc/statsd/statsd-rpc-exporter.yaml
          subPath: statsd-rpc-exporter.yaml
          readOnly: true
      {{- end }}
      volumes:
      - name: etcironic
        emptyDir: {}
      - name: ironic-etc
        configMap:
          name: ironic-etc
          defaultMode: 0444
      - name: ironic-inspector-etc-confd
        secret:
          secretName: {{ .Release.Name }}-secrets
          items:
          - key: inspector_secrets.conf
            path: inspector_secrets.conf
      - name: ironic-inspector-etc
        configMap:
          name: ironic-inspector-etc
          defaultMode: 0444
      - name: ironic-inspector-rootwrap
        configMap:
          name: ironic-inspector-rootwrap
          defaultMode: 0444
      {{- if and .Values.global.ironic_tftp_ip .Values.inspector.dhcp.range .Values.inspector.dhcp.options.router }}
      - name: dhcp-config
        configMap:
          name: ironic-inspector-dhcp
          defaultMode: 0444
      {{- end }}
      {{- include "utils.proxysql.volumes" . | indent 6 }}
      {{- include "utils.trust_bundle.volumes" . | indent 6 }}
