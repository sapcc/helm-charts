kind: Deployment
apiVersion: apps/v1

metadata:
  name: ironic-api
  labels:
    system: openstack
    type: api
    component: ironic
spec:
  replicas: {{ .Values.pod.replicas.api }}
  revisionHistoryLimit: {{ .Values.pod.lifecycle.upgrades.deployments.revisionHistory }}
  strategy:
    type: {{ .Values.pod.lifecycle.upgrades.deployments.podReplacementStrategy }}
    {{ if eq .Values.pod.lifecycle.upgrades.deployments.podReplacementStrategy "RollingUpdate" }}
    rollingUpdate:
      maxUnavailable: {{ .Values.pod.lifecycle.upgrades.deployments.rollingupdate.maxUnavailable }}
      maxSurge: {{ .Values.pod.lifecycle.upgrades.deployments.rollingupdate.maxSurge }}
    {{ end }}
  selector:
    matchLabels:
      name: ironic-api
  template:
    metadata:
      labels:
        name: ironic-api
{{ tuple . "ironic" "api" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 8 }}
      annotations:
        kubectl.kubernetes.io/default-container: ironic-api
        configmap-etc-hash: {{ include (print $.Template.BasePath "/etc-configmap.yaml") . | sha256sum }}
        secrets-hash: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- if or .Values.watcher.enabled .Values.proxysql.mode }}
        prometheus.io/scrape: "true"
        prometheus.io/targets: {{ required ".Values.alerts.prometheus missing" .Values.alerts.prometheus | quote }}
        {{- end }}
        {{- include "utils.linkerd.pod_and_service_annotation" . | indent 8 }}
    spec:
{{ tuple . "ironic" "api" | include "kubernetes_pod_anti_affinity" | indent 6 }}
      {{- include "utils.proxysql.pod_settings" . | indent 6 }}
      initContainers:
      {{- tuple . (dict "service" "ironic-mariadb,ironic-rabbitmq") | include "utils.snippets.kubernetes_entrypoint_init_container" | indent 6 }}
      containers:
      - name: ironic-api
        image: {{ .Values.global.registry }}/loci-ironic:{{ .Values.imageVersion }}
        imagePullPolicy: IfNotPresent
        resources:
{{ toYaml .Values.pod.resources.api | indent 10 }}
        command:
        - dumb-init
        - ironic-api
        env:
        - name: PYTHONWARNINGS
          value: 'ignore:Unverified HTTPS request'
        {{- if .Values.logging.handlers.sentry }}
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: sentry
              key: {{ .Chart.Name }}.DSN.python
        {{- end }}
        lifecycle:
          preStop:
            {{- include "utils.snippets.pre_stop_graceful_shutdown" . | indent 12 }}
        livenessProbe:
          httpGet:
            path: /
            port: {{.Values.global.ironicApiPortInternal}}
          initialDelaySeconds: 15
          timeoutSeconds: 5
        ports:
        - name: ironic-api{{- tuple .Values.api.override | include "utils.snippets.debug.debuggable_port" }}
          containerPort: {{.Values.global.ironicApiPortInternal}}
        volumeMounts:
        - mountPath: /etc/ironic
          name: etcironic
        - mountPath: /etc/ironic/ironic.conf
          name: ironic-etc
          subPath: ironic.conf
          readOnly: true
        - mountPath: /etc/ironic/ironic.conf.d
          name: ironic-etc-confd
        - mountPath: /etc/ironic/policy.json
          name: ironic-etc
          subPath: policy.json
          readOnly: true
        - mountPath: /etc/ironic/rootwrap.conf
          name: ironic-etc
          subPath: rootwrap.conf
          readOnly: true
        - mountPath: /etc/ironic/logging.ini
          name: ironic-etc
          subPath: logging.ini
          readOnly: true
        {{ if .Values.audit.enabled }}
        - name: ironic-etc
          mountPath: /etc/ironic/api_audit_map.yaml
          subPath: api_audit_map.yaml
          readOnly: true
        {{- end }}
        {{- if .Values.watcher.enabled }}
        - name: ironic-etc
          mountPath: /etc/ironic/watcher.yaml
          subPath: watcher.yaml
          readOnly: true
        {{- end }}
        {{- include "utils.proxysql.volume_mount" . | indent 8 }}
        {{- include "utils.trust_bundle.volume_mount" . | indent 8 }}
      {{- tuple . .Values.api.api_workers | include "utils.proxysql.container" | indent 6 }}
      - name: statsd
        image:  "{{.Values.global.dockerHubMirror}}/{{.Values.statsd.image.repository}}:{{.Values.statsd.image.tag}}"
        imagePullPolicy: IfNotPresent
        args: [ --statsd.mapping-config=/etc/statsd/statsd-exporter.yaml ]
        resources:
{{ toYaml .Values.pod.resources.statsd | indent 10 }}
        ports:
          - name: statsd
            containerPort: 9125
            protocol: UDP
          - name: metrics
            containerPort: {{ .Values.statsd.port }}
        volumeMounts:
          - name: ironic-etc
            mountPath: /etc/statsd/statsd-exporter.yaml
            subPath: statsd-exporter.yaml
            readOnly: true
{{- tuple . .Values.api.override "ironic-api" | include "utils.snippets.debug.debug_port_container" | indent 6 }}
{{- include "jaeger_agent_sidecar" . | indent 6 }}
      volumes:
      - name: etcironic
        emptyDir: {}
      - name: ironic-etc
        configMap:
          name: ironic-etc
          defaultMode: 0444
      - name: ironic-etc-confd
        secret:
          secretName: {{ .Release.Name }}-secrets
          items:
          - key: secrets.conf
            path: secrets.conf
      {{- include "utils.proxysql.volumes" . | indent 6 }}
      {{- include "utils.trust_bundle.volumes" . | indent 6 }}
      {{- tuple . .Values.api.override "ironic-api" .Values.global.ironicApiPortInternal | include "utils.snippets.debug.debug_port_volumes_and_configmap" }}
