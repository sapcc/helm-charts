# Default values for ironic.
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value
#
global:
  ironicApiPortInternal: '6385'
  #ironic_tftp_ip: null
  ironictftpPortPublic: '69'
  ironic_pxe_port_public: '69'
  osprofiler: {}
  dbUser: ironic
  pgbouncer:
    enabled: true
  fernetRouter:
    image: "monsoon/fernet-router:latest"

imageVersion: rocky-20200214123740
imageVersionStaticdhcpd: rocky-20201012110713

tempest:
  enabled: false

osprofiler:
  enabled: false

statsd:
  port: 9102
  image:
    repository:  prom/statsd-exporter
    tag: v0.8.1

oslo_metrics:
  enabled: false

pod:
  replicas:
    api: 2
    inspector: 1
    pxe: 1
  resources:
    api:
      limits:
        memory: 4Gi
        cpu: "2"
      requests:
        memory: 3Gi
        cpu: 1500m
    inspector:
      limits:
        memory: 512Mi
        cpu: 500m
      requests:
        memory: 256Mi
        cpu: 100m
    conductor:
      limits:
        memory: 1.5Gi
        cpu: 1500m
      requests:
        memory: 1Gi
        cpu: 1000m
    pxe:
      limits:
        memory: 256Mi
        cpu: 50m
      requests:
        memory: 64Mi
        cpu: 10m
    statsd:
      limits:
        memory: 128Mi
        cpu: 50m
      requests:
        memory: 64Mi
        cpu: 10m
    console:
      limits:
        memory: 64Mi
        cpu: 50m
      requests:
        memory: 24Mi
        cpu: 10m
    dhcp:
      limits:
        memory: 64Mi
        cpu: 50m
      requests:
        memory: 24Mi
        cpu: 10m


  lifecycle:
    upgrades:
      deployments:
        revisionHistory: 5
        podReplacementStrategy: RollingUpdate
        rollingupdate:
          maxUnavailable: 0
          maxSurge: 1

#imageVersion: null
#imageVersionIronicApi: null
#imageVersionIronicConductor: null
#imageVersionIronicInspector: null
#imageVersionIronicPxe: null
swift_multi_tenant: true

debug: "True"
dbName: ironic
#dbPassword: null

inspectordbName: ironic_inspector
inspectordbUser: ironic_inspector

api:
  override: {}
  api_workers: 0

inspector:
  standalone: true
  port_internal: '5050'
  dhcp:
    port: '67'
    proxy_port: '4011'
    ip: null
    range: null
    options:
      router: null

conductor:
  hosts: []
  deploy:
    protocol: 'http'
    port: 8088
  defaults:
    deploy:
      default_boot_option: 'local'
    conductor: {}
    dhcp: {}
    pxe:
      ipxe_enabled: true
      ipxe_use_swift: true
      pxe_bootfile_name: "undionly.kpxe"
      uefi_pxe_bootfile_name: "ipxe.efi"

agent:
  deploy_logs:
    collect: "on_failure"
    storage_backend: "local"
    swift_days_to_expire: 30

console:
  ssh_loglevel: error
  #secret: null

tftp_ip: null
tftp_files:
  undionly.kpxe: https://repo.eu-de-1.cloud.sap/ironic-tftp/undionly.kpxe
  ipxe.efi: https://repo.eu-de-1.cloud.sap/ironic-tftp/ipxe.efi

portmetrics: '9102'

#network_management_uuid: DEFINE_IN_REGION_CHART
#network_cleaning_uuid: DEFINE_IN_REGION_CHART
neutron_url_timeout: 210
neutron_port_setup_delay: 0

#swift_account: null
#swift_tempurl: null

mysql_metrics:
  enabled: true
  db_name: ironic
  db_user: ironic
  customMetrics:
    - name: openstack_ironic_nodes_list_gauge
      help: Ironic Node list
      labels:
      - "uuid"
      - "name"
      - "instance_uuid"
      - "power_state"
      - "provision_state"
      - "last_error"
      query: |
        SELECT
          uuid,
          name,
          COALESCE(instance_uuid, "") AS instance_uuid,
          power_state,
          provision_state,
          COALESCE(last_error, "no error") AS last_error,
          COUNT(*) AS gauge
        FROM nodes
        GROUP BY uuid, name, instance_uuid, power_state, provision_state, last_error;
      values:
      - "gauge"
    - name: openstack_ironic_nodes_updated_in_24hrs_gauge
      help: Ironic updated nodes
      labels:
      - "uuid"
      - "name"
      - "provision_state"
      query: |
        SELECT 
          uuid, 
          name, 
          provision_state,
          COUNT(*) AS in_24hrs_gauge
        FROM nodes 
        WHERE updated_at >= NOW() - INTERVAL 1 DAY 
        GROUP BY uuid, provision_state, name;
      values:
      - "in_24hrs_gauge"
    - name: openstack_ironic_nodes_nodenotinmaint
      help: Ironic nodes not in maintenance
      labels:
      - "maintenance_reason"
      - "uuid"
      - "name"
      values:
      - "node_not_in_maint"
      query: |
        SELECT 
          COUNT(case when maintenance = 0 then 1 end) AS node_not_in_maint, 
          uuid, 
          name, 
          COALESCE(maintenance_reason,'reason unknown') AS maintenance_reason
        FROM nodes
        GROUP BY
          maintenance_reason,
          uuid,
          name;
    - name: openstack_ironic_nodes_nodeinmaint
      help: Ironic nodes in maintenance
      labels:
      - "maintenance_reason"
      - "uuid"
      - "name"
      values:
      - "node_in_maint"
      query: |
        SELECT 
          COUNT(case when maintenance = 1 then 1 end) AS node_in_maint, 
          uuid, 
          name, 
          COALESCE(maintenance_reason,'reason unknown') AS maintenance_reason
        FROM nodes
        GROUP BY
          maintenance_reason,
          uuid,
          name;
    - name: openstack_ironic_nodes_conductor_group
      help: Ironic updated nodes
      labels:
      - "uuid"
      - "name"
      - "conductor_group"
      query: |
        SELECT 
          uuid, 
          name, 
          conductor_group,
          COUNT(conductor_group) AS groups
        FROM nodes
        GROUP BY 
          name, 
          uuid, 
          conductor_group;
      values:
      - "groups"

mariadb:
  enabled: false
  alerts:
    service: ironic
  backup_v2:
    enabled: false
    backup_dir: ./backup
    databases:
      - ironic
      - ironic_inspector
    verify_tables:
      - ironic.nodes
      - ironic_inspector.nodes
  backup:
    enabled: false
    metrics: false
    image_version: v0.5.15
    os_password: "AHardPa55w0rd!"
  root_password: "AHardPa55w0rd!"
  buffer_pool_size: "8192M"
  log_file_size: "2048M"
  name: ironic
  initdb_configmap: ironic-mariadb-init
  persistence_claim:
    name: db-ironic-pvclaim

sentry:
  enabled: true

rabbitmq:
  persistence:
    enabled: false

logging:
  formatters:
    context:
      class: oslo_log.formatters.ContextFormatter
  handlers:
    stdout:
      class: StreamHandler
      args: "(sys.stdout,)"
      formatter: context
    sentry:
      class: raven.handlers.logging.SentryHandler
      level: ERROR
      args: "()"
  loggers:
    root:
      handlers: stdout, sentry
      level: WARNING
    ironic:
      handlers: stdout, sentry
      level: DEBUG
    eventlet.wsgi.server:
      handlers: stdout, sentry
      level: INFO
    auditmiddleware:
      handlers: stdout, sentry
      level: INFO

watcher:
  enabled: false

audit:
  enabled: false

# Deploy Ironic Prometheus alerts.
alerts:
  enabled: true
  # Name of the Prometheus to which the alerts should be assigned to.
  prometheus: openstack
