# Default values for manila.
owner-info:
  support-group: compute-storage-api
  service: manila
  maintainers:
    - Maurice Escher
    - Chuan Miao
    - Dmitry Galkin
  helm-chart-url: https://github.com/sapcc/helm-charts/tree/master/openstack/manila

global:
  dbUser: manila
  master_password: null
  metrics_port: 9102
  domain_seeds:
    skip_hcm_domain: false
  linkerd_requested: true

loci:
  imageNamespace: monsoon

api_port_internal: '8786'
api_backdoor: false
debug: "True"
rpc_ping_enabled: true

# manager config options
server_migration_driver_continue_update_interval: 300

# better debugging experience; enable it only in QA
pyreloader_enabled: false

coordinationBackend: 'file'
wsgi_processes: 8

logging:
  formatters:
    context:
      class: oslo_log.formatters.ContextFormatter
    default:
      format: "%(message)s"
  handlers:
    stdout:
      class: StreamHandler
      args: "(sys.stdout,)"
      formatter: context
    "null":
      class: logging.NullHandler
      formatter: default
      args: "()"
    sentry:
      class: "raven.handlers.logging.SentryHandler"
      level: ERROR
      transport: ThreadedRequestsHTTPTransport
      args: "()"
  loggers:
    root:
      handlers: stdout, sentry
      level: WARNING
    manila:
      handlers: stdout, sentry
      level: DEBUG
    manila.api.openstack.wsgi:
      handlers: stdout, sentry
      level: INFO
    manila.share.drivers.netapp.utils:
      handlers: stdout, sentry
      level: WARNING
    amqp:
      handlers: stdout, sentry
      level: WARNING
    amqplib:
      handlers: stdout, sentry
      level: WARNING
    sqlalchemy:
      handlers: stdout, sentry
      level: WARNING
    boto:
      handlers: stdout, sentry
      level: WARNING
    suds:
      handlers: stdout, sentry
      level: INFO
    eventlet.wsgi.server:
      handlers: stdout, sentry
      level: INFO
    auditmiddleware:
      handlers: stdout, sentry
      level: INFO
    rate_limit.rate_limit:
      handlers: stdout, sentry
      level: DEBUG

memcached:
  alerts:
    support_group: compute-storage-api
  enabled: true
  metrics:
    enabled: true

proxysql:
  mode: ""

mysql_metrics:
  db_name: manila
  db_user: manila
  resources:
    limits:
      memory: 512Mi
  customMetrics: # metrics starting "openstack_" and having a project_id label will go to Maia !
    - help: Manila Share servers count
      labels:
        - "manila_host"
        - "share_network_subnet_id"
        - "status"
      name: manila_share_servers_count_gauge
      query: |
        SELECT
          host AS manila_host,
          share_network_subnet_id,
          status,
          COUNT(*) AS count_gauge
        FROM share_servers
        GROUP BY manila_host, share_network_subnet_id, status;
      values:
        - "count_gauge"
    - help: Manila Shares count
      labels:
        - "share_type_id"
        - "availability_zone_name"
        - "manila_host"
        - "project_id"
        - "id"
        - "share_instance_id"
        - "status"
      name: openstack_manila_shares_count_gauge
      query: |
        SELECT
          coalesce(share_instances.share_type_id, 'N/A') AS share_type_id,
          coalesce(availability_zones.name, 'N/A') AS availability_zone_name,
          share_instances.host AS manila_host,
          shares.project_id,
          shares.id,
          share_instances.id AS share_instance_id,
          share_instances.status,
          COUNT(*) AS count_gauge
        FROM shares
        JOIN share_instances ON shares.id=share_instances.share_id
        LEFT OUTER JOIN availability_zones ON share_instances.availability_zone_id=availability_zones.id
        WHERE share_instances.deleted = 'False'
        AND share_instances.replica_state='active'
        GROUP BY
          share_instances.share_type_id,
          manila_host,
          share_instances.status,
          shares.id,
          shares.project_id,
          availability_zones.id;
      values:
        - "count_gauge"
    - help: Manila Shares size
      labels:
        - "share_type_id"
        - "availability_zone_name"
        - "manila_host"
        - "project_id"
        - "id"
        - "share_instance_id"
        - "status"
        - "snapmirror"
      name: openstack_manila_shares_size_gauge
      query: |
        SELECT
          coalesce(share_instances.share_type_id, 'N/A') AS share_type_id,
          coalesce(availability_zones.name, 'N/A') AS availability_zone_name,
          share_instances.host AS manila_host,
          shares.project_id,
          shares.id,
          share_instances.id AS share_instance_id,
          share_instances.status,
          coalesce(share_metadata.value, 'N/A') AS snapmirror,
          SUM(size) size_gauge
        FROM shares
        JOIN share_instances ON shares.id=share_instances.share_id
        LEFT OUTER JOIN availability_zones ON share_instances.availability_zone_id=availability_zones.id
        LEFT OUTER JOIN share_metadata ON shares.id=share_metadata.share_id AND share_metadata.key='snapmirror'
        WHERE share_instances.deleted = 'False'
        AND share_instances.replica_state='active'
        GROUP BY
          share_instances.share_type_id,
          manila_host,
          share_instances.status,
          shares.id,
          shares.project_id,
          availability_zones.id;
      values:
        - "size_gauge"
    - help: Manila Snapshot count
      labels:
        - "project_id"
        - "share_id"
        - "id"
        - "status"
        - "share_type_id"
        - "availability_zone_name"
      name: openstack_manila_snapshot_count_gauge
      query: |
        SELECT
          snap.project_id as project_id,
          snap.share_id as share_id,
          snap.id as id,
          si.status as status,
          coalesce(share_instances.share_type_id, 'N/A') AS share_type_id,
          coalesce(availability_zones.name, 'N/A') AS availability_zone_name,
          COUNT(*) AS count_gauge
        FROM share_snapshots AS snap
        INNER JOIN share_snapshot_instances AS si ON snap.id=si.snapshot_id
        INNER JOIN share_instances ON si.share_instance_id=share_instances.id
        LEFT OUTER JOIN availability_zones ON share_instances.availability_zone_id=availability_zones.id
        WHERE snap.deleted = 'False'
        AND (share_instances.replica_state='active' OR share_instances.replica_state IS NULL)
        GROUP BY
          snap.id,
          snap.project_id,
          snap.share_id,
          si.status,
          availability_zones.id
        UNION SELECT
          'none' AS id,
          'none' AS project_id,
          'none' AS share_id,
          'none' AS status,
          'none' AS share_type_id,
          'none' AS availability_zone_name,
          0 AS count_gauge;
      values:
        - "count_gauge"
    - help: Manila Snapshot Size
      labels:
        - "project_id"
        - "share_id"
        - "id"
        - "status"
        - "share_type_id"
        - "availability_zone_name"
      name: openstack_manila_snapshot_size_gauge
      query: |
        SELECT
          share_snapshots.project_id,
          share_snapshots.share_id,
          share_snapshots.id,
          share_snapshot_instances.status,
          coalesce(share_instances.share_type_id, 'N/A') AS share_type_id,
          coalesce(availability_zones.name, 'N/A') AS availability_zone_name,
          SUM(share_snapshots.size) size_gauge
        FROM share_snapshots
        INNER JOIN share_snapshot_instances ON share_snapshots.id=share_snapshot_instances.snapshot_id
        INNER JOIN share_instances ON share_snapshot_instances.share_instance_id=share_instances.id
        LEFT OUTER JOIN availability_zones ON share_instances.availability_zone_id=availability_zones.id
        WHERE share_snapshots.deleted = 'False'
        AND (share_instances.replica_state='active' OR share_instances.replica_state IS NULL)
        GROUP BY
          share_snapshots.id,
          share_snapshots.project_id,
          share_snapshots.share_id,
          share_snapshot_instances.status,
          availability_zones.id;
      values:
        - "size_gauge"
    - help: Manila Replicas count
      labels:
        - "share_type_id"
        - "availability_zone_name"
        - "manila_host"
        - "project_id"
        - "id"
        - "share_id"
        - "status"
        - "replica_state"
      name: openstack_manila_replicas_count_gauge
      query: |
        SELECT
          coalesce(replicas.share_type_id, 'N/A') AS share_type_id,
          coalesce(availability_zones.name, 'N/A') AS availability_zone_name,
          replicas.host AS manila_host,
          shares.project_id,
          replicas.id,
          replicas.share_id,
          replicas.status,
          replicas.replica_state,
          COUNT(*) AS count_gauge
        FROM share_instances AS replicas
        LEFT OUTER JOIN availability_zones ON replicas.availability_zone_id=availability_zones.id
        JOIN shares ON replicas.share_id=shares.id
        WHERE replicas.deleted = 'False' AND replicas.replica_state IS NOT NULL
        GROUP BY
          replicas.share_type_id,
          replicas.availability_zone_id,
          manila_host,
          shares.project_id,
          replicas.id,
          replicas.share_id,
          replicas.status,
          replicas.replica_state;
      values:
        - "count_gauge"
    - help: Manila Replicas size
      labels:
        - "share_type_id"
        - "availability_zone_name"
        - "manila_host"
        - "project_id"
        - "id"
        - "share_id"
        - "status"
        - "replica_state"
      name: openstack_manila_replicas_size_gauge
      query: |
        SELECT
          coalesce(replicas.share_type_id, 'N/A') AS share_type_id,
          coalesce(availability_zones.name, 'N/A') AS availability_zone_name,
          replicas.host AS manila_host,
          shares.project_id,
          replicas.id,
          replicas.share_id,
          replicas.status,
          replicas.replica_state,
          SUM(shares.size) size_gauge
        FROM share_instances AS replicas
        LEFT OUTER JOIN availability_zones ON replicas.availability_zone_id=availability_zones.id
        JOIN shares ON replicas.share_id=shares.id
        WHERE replicas.deleted = 'False' AND replicas.replica_state IS NOT NULL
        GROUP BY
          replicas.share_type_id,
          replicas.availability_zone_id,
          manila_host,
          shares.project_id,
          replicas.id,
          replicas.share_id,
          replicas.status,
          replicas.replica_state;
      values:
        - "size_gauge"
    # The final UNION SELECT adds a dummy row that always exists even when no
    # stuck objects exist. This allows us to have our cake and eat it (we
    # don't insert unnecessary timeseries, but the absence alert generated by
    # the absent-metrics-operator is still useful).
    - help: Manila Shares Stuck Count
      labels:
        - "share_id"
        - "status"
        - "manila_host"
      name: manila_shares_stuck_count_gauge
      query: |
        SELECT
          share_id,
          status,
          host AS manila_host,
        COUNT(*) AS count_gauge
        FROM share_instances
        WHERE deleted='False' AND status in ('deleting','error_deleting','creating','shrinking','extending', 'shrinking_error', 'extending_error') AND (COALESCE(updated_at, created_at) < DATE_SUB(now(), INTERVAL 15 MINUTE))
        GROUP BY
          share_id,
          status,
          manila_host
        UNION SELECT 'none' AS share_id, 'none' AS status, 'none' AS manila_host, 0 AS count_gauge;
      values:
        - "count_gauge"
    - help: Manila Shares Stuck Max Duration
      labels:
        - "share_id"
        - "status"
        - "manila_host"
      name: manila_shares_stuck_max_duration_gauge
      query: |
        SELECT
          share_id,
          status,
          host AS manila_host,
          MAX(UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(COALESCE(updated_at, created_at))) AS max_duration_gauge
        FROM share_instances
        WHERE deleted='False' AND status in ('deleting','error_deleting','creating','shrinking','extending', 'shrinking_error', 'extending_error') AND (COALESCE(updated_at, created_at) < DATE_SUB(now(), INTERVAL 15 MINUTE))
        GROUP BY
          share_id,
          status,
          manila_host
        UNION SELECT 'none' AS share_id, 'none' AS status, 'none' AS manila_host, 0 AS max_duration_gauge;
      values:
        - "max_duration_gauge"
    - name: manila_share_replica_stuck_duration_seconds
      help: Manila Share Replica Stucked for One Hour Longer
      labels: ["project_id", "share_id", "replica_id", "status"]
      query: |
        SELECT
          project_id,
          shares.id AS share_id,
          si.id AS replica_id,
          status,
          (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(COALESCE(si.updated_at, si.created_at))) AS elapsed
        FROM share_instances si
        INNER JOIN shares ON si.share_id = shares.id
        WHERE
          status IN ('creating', 'deleting', 'error', 'error_deleting')
          AND COALESCE(si.updated_at, si.created_at) < (NOW() - INTERVAL 1 hour)
          AND si.deleted = 'False'
        UNION SELECT 'none', 'none', 'none', 'none', 0
      values: ["elapsed"]
    - help: Manila Snapshot Stuck Count
      labels:
        - "project_id"
        - "share_id"
        - "id"
        - "status"
      name: manila_snapshot_stuck_count_gauge
      query: |
        SELECT
          share_snapshots.project_id,
          share_snapshots.share_id,
          share_snapshots.id,
          share_snapshot_instances.status,
        COUNT(*) AS count_gauge
        FROM share_snapshots
        INNER JOIN share_snapshot_instances ON share_snapshots.id=share_snapshot_instances.snapshot_id
        WHERE
          share_snapshots.deleted = 'False'
          AND share_snapshot_instances.status in ('deleting','creating')
          AND (COALESCE(share_snapshot_instances.updated_at, share_snapshot_instances.created_at) < DATE_SUB(now(), INTERVAL 15 MINUTE))
        GROUP BY
          share_snapshots.id,
          share_snapshots.project_id,
          share_snapshots.share_id,
          share_snapshot_instances.status
        UNION SELECT 'none' AS project_id, 'none' AS share_id, 'none' AS id, 'none' AS status, 0 AS count_gauge;
      values:
        - "count_gauge"
    - help: Manila Snapshot Stuck Max Duration
      labels:
        - "project_id"
        - "share_id"
        - "id"
        - "status"
      name: manila_snapshot_stuck_max_duration_gauge
      query: |
        SELECT
          share_snapshots.project_id,
          share_snapshots.share_id,
          share_snapshots.id,
          share_snapshot_instances.status,
          MAX(UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(COALESCE(share_snapshot_instances.updated_at, share_snapshot_instances.created_at))) AS max_duration_gauge
        FROM share_snapshots
        INNER JOIN share_snapshot_instances ON share_snapshots.id=share_snapshot_instances.snapshot_id
        WHERE
          share_snapshots.deleted = 'False'
          AND share_snapshot_instances.status in ('deleting','creating')
          AND (COALESCE(share_snapshot_instances.updated_at, share_snapshot_instances.created_at) < DATE_SUB(now(), INTERVAL 15 MINUTE))
        GROUP BY
          share_snapshots.id,
          share_snapshots.project_id,
          share_snapshots.share_id,
          share_snapshot_instances.status
        UNION SELECT 'none' AS project_id, 'none' AS share_id, 'none' AS id, 'none' AS status, 0 AS max_duration_gauge;
      values:
        - "max_duration_gauge"
    - help: Manila Share servers
      labels:
        - "project_id"
        - "share_network_id"
        - "share_network_subnet_id"
        - "share_server_id"
      name: manila_share_servers_gauge
      query: |
        SELECT
          a.project_id AS project_id,
          a.id AS share_network_id,
          b.id AS share_network_subnet_id,
          c.id AS share_server_id,
          COUNT(*) AS count_gauge
        FROM share_network_subnets as b
        JOIN share_networks AS a ON a.id = b.share_network_id
        JOIN share_servers AS c ON b.id = c.share_network_subnet_id
        WHERE c.deleted = 'False'
        GROUP BY
          project_id, share_network_id, share_network_subnet_id, share_server_id;
      values:
        - "count_gauge"
    - help: Manila Share servers Stuck Count
      labels:
        - "manila_host"
        - "id"
        - "share_network_subnet_id"
        - "status"
      name: manila_share_servers_stuck_count_gauge
      query: |
        SELECT
          host as manila_host,
          id,
          share_network_subnet_id,
          status,
          COUNT(*) AS count_gauge
        FROM share_servers
        WHERE deleted='False' AND status in ('deleting','creating','error','error_unmanage','error_manage') AND (COALESCE(updated_at, created_at) < DATE_SUB(now(), INTERVAL 15 MINUTE))
        GROUP BY
          manila_host,
          id,
          share_network_subnet_id,
          status
        UNION SELECT 'none' AS manila_host, 'none' AS id, 'none' AS share_network_subnet_id, 'none' AS status, 0 AS count_gauge;
      values:
        - "count_gauge"
    - help: Manila Share servers Stuck Duration in Seconds
      labels:
        - "manila_host"
        - "id"
        - "share_network_subnet_id"
        - "status"
      name: manila_share_servers_stuck_duration_seconds
      query: |
        SELECT
          host AS manila_host,
          id,
          share_network_subnet_id,
          status,
          UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(COALESCE(updated_at, created_at)) AS duration
        FROM share_servers
        WHERE deleted='False' AND status in ('deleting','creating','error','error_unmanage','error_manage') AND (COALESCE(updated_at, created_at) < DATE_SUB(now(), INTERVAL 15 MINUTE))
        UNION SELECT 'none' AS manila_host, 'none' AS id, 'none' AS share_network_subnet_id, 'none' AS status, 0 AS duration;
      values:
        - "duration"
    - help: Manila Share Access Stuck Max Duration
      labels:
        - "access_id"
        - "share_id"
        - "share_instance_id"
        - "state"
      name: manila_share_access_stuck_max_duration_gauge
      query: |
        SELECT
          access_id,
          share_instances.share_id as share_id,
          share_instance_id,
          state,
          MAX(UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(COALESCE(access.updated_at, access.created_at))) AS max_duration_gauge
        FROM share_instance_access_map as access
        JOIN share_instances on share_instances.id = access.share_instance_id
        WHERE access.deleted='False' AND access.state != 'active' AND (COALESCE(access.updated_at, access.created_at) < DATE_SUB(now(), INTERVAL 15 MINUTE))
        GROUP BY
          access_id,
          share_id,
          share_instance_id,
          state
        UNION SELECT 'none' AS access_id, 'none' AS share_id, 'none' AS share_instance_id, 'none' AS state, 0 AS max_duration_gauge;
      values:
        - "max_duration_gauge"

pod:
  replicas:
    api: 5
    ensure: 1
    scheduler: 1
  lifecycle:
    upgrades:
      deployments:
        revision_history: 5
        pod_replacement_strategy: RollingUpdate
        rolling_update:
          max_unavailable: 0
          max_surge: 1
  health:
    use_agent: true
  resources:
    api:
      requests:
        memory: "1Gi"
        cpu: "1000m"
    api_statsd:
      requests:
        cpu: 50m
        memory: 32Mi
    scheduler:
      requests:
        memory: "256Mi"
        cpu: "1000m"
    share:      # is not scalable -> qosClass: burstable
      requests:
        memory: "1Gi"
        cpu: "100m"
      limits:
        memory: "2Gi"
        cpu: "2000m"
    share_ensure:
      requests:
        memory: "2Gi"
        cpu: "500m"

# all default quotas are 0 to enforce usage of the Resource Management tool (aka Limes) in Elektra
quota:
  shares: 0
  gigabytes: 0
  snapshots: 0
  snapshot_gigabytes: 0
  share_networks: 0
  share_groups: 0
  share_group_snapshots: 0
  share_replicas: 0
  replica_gigabytes: 0

db_name: manila

mariadb:
  alerts:
    support_group: compute-storage-api
  enabled: true
  # root_password: null       # define in region or use master_password mechanism
  buffer_pool_size: "4096M"
  log_file_size: "2048M"
  query_cache_size: "1M"
  query_cache_type: "1"
  name: manila
  initdb_secret: true
  ccroot_user:
    enabled: true
  databases:
  - manila
  users:
    manila:
      name: manila
      password: null
      grants:
      - "ALL PRIVILEGES on manila.*"
  persistence_claim:
    name: db-manila-pvclaim
  resources:
    requests:
      memory: 6144Mi
  vpa:
    set_main_container: true
  backup_v2:
    enabled: true
    databases:
      - manila
    verify_tables:
      - manila.shares
      - manila.quotas
    oauth:
      client_id: "manila"
  metrics:
    resources:
      limits:
        cpu: 250m
        memory: 384Mi
  extraConfigFiles:
    manila.cnf: |+
      [mysqld]
      net_read_timeout = 300
      net_write_timeout = 300

# needed for utils ini_sections
postgresql:
  enabled: false

utils:
  trust_bundle:
    enabled: true

rabbitmq:
  name: manila
  alerts:
    enabled: false
    rabbit_queue_length: 10
    support_group: compute-storage-api
  persistence:
    enabled: true
  metrics:
    enabled: true
    sidecar:
      enabled: false
  enableDetailedMetrics: false
  enablePerObjectMetrics: false

sentry:
  enabled: true
seeds:
  all_enabled: true
  service_type: share
  endpoint_prefix: ""

share_ensure:
  enabled: true

share_types:
  hypervisor_storage: false
  btp_backup: false

# netapp filer back ends, required input
# netapp:
#   filers:
#    - name: DEFINED-IN-REGION-CHART
#      availability_zone: DEFINED-IN-REGION-CHART
#      backend_name: custom-name-used-in-type
#      debug: false
#      share_server_cleanup_interval: 10
#      host: my-netapp-host
#      username: my-netapp-user
#      password: my-netapp-pw
#      root_volume_aggregate: DEFINED-IN-REGION-CHART
#      aggregate_search_pattern: DEFINED-IN-REGION-CHART
#      port_search_pattern: DEFINED-IN-REGION-CHART
#      physical_network: DEFINED-IN-REGION-CHART
#      mtu: DEFINED-IN-REGION-CHART
#      reserved_share_percentage: 0

use_tls_acme: true

audit:
  enabled: true
  # do by default not attach the request payloads of create/update calls to the event
  record_payloads: false
  metrics_enabled: true
  # how many messages to buffer before dumping to log (when rabbit is down or too slow)
  mem_queue_size: 1000

rabbitmq_notifications:
  name: manila

# openstack-ratelimit-middleware
api_rate_limit:
  enabled: false
  rate_limit_by: "target_project_id"
  max_sleep_time_seconds: 15
  log_sleep_time_seconds: 10
  backend_timeout_seconds: 15
  project_whitelist_default:
    - ccadmin/cloud_admin # castellum scraping

# openstack-watcher-middleware
watcher:
  enabled: true

# oslo_messaging rpc stats
rpc_statsd_port: 9125
rpc_statsd_enabled: true

# prometheus alerts
alerts:
  enabled: true
  support_group: compute-storage-api
  prometheus:
    openstack: openstack
    kubernetes: kubernetes
    metrics-metal: metal
    # metrics: regional
    # metrics-global: global
    # metrics-scaleout: scaleout

# osprofiler
osprofiler:
  enabled: false

vpa:
  # https://github.com/sapcc/vpa_butler
  # The maximum available capacity is split evenly across containers specified in the Deployment, StatefulSet or DaemonSet to derive the upper recommendation bound. This does not work out for pods with a single resource-hungry container with several sidecar containers
  # Annotate the Deployment, StatefulSet or DaemonSet with vpa-butler.cloud.sap/main-container=$MAIN_CONTAINER. That will distribute 75% of the maximum available capacity to the main container and the rest evenly across all others
  set_main_container: true
