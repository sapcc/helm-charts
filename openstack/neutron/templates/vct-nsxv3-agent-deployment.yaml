{{- if or (.Values.isImageTransportTemplating | default false) (and (contains ",nsxv3" .Values.ml2_mechanismdrivers) (.Capabilities.APIVersions.Has "vcenter-operator.stable.sap.cc/v1")) }}
apiVersion: vcenter-operator.stable.sap.cc/v1
kind: VCenterTemplate
metadata:
  name: 'neutron-nsxv3-agent-deployment'
options:
  scope: 'cluster'
  jinja2_options:
    variable_start_string: '{='
    variable_end_string: '=}'
template: |
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: neutron-nsxv3-agent-{= name =}
    labels:
      system: openstack
      type: backend
      component: neutron
      vcenter: {= host =}
      datacenter: {= availability_zone =}
      vccluster: {= cluster_name =}
  spec:
    replicas: 1
    revisionHistoryLimit: 5
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 0
        maxSurge: 1
    selector:
      matchLabels:
          name: neutron-nsxv3-agent-{= name =}
    template:
      metadata:
        labels:
{{ tuple . "neutron" "nsxv3" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 10 }}
          name: neutron-nsxv3-agent-{= name =}
          vcenter: {= host =}
          datacenter: {= availability_zone =}
          vccluster: {= cluster_name =}
        annotations:
          configmap-etc-hash: {{ include (print $.Template.BasePath "/configmap-etc.yaml") . | sha256sum }}
          prometheus.io/scrape: "true"
          prometheus.io/targets: {{ required ".Values.metrics.prometheus missing" .Values.metrics.prometheus | quote }}
          {{- include "utils.linkerd.pod_and_service_annotation" . | indent 10 }}
      spec:
        containers:
        - name: neutron-nsxv3-agent
          image: {{.Values.global.registry}}/loci-neutron:{{.Values.imageVersionNSXv3 | default .Values.imageVersion | required "Please set neutron.imageVersion or similar"}}
          imagePullPolicy: IfNotPresent
          command: ["dumb-init"]
          args: ["neutron-nsxv3-agent", "--config-file", "/etc/neutron/neutron.conf", "--config-dir", "/etc/neutron/secrets", "--config-file", "/etc/neutron/plugins/ml2/ml2-conf.ini", "--config-file", "/etc/neutron/plugins/ml2/ml2-nsxv3.ini"]
          env:
          - name: SENTRY_DSN
            valueFrom:
              secretKeyRef:
                name: sentry
                key: neutron.DSN.python
          - name: PYTHONWARNINGS
            value: "ignore:Unverified HTTPS request"
          - name: PGAPPNAME
            value: neutron-nsxv3-agent-{= name =}
          - name: REQUESTS_CA_BUNDLE
            value: ""
          {{- include "utils.trust_bundle.env" . | indent 10 }}
          ports:
            - name: metrics-agent
              containerPort: 8000
          livenessProbe:
            exec:
              command: ["neutron-agent-liveness", "--config-file", "/etc/neutron/neutron.conf", "--config-file", "/etc/neutron/secrets/neutron-common-secrets.conf", "--config-file", "/etc/neutron/plugins/ml2/ml2-nsxv3.ini", "--agent-type", "NSXv3 Agent"]
            initialDelaySeconds: 90
            periodSeconds: 30
            timeoutSeconds: 10
          resources:
{{ toYaml .Values.pod.resources.nsxv3_agent | indent 12 }}
          volumeMounts:
          - name: etc-neutron
            mountPath: /etc/neutron
            readOnly: true
          {{- include "utils.trust_bundle.volume_mount" . | indent 10 }}
        - name: exporter
          image: {{.Values.global.registry}}/nsx-t-exporter:{{.Values.imageVersionNSXTExporter | required "Please set neutron.imageVersionNSXTExporter"}}
          ports:
            - name: metrics-export
              containerPort: 9191
          env:
            {%- set bb = name | replace( "bb", "") | int %}
            {%- set hostname = "nsx-ctl-" + "bb" + ( '%03d' % bb ) + "." + domain %}
            - name: NSXV3_LOGIN_HOST
              value: {= hostname =}
            - name: NSXV3_LOGIN_PORT
              value: "443"
            - name: NSXV3_LOGIN_USER
              valueFrom:
                secretKeyRef:
                  name: neutron-ml2-nsxv3-{= name =}
                  key: NSXV3_LOGIN_USER
            - name: NSXV3_LOGIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: neutron-ml2-nsxv3-{= name =}
                  key: NSXV3_LOGIN_PASSWORD
            - name: NSXV3_REQUESTS_PER_SECOND
              value: "10"
            - name: NSXV3_REQUEST_TIMEOUT_SECONDS
              value: "120"
            - name: NSXV3_CONNECTION_POOL_SIZE
              value: "100"
            - name: NSXV3_SUPPRESS_SSL_WARNINGS
              value: "true"
            - name: SCRAP_PORT
              value: "9191"
            - name: SCRAP_SCHEDULE_SECONDS
              value: "300"
          resources:
{{ toYaml .Values.pod.resources.nsxv3_exporter | indent 12 }}
        volumes:
        - name: etc-neutron
          projected:
            defaultMode: 420
            sources:
            - configMap:
                name: neutron-etc
                items:
                - key: neutron.conf
                  path: neutron.conf
                - key: logging.conf
                  path: logging.conf
                - key: ml2-conf.ini
                  path: plugins/ml2/ml2-conf.ini
            - configMap:
                name: neutron-ml2-nsxv3-{= name =}
                items:
                - key: ml2-nsxv3.ini
                  path: plugins/ml2/ml2-nsxv3.ini
            - secret:
                name: neutron-common-secrets
                items:
                  - key: neutron-common-secrets.conf
                    path: secrets/neutron-common-secrets.conf
            - secret:
                name: neutron-ml2-nsxv3-{= name =}
                items:
                  - key:  neutron-nsxv3-secrets.conf
                    path: secrets/neutron-nsxv3-secrets.conf
        {{- include "utils.trust_bundle.volumes" . | indent 8 }}
{{- end }}
