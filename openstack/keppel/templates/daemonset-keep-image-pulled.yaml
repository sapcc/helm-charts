{{- if not (or .Values.keppel.slim (.Values.global.region | hasPrefix "qa-")) }}

# Because Keppel is instrumental for the continued availability of many other
# Docker images, we want to be able to start it reliably and fast. To ensure this,
# this daemonset (through its existence) keeps the Keppel image permanently
# pulled on all nodes.
#
# The condition above skips this daemonset on QA and lab regions, because high
# availability is not a concern there. By omitting the daemonset there, the
# Helm deployment will finish faster since it does not have to wait on it.

kind: DaemonSet
apiVersion: apps/v1

metadata:
  name: keep-image-pulled

spec:
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1000 # allow updating all pods at once
  selector:
    matchLabels:
      app: keep-image-pulled
  template:
    metadata:
      labels:
        app: keep-image-pulled
      annotations:
        linkerd.io/inject: disabled # This pod does not interact with the network.
    spec:
      # NOTE: observed resource usage in eu-de-1 (as of 2020-02-26)
      # - no measurable CPU usage once started
      # - RAM max. 1.5 MiB (but it turns out that k8s itself runs into OOM when
      #   starting a container with less than 16-32 MiB RAM limit)
      containers:
        - name: keppel
          image: "{{ include "keppel_image" . }}"
          {{ include "tmplKeepImagePulled" . }}
        - name: postgres
          image: "{{ .Values.global.registryAlternateRegion }}/postgres-ng:{{.Values.postgresql.imageTag}}"
          {{ include "tmplKeepImagePulled" . }}
        - name: postgres-kubectl
          image: "{{ .Values.global.registryAlternateRegion }}/shared-app-images/alpine-kubectl:3.19-latest"
          {{ include "tmplKeepImagePulled" . }}
        - name: redis # NOTE: redis-metrics is a separate pod, so we don't need to care about it
          image: "{{.Values.global.registryAlternateRegion}}/shared-app-images/alpine-redis:{{.Values.redis.image.tag}}"
          {{ include "tmplKeepImagePulled" . }}
      # sleep(1) doesn't seem to react to SIGTERM at all, so skip right ahead to SIGKILL
      terminationGracePeriodSeconds: 1

{{- end }}
