owner-info:
  maintainers:
    - Stefan Majewsky
    - Sandro JÃ¤ckel
    - Falk Reimann
    - Muhammad Talal Anwar
  helm-chart-url: https://github.com/sapcc/helm-charts/tree/master/openstack/keppel

keppel:
  image_tag: DEFINED_BY_PIPELINE

  slim: false # set to true for deployments to the small QA regions

  replicas:
    api: 4

  # contains objects like:
  # ```
  #   peers:
  #     - hostname: registry-1.example.com
  #       healthcheck_account: healthcheck-1
  #     - hostname: registry-2.example.com
  #       healthcheck_account: healthcheck-2
  # ```
  # The `healthcheck_account` is only needed for anycast monitoring.
  peers: []

  # anycast domain name shared between all Keppel instances in the same peer group
  # (Keppel does not care about how the anycasting works exactly; it just means
  # that all Keppels accept HTTP requests for this domain name)
  anycast_domain_name: ""

  service_password: DEFINED_IN_VALUES_FILE
  dashboard_url_pattern: '' # optional, DEFINED_IN_VALUES_FILE

  # name of Keppel account reserved for keppel-health-monitor
  healthcheck_account: healthcheck

  # credentials for E2E test user (optional; user only gets created when a password is given)
  e2e_test_password: '' # DEFINED_IN_VALUES_FILE

  issuer_key.pem: DEFINED_IN_VALUES_FILE
  previous_issuer_key.pem: ''         # empty = no key rotation in progress
  anycast_issuer_key.pem: ''          # empty = anycast not enabled
  anycast_previous_issuer_key.pem: '' # empty = no key rotation in progress

  # Set to non-empty values to enable audit logging to Hermes.
  rabbitmq:
    queue_name: ""
    username: ""
    password: ""
    hostname: ""

  # credentials for Clair (vulnerability scanning service)
  clair:
    hostname: "" # set to non-empty value to enable
    auth_preshared_key: DEFINED_IN_VALUES_FILE

# This refers to the region holding the shared Swift container where the
# "swift" federation driver tracks account name claims.
federation:
  leader_region:    DEFINED_IN_VALUES_FILE
  service_password: DEFINED_IN_VALUES_FILE

# Redis is used for caching user's Keystone tokens and for tracking the
# consumption of rate limits. Both usecases are ephemeral, so we don't need
# persistence.
redis:
  persistence:
    enabled: false

  redisPassword: DEFINED_IN_VALUES_FILE

  # evict unused keys automatically
  config:
    maxmemory: 1gb
    maxmemory-policy: allkeys-lru
    maxmemory-samples: 5

postgresql:
  log_min_duration_statement: 250
  # less than the postgresql chart's default; I want to know early when connections start getting out of hand
  max_connections: 128

pgmetrics:
  db_name: keppel

  customMetrics:
    keppel_accounts:
      query: 'SELECT COUNT(*) AS count, COALESCE(EXTRACT(epoch FROM MIN(next_blob_sweep_at)), 0) AS min_next_blob_sweep_at, COALESCE(EXTRACT(epoch FROM MIN(next_storage_sweep_at)), 0) AS min_next_storage_sweep_at, COALESCE(EXTRACT(epoch FROM MIN(next_federation_announcement_at)), 0) AS min_next_federation_announcement_at FROM accounts'
      metrics:
        - count:
            usage: "GAUGE"
            description: "Total number of accounts managed by Keppel"
        - min_next_blob_sweep_at:
            usage: "GAUGE"
            description: "UNIX timestamp of next scheduled blob sweep, or 0 if no accounts have ever been sweeped"
        - min_next_storage_sweep_at:
            usage: "GAUGE"
            description: "UNIX timestamp of next scheduled storage sweep, or 0 if no accounts have ever been sweeped"
        - min_next_federation_announcement_at:
            usage: "GAUGE"
            description: "UNIX timestamp of next scheduled federation announcement, or 0 if no accounts have ever been announced to federation"
    keppel_blobs:
      query: "SELECT COUNT(*) AS count, COALESCE(EXTRACT(epoch FROM MIN(can_be_deleted_at)), 0) AS min_can_be_deleted_at, EXTRACT(epoch FROM MIN(validated_at)) AS min_validated_at, SUM(CASE WHEN validation_error_message = '' THEN 0 ELSE 1 END) AS validation_errors FROM blobs WHERE storage_id != ''"
      metrics:
        - count:
            usage: "GAUGE"
            description: "Total number of blobs stored in Keppel (except for unbacked blobs)"
        - min_can_be_deleted_at:
            usage: "GAUGE"
            description: "UNIX timestamp of next scheduled blob deletion, or 0 if no blobs are currently marked for deletion"
        - min_validated_at:
            usage: "GAUGE"
            description: "UNIX timestamp of oldest blob validation"
        - validation_errors:
            usage: "GAUGE"
            description: "Number of blobs stored in Keppel that failed their last validation"
    keppel_blob_mounts:
      query: 'SELECT COALESCE(EXTRACT(epoch FROM MIN(can_be_deleted_at)), 0) AS min_can_be_deleted_at FROM blob_mounts'
      metrics:
        - min_can_be_deleted_at:
            usage: "GAUGE"
            description: "UNIX timestamp of next scheduled blob mount deletion, or 0 if no blob mounts are currently marked for deletion"
    keppel_repos:
      query: 'SELECT COUNT(*) AS count, COALESCE(EXTRACT(epoch FROM MIN(next_blob_mount_sweep_at)), 0) AS min_next_blob_mount_sweep_at, COALESCE(EXTRACT(epoch FROM MIN(next_gc_at)), 0) AS min_next_gc_at FROM repos'
      metrics:
        - count:
            usage: "GAUGE"
            description: "Total number of repositories stored in Keppel"
        - min_next_blob_mount_sweep_at:
            usage: "GAUGE"
            description: "UNIX timestamp of next scheduled blob mount sweep, or 0 if no repos have ever been sweeped"
        - min_next_gc_at:
            usage: "GAUGE"
            description: "UNIX timestamp of next scheduled image GC, or 0 if no repos have ever been garbage-collected"
    keppel_replicated_repos:
      query: "SELECT COUNT(r.id) AS count, COALESCE(EXTRACT(epoch FROM MIN(r.next_manifest_sync_at)), 0) AS min_next_manifest_sync_at FROM repos r JOIN accounts a ON r.account_name = a.name WHERE a.upstream_peer_hostname != ''"
      metrics:
        - count:
            usage: "GAUGE"
            description: "Total number of repositories in replica accounts stored in Keppel"
        - min_next_manifest_sync_at:
            usage: "GAUGE"
            description: "UNIX timestamp of next scheduled manifest sync, or 0 if no replica repos have ever been synced"
    keppel_manifests:
      query: "SELECT COUNT(*) AS count, EXTRACT(epoch FROM MIN(validated_at)) AS min_validated_at, SUM(CASE WHEN validation_error_message = '' THEN 0 ELSE 1 END) AS validation_errors, COALESCE(EXTRACT(epoch FROM MIN(next_vuln_check_at)), 0) AS min_next_vuln_check_at FROM manifests"
      metrics:
        - count:
            usage: "GAUGE"
            description: "Total number of manifests stored in Keppel"
        - min_validated_at:
            usage: "GAUGE"
            description: "UNIX timestamp of oldest manifest validation"
        - validation_errors:
            usage: "GAUGE"
            description: "Number of manifests stored in Keppel that failed their last validation"
        - min_next_vuln_check_at:
            usage: "GAUGE"
            description: "UNIX timestamp of next scheduled vulnerability check, or 0 if no manifests have ever been checked for vulnerabilities"
    keppel_unknown_blobs:
      query: 'SELECT COALESCE(EXTRACT(epoch FROM MIN(can_be_deleted_at)), 0) AS min_can_be_deleted_at FROM unknown_blobs'
      metrics:
        - min_can_be_deleted_at:
            usage: "GAUGE"
            description: "UNIX timestamp of next scheduled deletion of an unknown blob, or 0 if there are no unknown blobs at the moment"
    keppel_unknown_manifests:
      query: 'SELECT COALESCE(EXTRACT(epoch FROM MIN(can_be_deleted_at)), 0) AS min_can_be_deleted_at FROM unknown_manifests'
      metrics:
        - min_can_be_deleted_at:
            usage: "GAUGE"
            description: "UNIX timestamp of next scheduled deletion of an unknown manifest, or 0 if there are no unknown manifests at the moment"
    keppel_tags:
      query: 'SELECT COUNT(*) AS count FROM tags'
      metrics:
        - count:
            usage: "GAUGE"
            description: "Total number of tags stored in Keppel"
    keppel_peers:
      query: >
        SELECT hostname, COALESCE(EXTRACT(epoch FROM last_peered_at), 0) AS last_peered_at FROM peers
      metrics:
        - hostname:
            usage: "LABEL"
            description: "Peer hostname"
        - last_peered_at:
            usage: "GAUGE"
            description: "UNIX timestamp of when we last issued a password for this peer (should happen every 10 minutes)"
    keppel_blob_replication:
      query: >
        SELECT COALESCE(EXTRACT(epoch FROM MIN(since)), 0) AS min_started_at FROM pending_blobs
      metrics:
        - min_started_at:
            usage: "GAUGE"
            description: "UNIX timestamp when oldest still-running blob replication was started (or 0 when no replication is in progress)"
    keppel_upload:
      query: >
        SELECT COALESCE(EXTRACT(epoch FROM MIN(updated_at)), 0) AS min_updated_at FROM uploads
      metrics:
        - min_updated_at:
            usage: "GAUGE"
            description: "UNIX timestamp when oldest still-active upload was started (or 0 when no upload is in progress)"
    keppel_vuln_scan_error:
      query: >
        SELECT vuln_scan_error AS message, COUNT(*) AS counts FROM manifests GROUP BY vuln_scan_error
      metrics:
        - message:
            usage: "LABEL"
            description: "Error message from the Clair indexer"
        - counts:
            usage: "GAUGE"
            description: "Total number of manifests where indexing in Clair failed with a specific error message"
