{{- range $cluster_id, $cluster := .Values.clusters }}
{{- if $cluster.proxy_deployment_enabled }}
{{- range $az := $.Values.global.availability_zones }}
kind: Deployment
apiVersion: apps/v1

metadata:
  name: swift-proxy-{{ $cluster_id }}-{{ $az }}
  labels:
    release: "{{ $.Release.Name }}"
    os-cluster: {{ $cluster_id }}
spec:
  revisionHistoryLimit: 5
  {{- $replicas_az := default 0.0 (index $cluster (printf "proxy_deployment_replicas_%s" $az)) }}
  replicas: {{ $replicas_az }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      {{- if eq $replicas_az 1.0 }}
      maxUnavailable: 0
      {{- else }}
      maxUnavailable: 1
      {{- end }}
      maxSurge: 2
  selector:
    matchLabels:
      component: swift-proxy-{{ $cluster_id }}
  template:
    metadata:
      labels:
        component: swift-proxy-{{ $cluster_id }}
        from: deployment
        os-cluster: {{ $cluster_id }}
      annotations:
        checksum/swift-cluster.etc: {{ include "swift/templates/etc/cluster-configmap.yaml" $ | sha256sum }}
        {{- include "swift_conf_annotations" $ | indent 8 }}
        {{- include "swift_ring_annotations" $ | indent 8 }}
        {{- if $.Values.health_exporter }}
        # Prometheus annotations on pod level without port
        # discovery will find all exposed container ports for exporters running in containers
        prometheus.io/scrape: "true"
        prometheus.io/targets: {{ required ".Values.alerts.prometheus.openstack missing" $.Values.alerts.prometheus.openstack }}
        {{- end }}
    spec:
      # No tolerations for swift nodes
      nodeSelector:
        failure-domain.beta.kubernetes.io/zone: {{ $az }}
      affinity:
        podAntiAffinity:
          # Prefere to be scheduled on nodes not yet running this proxy from a deployment
          # kubernetes.io/hostname legacy control plane
          # kubernetes.cloud.sap/host aPod bases control plane
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - swift-proxy-{{ $cluster_id }}
                - key: from
                  operator: In
                  values:
                  - deployment
              topologyKey: "kubernetes.io/hostname"
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - swift-proxy-{{ $cluster_id }}
                - key: from
                  operator: In
                  values:
                  - deployment
              topologyKey: "kubernetes.cloud.sap/host"
          # Prefere to be scheduled on nodes not yet running haproxy. See bin/haproxy-start for explanation
          - weight: 5
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - swift-haproxy-{{ $cluster_id }}
              topologyKey: "kubernetes.io/hostname"
      volumes:
        {{- tuple $cluster_id | include "swift_proxy_volumes" | indent 8 }}
      containers:
        {{- tuple "deployment" $cluster_id $cluster $ | include "swift_proxy_containers" | indent 8 }}

---
{{- end }}
{{- end }}
{{- end }}
