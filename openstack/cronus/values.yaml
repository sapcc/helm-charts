global:
  region: RegionOne
  tld: openstack.local
cronus:
  enabled: true
  cacheSize: 256
  http: 443
  smtp: 465
  smtps: 587
  listenProxyProtocol: false
  tls:
    serverTlsName: tls-secret-cronus
    clientTlsAuth: VerifyClientCertIfGiven
    # "SAP Cloud Root CA" http://aia.pki.co.sap.com/aia/SAP%20Cloud%20Root%20CA.crt
    clientCA: |
      -----BEGIN CERTIFICATE-----
      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
      -----END CERTIFICATE-----
  debug: true
  image:
    name: cronus-repository
    pullPolicy: IfNotPresent
    tag: latest
  service:
    type: LoadBalancer
    annotations:
      disco: "true"
      disco/record: my-ingress.region.cloud.com.
  statefulSet:
    enabled: false
    podManagementPolicy: OrderedReady
    annotations: {}
    labels: {}
    headless:
      annotations: {}
      labels: {}
      servicePort: 80
  updateStrategy: RollingUpdate
  terminationGracePeriod: 60
  affinity:
    # don't co-locate cronus replicas on the same node
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - topologyKey: kubernetes.io/hostname
        labelSelector:
          matchExpressions:
          - key: name
            operator: In
            values:
              - cronus
              - usage
          - key: instance
            operator: In
            values:
              - cronus
  replicas: 3
  # all below can be used only with a deployment style
  maxSurge: 1
  maxUnavailable: 0
  # maximum email body size in bytes
  maxEmailBodySize: 10485760 # 10MiB
  ingressAnnotations:
    # don't handle this resource by ingress controllers
    kubernetes.io/ingress.class: cronus

nebula:
  enabled: true
  cacheSize: 512
  http: 1080
  debug: true
  image:
    name: nebula-repository
    pullPolicy: IfNotPresent
    tag: latest
  statefulSet:
    enabled: false
    podManagementPolicy: OrderedReady
    annotations: {}
    labels: {}
    headless:
      annotations: {}
      labels: {}
      servicePort: 80
  updateStrategy: RollingUpdate
  replicas: 1
  # all below can be used only with a deployment style
  maxSurge: 1
  maxUnavailable: 0

config:
  ## keystone optional authentication methods, add in @SECRETS the relevant method
  keystone:
    # authUrl: https://identity
    # region: eu-de-2
    # endpointType: public
    # applicationCredentialID: application-credential-id
    # applicationCredentialSecret: application-credential-secret
    # applicationCredentialName: application-credential-name
    # projectID: project-id
    projectName: master
    projectDomainName: ccadmin
    # projectDomainID: project-domain-id
    userDomainName: Default
    # domainName: domain-name
    # domainID: domain-id
    username: cronus
    # password: # a password must be defined in ".Values.global.cronus_service_password"
    # userID: user-id
  group: service-group
  jira:
    endpoint: http://url-to
    username: jira-username
    password: jira-password
    serviceDeskID: 1
    requestTypeID: 2
    customFieldID: 3
    ticketSummaryTemplate: |
      Delete {{ $accountID }} account ID
    ticketDescriptionTemplate: |
      Please delete the {{ $accountID }} account ID
  multiCloud:
    endpoint: http://url-to
    username: service-username
    password: service-password
  serviceUsername: service-username
  servicePassword: service-password
  awsAccess: aws-access
  awsSecret: aws-secret
  technicalUsername: aws-username
  policyName: aws-policy
  roleName: aws-role
  iamRolePolicyName: aws-role-policy
  iamRolePolicy: |
    {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "ses:*",
                ],
                "Resource": "*"
            }
        ]
    }
  iamRoleTrustPolicy: |
    {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Principal": [
                    "Service:*",
                ],
                "Action": "*"
            }
        ]
    }
  iamPolicy: |
    {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "ses:*",
                ],
                "Resource": "*"
            }
        ]
    }
  forwardUserAgent: false
  billingCacheTTL: 24h
  barbicanCacheTTL: 15m
  awsSignV2TTL: 5m
  technicalResponsible: technical-responsible@example
  accountStatusTimeout: 300 # 5m
  accountStatusPollDelay: 10s
  verifyEmailDomain: example.com
  verifyEmailSecret: domainkey
  useCaseDescription: SES account
  websiteURL: https://example.com
  allowedServices:
    email: email-region
  # extra SMTP backends and a list of recipient domains
  smtpBackends:
    int:
      # backend hostname. scheme specifies the encryption method: none, tls, starttls
      host: scheme://server:port
      # a list of recipient domains, which will be redirected to this backend
      domains:
        - corp.int
        - int
  # the list of domains to be blocked by a proxy server on ses email identity create/delete actions
  blockedDomains:
    - example.com # the exact domain
    - .example.com # all subdomains
    - sub.example.com # the exact subdomain
  cronusPolicy:
    project_scope: project_id:%(project_id)s and (role:email_admin or role:email_user or role:cloud_email_admin)
    domain_scope: domain_id:%(target.project.domain.id)s and (role:email_admin or role:email_user or role:cloud_email_admin)
    cronus:usage_viewer: rule:project_scope or rule:domain_scope or role:resource_service
    cronus:aws_proxy: rule:project_scope
    cronus:smtp_proxy: rule:project_scope
    warmup_projects_cache: role:resource_service
  nebulaPolicy:
    project_scope: project_id:%(project_id)s and (role:email_admin or role:cloud_email_admin)
    domain_scope: domain_id:%(target.project.domain.id)s and (role:email_admin or role:cloud_email_admin)
    cluster_scope: (project_domain_name:ccadmin and project_name:cloud_admin) or role:cloud_email_admin
    cluster_or_domain_scope: rule:cluster_scope or rule:domain_scope
    nebula:admin: rule:project_scope or rule:cluster_or_domain_scope
    nebula:cloud_admin: rule:cluster_or_domain_scope
  cronusAuditSink:
    internalQueueSize: 20
    contentTypePrefixes:
      - application/x-www-form-urlencoded
      - application/json
      - application/x-amz-json-
      - text/xml
    queryKeysToMask:
      ses:
      - Message.Subject.Charset
      - Message.Subject.Data
      - Message.Body.Text.Charset
      - Message.Body.Text.Data
      - Message.Body.Html.Charset
      - Message.Body.Html.Data
      - RawMessage
    jsonKeysToMask:
      ses:
      - Content
      - SigningAttributes
    maxContentLen: 102400 # 100Kb max
    debug: false
  nebulaAuditSink:
    internalQueueSize: 20
    contentTypePrefixes:
      - application/json
    maxContentLen: 102400 # 100Kb max
    debug: false

service:
  type: ClusterIP

simulator:
  enabled: true
  image:
    name: cronus-exporter-repository
    pullPolicy: IfNotPresent
    tag: latest
    imagePullSecrets: []
  statefulSet:
    enabled: true
    podManagementPolicy: OrderedReady
    annotations: {}
    labels: {}
    headless:
      annotations: {}
      labels: {}
      servicePort: 80
  updateStrategy: RollingUpdate
  replicas: 1
  nebula: 
  cronus:
  remote: 
  remoteRegion:
  remotePassword:
  slack: slack-url
  recipient: recipient-email
  cronuscli: cronuscli
  timeWaitInterval: 60
  shellToUse: bash
  projectDomainName: project-domain
  projectName: project-name

exporter:
  duration: "10m"
  period: 10
  loopInterval: 10
  pushgatewayUrl: http://localhost:9091
