global:
  region: RegionOne
  tld: openstack.local
cronus:
  enabled: true
  cacheSize: 256
  http: 5000
  smtp: 1025
  listenProxyProtocol: false
  debug: true
  tls: tls-secret
  image:
    name: cronus-repository
    pullPolicy: IfNotPresent
    tag: latest
  statefulSet:
    enabled: false
    podManagementPolicy: OrderedReady
    annotations: {}
    labels: {}
    headless:
      annotations: {}
      labels: {}
      servicePort: 80
  updateStrategy: RollingUpdate
  terminationGracePeriod: 60
  affinity:
    # don't co-locate cronus replicas on the same node
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - topologyKey: kubernetes.io/hostname
        labelSelector:
          matchExpressions:
          - key: name
            operator: In
            values:
              - cronus
              - usage
          - key: instance
            operator: In
            values:
              - cronus
  replicas: 3
  # all below can be used only with a deployment style
  maxSurge: 1
  maxUnavailable: 0
  usage:
    replicas: 1
    maxSurge: 1
    maxUnavailable: 0

nebula:
  enabled: true
  cacheSize: 512
  http: 1080
  debug: true
  image:
    name: nebula-repository
    pullPolicy: IfNotPresent
    tag: latest
  statefulSet:
    enabled: false
    podManagementPolicy: OrderedReady
    annotations: {}
    labels: {}
    headless:
      annotations: {}
      labels: {}
      servicePort: 80
  updateStrategy: RollingUpdate
  replicas: 1
  # all below can be used only with a deployment style
  maxSurge: 1
  maxUnavailable: 0
  ingressAnnotations:
    nginx.ingress.kubernetes.io/proxy-read-timeout: 1800

config:
  ## keystone optional authentication methods, add in @SECRETS the relevant method
  keystone:
    # authUrl: https://identity
    # region: eu-de-2
    # endpointType: public
    # applicationCredentialID: application-credential-id
    # applicationCredentialSecret: application-credential-secret
    # applicationCredentialName: application-credential-name
    # projectID: project-id
    projectName: master
    projectDomainName: ccadmin
    # projectDomainID: project-domain-id
    userDomainName: Default
    # domainName: domain-name
    # domainID: domain-id
    username: cronus
    # password: # a password must be defined in ".Values.global.cronus_service_password"
    # userID: user-id
  group: service-group
  jira:
    endpoint: http://url-to
    username: jira-username
    password: jira-password
    serviceDeskID: 1
    requestTypeID: 2
    customFieldID: 3
    ticketSummaryTemplate: |
      Delete {{ $accountID }} account ID
    ticketDescriptionTemplate: |
      Please delete the {{ $accountID }} account ID
  multiCloud:
    endpoint: http://url-to
    username: service-username
    password: service-password
  serviceUsername: service-username
  servicePassword: service-password
  awsAccess: aws-access
  awsSecret: aws-secret
  technicalUsername: aws-username
  policyName: aws-policy
  iamPolicy: |
    {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "ses:*",
                ],
                "Resource": "*"
            }
        ]
    }
  forwardUserAgent: false
  billingCacheTTL: 24h
  barbicanCacheTTL: 15m
  awsSignV2TTL: 5m
  technicalResponsible: technical-responsible@example
  accountStatusTimeout: 300 # 5m
  accountStatusPollDelay: 10s
  verifyEmailDomain: example.com
  verifyEmailSecret: domainkey
  useCaseDescription: SES account
  websiteURL: https://example.com
  allowedServices:
    email: email-region
  # extra SMTP backends and a list of recipient domains
  smtpBackends:
    int:
      # backend hostname. scheme specifies the encryption method: none, tls, starttls
      host: scheme://server:port
      # a list of recipient domains, which will be redirected to this backend
      domains:
        - corp.int
        - int
  # the list of domains to be blocked by a proxy server on ses email identity create/delete actions
  blockedDomains:
    - example.com # the exact domain
    - .example.com # all subdomains
    - sub.example.com # the exact subdomain
  cronusPolicy:
    project_scope: project_id:%(project_id)s and (role:email_admin or role:email_user or role:cloud_email_admin)
    domain_scope: domain_id:%(target.project.domain.id)s and (role:email_admin or role:email_user or role:cloud_email_admin)
    cronus:usage_viewer: rule:project_scope or rule:domain_scope or role:resource_service
    cronus:aws_proxy: rule:project_scope
    cronus:smtp_proxy: rule:project_scope
    warmup_projects_cache: role:resource_service
  nebulaPolicy:
    project_scope: project_id:%(project_id)s and (role:email_admin or role:cloud_email_admin)
    domain_scope: domain_id:%(target.project.domain.id)s and (role:email_admin or role:cloud_email_admin)
    cluster_scope: (project_domain_name:ccadmin and project_name:cloud_admin) or role:cloud_email_admin
    cluster_or_domain_scope: rule:cluster_scope or rule:domain_scope
    nebula:admin: rule:project_scope or rule:cluster_or_domain_scope
    nebula:cloud_admin: rule:cluster_or_domain_scope
  cronusAuditSink:
    internalQueueSize: 20
    contentTypePrefixes:
      - application/x-www-form-urlencoded
      - application/json
      - application/x-amz-json-
      - text/xml
    queryKeysToMask:
      ses:
      - Message.Subject.Charset
      - Message.Subject.Data
      - Message.Body.Text.Charset
      - Message.Body.Text.Data
      - Message.Body.Html.Charset
      - Message.Body.Html.Data
      - RawMessage
    jsonKeysToMask:
      ses:
      - Content
      - SigningAttributes
    maxContentLen: 102400 # 100Kb max
    debug: false
  nebulaAuditSink:
    internalQueueSize: 20
    contentTypePrefixes:
      - application/json
    maxContentLen: 102400 # 100Kb max
    debug: false

service:
  type: ClusterIP

# nginx values
ingress-nginx:
  tcp:
    465: cronus/cronus:1025
  controller:
    image:
      # custom image built from https://github.com/kayrus/ingress-nginx/tree/mail-module
      # commands to build:
      # PLATFORMS=linux/amd64 REGISTRY=keppel.eu-de-1.cloud.sap/ccloud TAG=v1.20.1-helo make push -C images/nginx
      # ARCH=amd64 PLATFORMS=amd64 REGISTRY=keppel.eu-de-1.cloud.sap/ccloud TAG="$(cat TAG)-helo" BASE_IMAGE=keppel.eu-de-1.cloud.sap/ccloud/nginx:v1.20.1-helo make release
      registry: keppel.eu-de-1.cloud.sap/ccloud
      image: controller
      tag: "v0.47.0-helo"
      digest: ""
    config:
      http-snippet: |
        server {
          listen 127.0.0.1:8025;
          server_name _;
          access_log off;

          set $proxy_upstream_name "cronus-cronus-http";
          location / {
            content_by_lua_block {
              local bal = balancer:get_balancer()
              if not bal then
                return
              end
              local peer = bal:balance()
              if not peer then
                return
              end
              local strend = string.find(peer, ":")
              if strend > 1 then
                ngx.header['Auth-Server'] = string.sub(peer, 0, strend - 1)
                ngx.header['Auth-Port'] = '1025'
                ngx.exit(ngx.HTTP_OK)
              end
            }
          }
        }
    # pod annotations are needed to recreate nginx pods on template update
    podAnnotations:
      recreate: enableRealIP
    containerPort:
      http: 80
      https: 443
    service:
      annotations:
        disco: "true"
        disco/record: my-ingress.region.cloud.com.
      ports:
        http: 80
        https: 443
      targetPorts:
        http: http
        https: https
    ingressClass: cronus-nginx
    admissionWebhooks:
      enabled: false
    customTemplate:
      configMapName: cronus-nginx-template
      configMapKey: nginx.tmpl
    extraVolumeMounts:
    - name: tls-secret-cronus
      mountPath: "/etc/ingress-controller/ssl/cronus"
      readOnly: true
    extraVolumes:
    - name: tls-secret-cronus
      secret:
        secretName: tls-secret-cronus
    affinity:
      # don't co-locate ingress controller replicas on the same node
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - topologyKey: kubernetes.io/hostname
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/component
              operator: In
              values:
                - controller
            - key: app.kubernetes.io/instance
              operator: In
              values:
                - cronus
            - key: app.kubernetes.io/name
              operator: In
              values:
                - ingress-nginx

simulator:
  enabled: true
  image:
    name: cronus-exporter-repository
    pullPolicy: IfNotPresent
    tag: latest
    imagePullSecrets: []
  statefulSet:
    enabled: true
    podManagementPolicy: OrderedReady
    annotations: {}
    labels: {}
    headless:
      annotations: {}
      labels: {}
      servicePort: 80
  updateStrategy: RollingUpdate
  replicas: 1
  nebula: 
  cronus:
  remote: 
  remoteRegion:
  remotePassword:
  slack: slack-url
  recipient: recipient-email
  cronuscli: cronuscli
  timeWaitInterval: 60
  shellToUse: bash
  projectDomainName: project-domain
  projectName: project-name

exporter:
  duration: "10m"
  period: 10
  loopInterval: 10
  pushgatewayUrl: http://localhost:9091
