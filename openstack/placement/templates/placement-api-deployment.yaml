kind: Deployment
apiVersion: apps/v1

metadata:
  name: placement-api
  labels:
    system: openstack
    type: api
    component: placement
spec:
  replicas: {{ .Values.pod.replicas.placement }}
  revisionHistoryLimit: {{ .Values.pod.lifecycle.upgrades.deployments.revision_history }}
  strategy:
    type: {{ .Values.pod.lifecycle.upgrades.deployments.podReplacementStrategy }}
    {{ if eq .Values.pod.lifecycle.upgrades.deployments.podReplacementStrategy "RollingUpdate" }}
    rollingUpdate:
      maxUnavailable: {{ .Values.pod.lifecycle.upgrades.deployments.rollingUpdate.maxUnavailable }}
      maxSurge: {{ .Values.pod.lifecycle.upgrades.deployments.rollingUpdate.maxSurge }}
    {{ end }}
  selector:
    matchLabels:
      name: placement-api
  template:
    metadata:
      labels:
        name: placement-api
{{ tuple . "placement" "api" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 8 }}
        alert-tier: os
        alert-service: placement
      annotations:
        configmap-etc-hash: {{ include (print $.Template.BasePath "/etc-configmap.yaml") . | sha256sum }}
        secrets-hash: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- if .Values.proxysql.mode }}
        prometheus.io/scrape: "true"
        prometheus.io/targets: {{ required ".Values.alerts.prometheus missing" .Values.alerts.prometheus | quote }}
        {{- end }}
        {{- include "utils.linkerd.pod_and_service_annotation" . | indent 8 }}
    spec:
{{ tuple . "placement" "api" | include "kubernetes_pod_anti_affinity" | indent 6 }}
      {{- include "utils.proxysql.pod_settings" . | indent 6 }}
      initContainers:
      {{- tuple . (dict "service" (include "db_name" .) "jobs" (tuple . "db-migrate" | include "job_name") ) | include "utils.snippets.kubernetes_entrypoint_init_container" | indent 6 }}
      containers:
      - name: placement-api
        image: {{ required ".Values.global.registry is missing" .Values.global.registry}}/loci-placement:{{.Values.imageVersion | required "Please set .imageVersion or similar" }}
        imagePullPolicy: IfNotPresent
        command:
        - dumb-init
        - uwsgi
        - --ini
        - /etc/placement/uwsgi.ini
        env:
        {{- if .Values.sentry.enabled }}
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: sentry
              key: {{ .Chart.Name }}.DSN.python
        {{- end }}
        {{- if .Values.python_warnings }}
        - name: PYTHONWARNINGS
          value: {{ .Values.python_warnings | quote }}
        {{- end }}
        lifecycle:
          preStop:
              {{- include "utils.snippets.pre_stop_graceful_shutdown" . | indent 14 }}
        livenessProbe:
          httpGet:
            path: /
            port: {{.Values.global.placementApiPortInternal}}
          initialDelaySeconds: 60
          timeoutSeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: {{.Values.global.placementApiPortInternal}}
          initialDelaySeconds: 15
          timeoutSeconds: 5
        resources:
{{ toYaml .Values.pod.resources.placement | indent 10 }}
        ports:
        - name: placement-api
          containerPort: {{.Values.global.placementApiPortInternal}}
        volumeMounts:
        - mountPath: /etc/placement
          name: placement-etc
        - mountPath: /etc/placement/placement.conf.d
          name: placement-etc-confd
        {{- include "utils.proxysql.volume_mount" . | indent 8 }}
        {{- include "utils.trust_bundle.volume_mount" . | indent 8 }}
      {{- include "utils.proxysql.container" . | indent 6 }}
      volumes:
      - name: placement-etc
        configMap:
          name: placement-etc
      - name: placement-etc-confd
        secret:
          secretName: placement-etc
      {{- include "utils.proxysql.volumes" . | indent 6 }}
      {{- include "utils.trust_bundle.volumes" . | indent 6 }}
