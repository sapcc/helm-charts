kind: Deployment
apiVersion: apps/v1

metadata:
  name: surveyor-worker

spec:
  revisionHistoryLimit: 5
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      name: surveyor-worker
  template:
    metadata:
      labels:
        name: surveyor-worker
        app.kubernetes.io/name: surveyor-worker
      annotations:
        kubectl.kubernetes.io/default-container: worker
        prometheus.io/scrape: "true"
        prometheus.io/targets: {{ .Values.prometheus.target }}
    spec:
      volumes:
        - name: config
          configMap:
            name: surveyor-etc
        - name: cache
          persistentVolumeClaim:
            claimName: surveyor-cache
      initContainers:
        - name: init-fs-ownership
          image: {{ .Values.global.registry }}/shared-app-images/alpine-busybox:3.22-latest
          imagePullPolicy: Always
          command: [ /bin/sh ]
          args: [ -c, 'chown -R 4200:4200 /var/cache/surveyor' ]
          volumeMounts:
            - mountPath: /var/cache/surveyor
              name: cache
          # ^ To the best of my knowledge, Kubernetes does not offer a builtin facility for this.
          # Technically, there is spec.securityPolicy.fsGroup, but that seems to be intended for volume sources that use a non-root GID in fresh volumes, which ours do not:
          # ```
          # stat /var/cache/surveyor | grep Uid
          # Access: (0755/drwxr-xr-x)  Uid: (    0/    root)   Gid: (    0/    root)
          # ```
      containers:
        - name: worker
          image: {{ include "surveyor_image" . }}
          imagePullPolicy: IfNotPresent
          args: [ worker ]
          env: {{ include "surveyor_environment" . | indent 12 }}
            - name: SURVEYOR_CONFIG_PATH
              value: /etc/surveyor/config.json
            - name: SURVEYOR_GIT_CACHE_DIR
              value: /var/cache/surveyor
            {{- range (keys .Values.surveyor.secrets | sortAlpha) }}
            - name: {{ quote . }}
              valueFrom:
                secretKeyRef:
                  name: surveyor-worker
                  key:  {{ quote . }}
            {{- end }}
          securityContext:
            runAsNonRoot: true
          volumeMounts:
            - mountPath: /etc/surveyor
              name: config
            - mountPath: /var/cache/surveyor
              name: cache
          ports:
            - name: metrics # this specific name is required for Prometheus scraping
              containerPort: 8080
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: 8080
            timeoutSeconds: 10
            periodSeconds: 60
            initialDelaySeconds: 60
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: 8080
            timeoutSeconds: 5
            periodSeconds: 5
          resources:
            # TODO: adjust once we have some operating experience
            requests:
              cpu: "100m"
              memory: "256Mi"
            limits:
              cpu: "1"
              memory: "256Mi"
