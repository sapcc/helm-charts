global:
  region:
  domain:
  clusterType: metal

  rbac:
    create: true

# Disable the prometheus-operator kube-state-metrics sub-chart. We deploy independently. See below.
kubeStateMetrics:
  enabled: false

kube-prometheus-stack:
  nameOverride: prometheus
  fullnameOverride: prometheus
  # Never manage CRDs. They are deployed via prometheus-crds Helm chart.
  manageCrds: false

  prometheusOperator:
    image:
      repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/sapcc/prometheus-operator
      tag: v0.44.0

    prometheusConfigReloaderImage:
      repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/sapcc/prometheus-config-reloader
      tag: v0.44.0

    # Both admissionWebhooks and tls requires admissionregistration.k8s.io/v1 .
    admissionWebhooks:
      enabled: false
    tls:
      enabled: false

    createCustomResource: false
    service:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/targets: "kubernetes"
        prometheus.io/port: "8080"
    serviceAccount:
      create: true
    tlsProxy:
      enabled: false

  operator:
    serviceAccountName: default
  # Disable creation of default aggregation and alerting rules.
  defaultRules:
    create: false
  # Disable the Prometheus instance. We deploy our own Prometheis.
  prometheus:
    enabled: false
  # Disable the Alertmanager instance. We deploy our own Alertmanagers.
  alertmanager:
    enabled: false
  # Disable all exporters.
  kubeApiServer:
    enabled: false
  kubelet:
    enabled: false
  kubeControllerManager:
    enabled: false
  coreDns:
    enabled: false
  kubeDns:
    enabled: false
  kubeEtcd:
    enabled: false
  kubeScheduler:
    enabled: false
  nodeExporter:
    enabled: false
  grafana:
    enabled: false

  kube-state-metrics:
    resources:
      requests:
        memory: 150Mi
        cpu: 100m

absent-metrics-operator:
  enabled: true

kube-state-metrics:
  image:
    repository: keppel.global.cloud.sap/ccloud-k8sgcr-mirror/kube-state-metrics/kube-state-metrics

  podSecurityPolicy:
    enabled: false

  prometheusScrape: false

  collectors:
    # Not useful.
    # - certificatesigningrequests
    # - configmaps
    - cronjobs
    - daemonsets
    - deployments
    - endpoints
    - horizontalpodautoscalers
    # - ingresses
    - jobs
    - limitranges
    # - mutatingwebhookconfigurations
    - namespaces
    - networkpolicies
    - nodes
    - persistentvolumeclaims
    - persistentvolumes
    - poddisruptionbudgets
    - pods
    - replicasets
    - replicationcontrollers
    - resourcequotas
    # - secrets
    - services
    - statefulsets
    - storageclasses
    # - validatingwebhookconfigurations
    - volumeattachments
    - verticalpodautoscalers

  customLabels:
    app: kube-state-metrics

  prometheus:
    monitor:
      enabled: false
      honorLabels: true
      additionalLabels:
        prometheus: collector-kubernetes

  resources:
    requests:
      memory: 150Mi
      cpu: 100m

# Values for operated Prometheus collector.
prometheus-collector:
  name: collector-kubernetes

  retentionTime: 1h

  additionalScrapeConfigs:
    name: k8s-collector-additional-scrape-config
    key: scrape-config.yaml

  ingress:
    enabled: true
    hosts:
      - prometheus-collector-kubernetes
      - prometheus-collector.metal

  # Store in memory.
  persistence:
    enabled: false

  serviceAccount:
    create: false
    name: default

  # Discover targets with `prometheus.io/targets=kubernetes` annotation as well.
  serviceDiscoveries:
    additionalTargets:
      - kubernetes
    endpoints:
      enabled: true
    pods:
      enabled: false
    probes:
      enabled: true
    kubeAPIServer:
      enabled: true
    cAdvisor:
      enabled: true
    kubelet:
      enabled: true
    nodeExporter:
      enabled: true

  thanos:
    enabled: false

# Values for Prometheus frontend.
prometheus-frontend:
  name: kubernetes

  retentionTime: 21d

  additionalScrapeConfigs:
    name: k8s-frontend-additional-scrape-config
    key: scrape-config.yaml

  ingress:
    enabled: true
    hosts:
      - prometheus-kubernetes
      - prometheus.metal

  internalIngress:
    enabled: true
    hosts:
      - prometheus-kubernetes-internal
      - prometheus-internal.metal

  # Store in memory.
  persistence:
    enabled: true
    size: 300Gi

  serviceAccount:
    create: false
    name: default

  # No service discoveries. Only federate from collector Prometheus.
  serviceDiscoveries:
    endpoints:
      enabled: false
    pods:
      enabled: false
    probes:
      enabled: true
    kubeAPIServer:
      enabled: false
    cAdvisor:
      enabled: false
    kubelet:
      enabled: false
    nodeExporter:
      enabled: false
    kubeDNS:
      enabled: false

  # Send alerts to these alertmanagers.
  alertmanagers:
    # Enabled via secrets.
    authentication:
      enabled: false

    hosts:
      - alertmanager-internal.scaleout.eu-de-1.cloud.sap
      - alertmanager-internal.scaleout.eu-nl-1.cloud.sap

  thanos:
    enabled: false

# Deploy basic set of Prometheus alert and aggregation rules for monitoring Kubernetes.
prometheus-kubernetes-rules:
  prometheusName: kubernetes
  prometheusCollectorName: collector-kubernetes
  tier: k8s

prometheus-node-exporter:
  image:
    repository: prom/node-exporter

  serviceAccount:
    create: true

  extraArgs:
    - --collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)
    - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|bpf|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tmpfs|tracefs)$$
    - --collector.processes
    - --path.rootfs=/rootfs
    - --collector.systemd.enable-task-metrics
    - --collector.systemd.enable-restarts-metrics
    - --collector.systemd.enable-start-time-metrics

  extraHostVolumeMounts:
    - name: dbus
      hostPath: /var/run/dbus/system_bus_socket
      mountPath: /var/run/dbus/system_bus_socket
      readOnly: true
    - name: rootfs
      hostPath: /
      mountPath: /rootfs
      readOnly: true
      mountPropagation: HostToContainer

  resources:
    requests:
      memory: 100Mi
      cpu: 100m

kube-state-metrics-exporter:
  prometheusName: collector-kubernetes

prober-static:
  prometheusName: kubernetes

http-keep-alive-monitor:
  alert:
    ignore_ingress_names:
      - cfm
