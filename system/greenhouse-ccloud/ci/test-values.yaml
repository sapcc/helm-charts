global:
  dockerHubMirror:
  gcrIoMirror:
  ghcrIoMirror:
  registryK8sIoMirror:
  quayIoMirror:

mappedOrgAdminIdPGroup: ccloudAdminGroup

pluginPreset:
  enabled: true
cephOperations:
  enabled: true
kvmMonitoring:
  enabled: true
  serviceMonitorLabels:
    foo: bar
    baz: foo
teams:
  team1:
    description: Team number 1
    mappedIdPGroup: team1
    isSupportGroup: true
  team2:
    description: Team number 2
    mappedIdPGroup: team2
    isSupportGroup: false
  team3:
    description: Team number 2
    mappedIdPGroup: team three
    isSupportGroup: false

teamRoleBindings:
  - teamRef: team1
    teamRoleRef: role1
    clusterSelector:
      matchLabels:
        cluster-type: compute
        environment: production
  - teamRef: team2
    teamRoleRef: role1
    clusterSelector:
      matchLabels:
        cluster-type: compute
        environment: labs
    namespaces:
      - foo
      - bar
  - teamRef: team2
    teamRoleRef: role1
    clusterSelector:
      matchLabels:
        cluster-type: compute
        environment: labs
    usernames:
      - ci-user
    namespaces:
      - foo
      - bar

oidc:
  issuer: https://top.secret
  redirectURL: https://top.secret/redirect
  clientID: topSecret!
  clientSecret: topSecret!

scim:
  baseURL: https://top.secret/scim
  username: topSecret!
  password: topSecret!123

alerts:
  enabled: true
  alertmanager:
    hosts:
      - "alertmanager.foo.bar"

certManager:
  webhook:
    timeoutSeconds: 15

digicert:
  enabled: true
  provisioner:
    apiToken: "TopSecret!"
    organizationID: "1337"
    organizationUnits:
      - MyUnit

kubeconfigGenerator:
  enabled: true
  oidc:
    clientID: "TopSecret!"
    clientSecret: "TopSecret!"
  swift:
    username: "technical-user"
    domain: "my-domain"
    projectID: "1234-project-id"
    container: "container-one"
    region: "testing"
    password: "TopSecret!"

kubeMonitoring:
  enabled: true
  ssoCert: "TopSecret!"
  ssoKey: "TopSecret!"
  services:
    cephClusters:
      support_group: storage
      cluster_type: storage
      clusters:
        cluster-1:
          thanos: true
        cluster-2:
          thanos: true
    computeClusters:
      support_group: compute
      cluster_type: compute
      extraSpecs:
        - name: kubeMonitoring.crds.enabled
          value: false
      clusters:
        cluster-1:
          thanos: false
        cluster-2:
          region: test


teams2slack:
  enabled: true
  dryRun: false
  endpoint: https://api.tld
  infoChannelID: channelID
  slackToken: topSecret!
  groupNamePrefix: CCloud
  groupNameSuffix: greenhouse-team

doop:
  enabled: true
  displayName: Global
  apiEndpoint: https://doop.tld
  showDebugSeverities: false

doopKubernikus:
  enabled: true
  displayName: Kubernikus
  apiEndpoint: https://doop.kubernikus.tld
  showDebugSeverities: false

logshipping:
  clusters:
    - region: qa
      cluster: qa-cluster
      username: TopSecret!
      password: TopSecret!
    - region: qa
      cluster: qa-cluster
      username: TopSecret!

openTelemetry:
  enabled: true
  prometheus:
    additionalLabels:
      testkey1: test1
      testkey2: test2
  clusters:
    - region: "qa-region"
      cluster: "qa-cluster"
      openSearchLogs:
        failover_username_a: TopSecret!
        failover_password_a: TopSecret!
        failover_username_b: TopSecret!
        failover_password_b: TopSecret!
        endpoint: opensearch
        index: logs
      cephConfig:
        enabled: true
      kvmConfig:
        enabled: false
    - region: "qa-2-region"
      cluster: "qa-2-cluster"
      openSearchLogs:
        failover_username_a: TopSecret!
        failover_password_a: TopSecret!
        failover_username_b: TopSecret!
        failover_password_b: TopSecret!
        endpoint: opensearch
        index: logs
      cephConfig:
        enabled: false
      kvmConfig:
        enabled: true

ingressPlugins:
  - cluster: foo
    externalIP: 1.1.1.1
    recordName: ss.aa.rr
  - cluster: bar
    recordName: ss.aa.rr

discoPlugins:
  - cluster: hase
    region: qa
    password: superSecret

opensearch:
  enabled: true
  additionalRuleLabels:
    testkey1: test1
  dashboards:
    service:
      labels:
        testkey2: test2
  certManager:
    digicert:
      group: certmanager.test.sap
      kind: DigicertIssuer
      name: test-digicert-issuer
  usersRoleBinding:
    - name: "test-role"
      users: ["logs", "logs2"]
      roles: ["test-role"]
  clusters:
    - region: "test-region-1"
      cluster: "test-cluster-1"
      endpoint:
        - opensearch-logs-client.test-cluster-1.tld
      users:
        admin:
          username: "admin1"
          password: "adminpass1"
          hash: "hash1"
        logs:
          username: "logs1"
          password: "logspass1"
        logs2:
          username: "logs21"
          password: "logs2pass1"
        dashboards:
          username: "dash1"
          password: "dashpass1"
        dashboards2:
          username: "dash21"
          password: "dash2pass1"
      ingress:
        enabled: true
        className: nginx
        annotations:
          disco: "true"
        hosts:
          - host: opensearch-logs-client.test-cluster-1.tld
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - opensearch-logs-client.test-cluster-1.tld
            secretName: opensearch-http-cert-external-1
    - region: "test-region-2"
      cluster: "test-cluster-2"
      endpoint:
        - opensearch-logs-client.test-cluster-2.tld
      users:
        admin:
          username: "admin2"
          password: "adminpass2"
          hash: "hash2"
        logs:
          username: "logs2"
          password: "logspass2"
        logs2:
          username: "logs22"
          password: "logs2pass2"
        dashboards:
          username: "dash2"
          password: "dashpass2"
        dashboards2:
          username: "dash22"
          password: "dash2pass2"
      ingress:
        enabled: false
