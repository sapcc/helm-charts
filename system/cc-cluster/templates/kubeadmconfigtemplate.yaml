{{- range $key, $cluster := .Values.clusters }}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: {{ $key }}
  namespace: metal-{{ $key }}
spec:
  template:
    spec:
      joinConfiguration:
        nodeRegistration:
          kubeletExtraArgs:
            node-labels: kubernikus.cloud.sap/cni=true,metal3.io/uuid=${uuid},kubernetes.metal.cloud.sap/node-ip=${IP},kubernetes.metal.cloud.sap/host=${name_bmh},kubernetes.metal.cloud.sap/bb=${bb},kubernetes.metal.cloud.sap/role=${role},topology.kubernetes.io/region=${region},topology.kubernetes.io/zone=${zone} {{- if $cluster.maintenanceProfile -}} ,cloud.sap/maintenance-profile={{ $cluster.maintenanceProfile }} {{- end }}
            cloud-provider: ""
            node-ip: ${IP}
          name: ${name_bmh}
      format: ignition
      ignition:
        containerLinuxConfig:
          additionalConfig: |-
            storage:
              directories:
              - path: /etc/kubernetes/manifests
                overwrite: true
              files:
              - path: /etc/containerd/config.toml
                filesystem: root
                mode: 0744
                contents:
                  inline: |
                    ## template: jinja
  
                    # Use config version 2 to enable new configuration fields.
                    # Config file is parsed as version 1 by default.
                    version = 2
  
                    imports = ["/etc/containerd/conf.d/*.toml"]
  
                    [plugins]
                      [plugins."io.containerd.grpc.v1.cri"]
                        sandbox_image = {{ $.Values.image.pause | quote }}
                        enable_unprivileged_icmp = true
                        enable_unprivileged_ports = true
                      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                        runtime_type = "io.containerd.runc.v2"
                      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                        SystemdCgroup = true
              - path: /opt/bin/kube.sh
                filesystem: root
                mode: 393
                contents:
                  inline: |
                    #!/bin/bash
                    set -o errexit
                    set -o pipefail

                    while true;do
                      docker run --rm -v /opt/bin:/opt/bin {{ $.Values.image.kubelet }}:v{{ $cluster.version }} cp --preserve=mode /usr/local/bin/{kubeadm,kubelet} /opt/bin/ && break
                    done

                    mount --bind /opt/bin /usr/local/bin

                    sed -i '/After\|Requires/d' /etc/systemd/system/kubeadm.service.d/10-flatcar.conf
              - path: /etc/systemd/resolved.conf
                filesystem: root
                mode: 420
                overwrite: true
                contents:
                  inline: |
                    [Resolve]
                    DNS={{ $.Values.dnsServers }}
                    LLMNR=false
                    DNSStubListener=no
              - path: /etc/systemd/timesyncd.conf
                filesystem: root
                mode: 420
                overwrite: true
                contents:
                  inline: |
                    [Time]
                    NTP={{ $.Values.ntpServers }}
              - path: /etc/crictl.yaml
                filesystem: root
                mode: 0644
                contents:
                  inline: |
                    runtime-endpoint: unix:///run/containerd/containerd.sock
              - path: /etc/profile.d/envs.sh
                filesystem: root
                mode: 0644
                contents:
                  inline: |
                    export CONTAINERD_NAMESPACE=k8s.io
              - path: /etc/systemd/network/50-kubernikus.netdev
                filesystem: root
                mode: 0644
                contents:
                  inline: |
                    [NetDev]
                    Description=Kubernikus Dummy Interface
                    Name=kubernikus
                    Kind=dummy
              - path: /etc/systemd/network/51-kubernikus.network
                filesystem: root
                mode: 0644
                contents:
                  inline: |
                    [Match]
                    Name=kubernikus
                    [Network]
                    DHCP=no
                    Address=1.1.1.1/32
              - path: /etc/systemd/network/sync.netdev
                filesystem: root
                mode: 0644
                contents:
                  inline: |
                    [NetDev]
                    Name=sync
                    Kind=vlan
                    [VLAN]
                    Id={{ $.Values.syncVlan }}
              - path: /etc/systemd/network/sync.network
                filesystem: root
                mode: 0644
                contents:
                  inline: |
                    [Match]
                    Name=sync
                    [Network]
                    DHCP=no
              - path: /etc/ssl/certs/SAPGlobalRootCA.pem
                filesystem: root
                mode: 0644
                contents:
                  inline: |
                    -----BEGIN CERTIFICATE-----
                    MIIGTDCCBDSgAwIBAgIQXQPZPTFhXY9Iizlwx48bmTANBgkqhkiG9w0BAQsFADBO
                    MQswCQYDVQQGEwJERTERMA8GA1UEBwwIV2FsbGRvcmYxDzANBgNVBAoMBlNBUCBB
                    RzEbMBkGA1UEAwwSU0FQIEdsb2JhbCBSb290IENBMB4XDTEyMDQyNjE1NDE1NVoX
                    DTMyMDQyNjE1NDYyN1owTjELMAkGA1UEBhMCREUxETAPBgNVBAcMCFdhbGxkb3Jm
                    MQ8wDQYDVQQKDAZTQVAgQUcxGzAZBgNVBAMMElNBUCBHbG9iYWwgUm9vdCBDQTCC
                    AiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAOrxJKFFA1eTrZg1Ux8ax6n/
                    LQRHZlgLc2FZpfyAgwvkt71wLkPLiTOaRb3Bd1dyydpKcwJLy0dzGkunzNkPRSFz
                    bKy2IPS0RS45hUCCPzhGnqQM6TcDYWeWpSUvygqujgb/cAG0mSJpvzAD3SMDQ+VJ
                    Az5Ryq4IrP7LkfCb63LKZxLsHEkEcNKoGPsSsd4LTwuEIyM3ZHcCoA97m6hvgLWV
                    GLzLIQMEblkswqX29z7JZH+zJopoqZB6eEogE2YpExkw52PufytEslDY3dyVubjp
                    GlvD4T03F2zm6CYleMwgWbATLVYvk2I9WfqPAP+ln2IU9DZzegSMTWHCE+jizaiq
                    b5f5s7m8f+cz7ndHSrz8KD/S9iNdWpuSlknHDrh+3lFTX/uWNBRs5mC/cdejcqS1
                    v6erflyIfqPWWO6PxhIs49NL9Lix3ou6opJo+m8K757T5uP/rQ9KYALIXvl2uFP7
                    0CqI+VGfossMlSXa1keagraW8qfplz6ffeSJQWO/+zifbfsf0tzUAC72zBuO0qvN
                    E7rSbqAfpav/o010nKP132gbkb4uOkUfZwCuvZjA8ddsQ4udIBRj0hQlqnPLJOR1
                    PImrAFC3PW3NgaDEo9QAJBEp5jEJmQghNvEsmzXgABebwLdI9u0VrDz4mSb6TYQC
                    XTUaSnH3zvwAv8oMx7q7AgMBAAGjggEkMIIBIDAOBgNVHQ8BAf8EBAMCAQYwEgYD
                    VR0TAQH/BAgwBgEB/wIBATAdBgNVHQ4EFgQUg8dB/Q4mTynBuHmOhnrhv7XXagMw
                    gdoGA1UdIASB0jCBzzCBzAYKKwYBBAGFNgRkATCBvTAmBggrBgEFBQcCARYaaHR0
                    cDovL3d3dy5wa2kuY28uc2FwLmNvbS8wgZIGCCsGAQUFBwICMIGFHoGCAEMAZQBy
                    AHQAaQBmAGkAYwBhAHQAZQAgAFAAbwBsAGkAYwB5ACAAYQBuAGQAIABDAGUAcgB0
                    AGkAZgBpAGMAYQB0AGkAbwBuACAAUAByAGEAYwB0AGkAYwBlACAAUwB0AGEAdABl
                    AG0AZQBuAHQAIABvAGYAIABTAEEAUAAgAEEARzANBgkqhkiG9w0BAQsFAAOCAgEA
                    0HpCIaC36me6ShB3oHDexA2a3UFcU149nZTABPKT+yUCnCQPzvK/6nJUc5I4xPfv
                    2Q8cIlJjPNRoh9vNSF7OZGRmWQOFFrPWeqX5JA7HQPsRVURjJMeYgZWMpy4t1Tof
                    lF13u6OY6xV6A5kQZIISFj/dOYLT3+O7wME5SItL+YsNh6BToNU0xAZt71Z8JNdY
                    VJb2xSPMzn6bNXY8ioGzHlVxfEvzMqebV0KY7BTXR3y/Mh+v/RjXGmvZU6L/gnU7
                    8mTRPgekYKY8JX2CXTqgfuW6QSnJ+88bHHMhMP7nPwv+YkPcsvCPBSY08ykzFATw
                    SNoKP1/QFtERVUwrUXt3Cufz9huVysiy23dEyfAglgCCRWA+ZlaaXfieKkUWCJaE
                    Kw/2Jqz02HDc7uXkFLS1BMYjr3WjShg1a+ulYvrBhNtseRoZT833SStlS/jzZ8Bi
                    c1dt7UOiIZCGUIODfcZhO8l4mtjh034hdARLF0sUZhkVlosHPml5rlxh+qn8yJiJ
                    GJ7CUQtNCDBVGksVlwew/+XnesITxrDjUMu+2297at7wjBwCnO93zr1/wsx1e2Um
                    Xn+IfM6K/pbDar/y6uI9rHlyWu4iJ6cg7DAPJ2CCklw/YHJXhDHGwheO/qSrKtgz
                    PGHZoN9jcvvvWDLUGtJkEotMgdFpEA2XWR83H4fVFVc=
                    -----END CERTIFICATE-----
              - path: /etc/ssl/certs/SAPNetCA_G2.pem
                filesystem: root
                mode: 0644
                contents:
                  inline: |
                    -----BEGIN CERTIFICATE-----
                    MIIGPTCCBCWgAwIBAgIKYQ4GNwAAAAAADDANBgkqhkiG9w0BAQsFADBOMQswCQYD
                    VQQGEwJERTERMA8GA1UEBwwIV2FsbGRvcmYxDzANBgNVBAoMBlNBUCBBRzEbMBkG
                    A1UEAwwSU0FQIEdsb2JhbCBSb290IENBMB4XDTE1MDMxNzA5MjQ1MVoXDTI1MDMx
                    NzA5MzQ1MVowRDELMAkGA1UEBhMCREUxETAPBgNVBAcMCFdhbGxkb3JmMQwwCgYD
                    VQQKDANTQVAxFDASBgNVBAMMC1NBUE5ldENBX0cyMIICIjANBgkqhkiG9w0BAQEF
                    AAOCAg8AMIICCgKCAgEAjuP7Hj/1nVWfsCr8M/JX90s88IhdTLaoekrxpLNJ1W27
                    ECUQogQF6HCu/RFD4uIoanH0oGItbmp2p8I0XVevHXnisxQGxBdkjz+a6ZyOcEVk
                    cEGTcXev1i0R+MxM8Y2WW/LGDKKkYOoVRvA5ChhTLtX2UXnBLcRdf2lMMvEHd/nn
                    KWEQ47ENC+uXd6UPxzE+JqVSVaVN+NNbXBJrI1ddNdEE3/++PSAmhF7BSeNWscs7
                    w0MoPwHAGMvMHe9pas1xD3RsRFQkV01XiJqqUbf1OTdYAoUoXo9orPPrO7FMfXjZ
                    RbzwzFtdKRlAFnKZOVf95MKlSo8WzhffKf7pQmuabGSLqSSXzIuCpxuPlNy7kwCX
                    j5m8U1xGN7L2vlalKEG27rCLx/n6ctXAaKmQo3FM+cHim3ko/mOy+9GDwGIgToX3
                    5SQPnmCSR19H3nYscT06ff5lgWfBzSQmBdv//rjYkk2ZeLnTMqDNXsgT7ac6LJlj
                    WXAdfdK2+gvHruf7jskio29hYRb2//ti5jD3NM6LLyovo1GOVl0uJ0NYLsmjDUAJ
                    dqqNzBocy/eV3L2Ky1L6DvtcQ1otmyvroqsL5JxziP0/gRTj/t170GC/aTxjUnhs
                    7vDebVOT5nffxFsZwmolzTIeOsvM4rAnMu5Gf4Mna/SsMi9w/oeXFFc/b1We1a0C
                    AwEAAaOCASUwggEhMAsGA1UdDwQEAwIBBjAdBgNVHQ4EFgQUOCSvjXUS/Dg/N4MQ
                    r5A8/BshWv8wHwYDVR0jBBgwFoAUg8dB/Q4mTynBuHmOhnrhv7XXagMwSwYDVR0f
                    BEQwQjBAoD6gPIY6aHR0cDovL2NkcC5wa2kuY28uc2FwLmNvbS9jZHAvU0FQJTIw
                    R2xvYmFsJTIwUm9vdCUyMENBLmNybDBWBggrBgEFBQcBAQRKMEgwRgYIKwYBBQUH
                    MAKGOmh0dHA6Ly9haWEucGtpLmNvLnNhcC5jb20vYWlhL1NBUCUyMEdsb2JhbCUy
                    MFJvb3QlMjBDQS5jcnQwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwEgYDVR0T
                    AQH/BAgwBgEB/wIBADANBgkqhkiG9w0BAQsFAAOCAgEAGdBNALO509FQxcPhMCwE
                    /eymAe9f2u6hXq0hMlQAuuRbpnxr0+57lcw/1eVFsT4slceh7+CHGCTCVHK1ELAd
                    XQeibeQovsVx80BkugEG9PstCJpHnOAoWGjlZS2uWz89Y4O9nla+L9SCuK7tWI5Y
                    +QuVhyGCD6FDIUCMlVADOLQV8Ffcm458q5S6eGViVa8Y7PNpvMyFfuUTLcUIhrZv
                    eh4yjPSpz5uvQs7p/BJLXilEf3VsyXX5Q4ssibTS2aH2z7uF8gghfMvbLi7sS7oj
                    XBEylxyaegwOBLtlmcbII8PoUAEAGJzdZ4kFCYjqZBMgXK9754LMpvkXDTVzy4OP
                    emK5Il+t+B0VOV73T4yLamXG73qqt8QZndJ3ii7NGutv4SWhVYQ4s7MfjRwbFYlB
                    z/N5eH3veBx9lJbV6uXHuNX3liGS8pNVNKPycfwlaGEbD2qZE0aZRU8OetuH1kVp
                    jGqvWloPjj45iCGSCbG7FcY1gPVTEAreLjyINVH0pPve1HXcrnCV4PALT6HvoZoF
                    bCuBKVgkSSoGgmasxjjjVIfMiOhkevDya52E5m0WnM1LD3ZoZzavsDSYguBP6MOV
                    ViWNsVHocptphbEgdwvt3B75CDN4kf6MNZg2/t8bRhEQyK1FRy8NMeBnbRFnnEPe
                    7HJNBB1ZTjnrxJAgCQgNBIQ=
                    -----END CERTIFICATE-----
              - path: /etc/sysctl.d/10-enable-icmp-redirects.conf
                filesystem: root
                mode: 0644
                contents:
                  inline: |-
                    net.ipv4.conf.all.accept_redirects=1
              - path: /etc/sysctl.d/20-inotify-max-user.conf
                filesystem: root
                mode: 0644
                contents:
                  inline: |-
                    fs.inotify.max_user_instances=8192
                    fs.inotify.max_user_watches=524288
              - path: /etc/flatcar/update.conf
                filesystem: root
                mode: 0644
                contents:
                  inline: |-
                    REBOOT_STRATEGY="off"
              - path: /etc/modules-load.d/br_netfilter.conf
                filesystem: root
                mode: 0644
                contents:
                  inline: br_netfilter
              - path: /etc/sysctl.d/30-br_netfilter.conf
                filesystem: root
                mode: 0644
                contents:
                  inline: |
                    net.bridge.bridge-nf-call-ip6tables = 1
                    net.bridge.bridge-nf-call-iptables = 1
              - path: /opt/network_up.sh
                filesystem: root
                mode: 0744
                contents:
                  inline: |
                    #!/bin/bash
                    PATH=$PATH:/bin
                    
                    /usr/bin/mkdir --parent /run/metadata
                    OUTPUT=/run/metadata/coreos

                    # mount configdrive
                    mkdir /tmp/configdrive
                    mount -o ro /dev/disk/by-label/config-2 /tmp/configdrive
                    CONFIGDRIVE=/tmp/configdrive/openstack/latest

                    # build envs from BaremetalHost CR and metadata
                    for s in $(cat $CONFIGDRIVE/meta_data.json | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
                      echo $s >> $OUTPUT
                      export $s
                    done

                    hostnamectl set-hostname $name_bmh
                    echo $name_bmh>/etc/hostname
                    
                    BONDFILTER=$(cat $CONFIGDRIVE/network_data.json | jq -r .networks[0].link)
                    VLAN=$(cat $CONFIGDRIVE/network_data.json | jq -r .networks[0].id)
                    IPADDRESS=$(cat $CONFIGDRIVE/network_data.json | jq -r .networks[0].ip_address)
                    GATEWAY=$(cat $CONFIGDRIVE/network_data.json | jq -r .networks[0].routes[0].gateway)
                    
                    echo "IP=$(echo $IPADDRESS | cut -d/ -f1)" >> ${OUTPUT}

                    /bin/cat > /etc/systemd/network/60-interfaces.network << EOF
                    [Match]
                    Name=$BONDFILTER
                    [Network]
                    Bond=bond0
                    EOF
                    
                    /bin/cat > /etc/systemd/network/50-bond0.network << EOF
                    [Match]
                    Name=bond0
                    [Network]
                    VLAN=vlan_$VLAN
                    VLAN=sync
                    DHCP=no
                    EOF

                    /bin/cat > /etc/systemd/network/bond0.netdev << EOF
                    [NetDev]
                    Name=bond0
                    Kind=bond
                    MTUBytes=8950
                    [Bond]
                    Mode=802.3ad
                    MIIMonitorSec=1s
                    TransmitHashPolicy=layer3+4
                    LACPTransmitRate=fast
                    UpDelaySec=3s
                    DownDelaySec=3s
                    MinLinks=1
                    EOF

                    /bin/cat > /etc/systemd/network/vlan_$VLAN.netdev << EOF
                    [NetDev]
                    Name=vlan_$VLAN
                    Kind=vlan
                    [VLAN]
                    Id=$VLAN
                    EOF

                    /bin/cat > /etc/systemd/network/vlan_$VLAN.network << EOF
                    [Match]
                    Name=vlan_$VLAN
                    [Network]
                    DHCP=no
                    Address=$IPADDRESS
                    Gateway=$GATEWAY
                    EOF

                    umount /tmp/configdrive
            systemd:
              units:
              - name: kubeadm.service
                enabled: true
                dropins:
                - name: 10-flatcar.conf
                  contents: |
                    [Unit]
                    # kubeadm must run after coreos-metadata populated /run/metadata directory.
                    Requires=kube_up.service
                    After=kube_up.service
                    [Service]
                    # Make metadata environment variables available for pre-kubeadm commands.
                    EnvironmentFile=/run/metadata/*
              - name: kubelet.service
                enable: true
                contents: |
                  [Unit]
                  Description=kubelet: The Kubernetes Node Agent
                  Documentation=https://kubernetes.io/docs/
                  Wants=network-online.target
                  After=network-online.target

                  [Service]
                  ExecStart=/opt/bin/kubelet
                  Restart=always
                  StartLimitInterval=0
                  RestartSec=10

                  [Install]
                  WantedBy=multi-user.target
                dropins:
                - name: 10-kubeadm.conf
                  contents: |
                    [Service]
                    Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
                    Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"
                    # This is a file that "kubeadm init" and "kubeadm join" generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically
                    EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env
                    # This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use
                    # the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.
                    EnvironmentFile=-/etc/sysconfig/kubelet
                    ExecStart=
                    ExecStart=/opt/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS
              - name: updatecertificates.service
                command: start
                enable: true
                contents: |
                  [Unit]
                  Description=Update the certificates w/ self-signed root CAs
                  ConditionPathIsSymbolicLink=!/etc/ssl/certs/381107d7.0
                  Before=early-docker.service docker.service
                  [Service]
                  ExecStart=/usr/sbin/update-ca-certificates
                  RemainAfterExit=yes
                  Type=oneshot
                  [Install]
                  WantedBy=multi-user.target
              - name: containerd.service
                enable: true
                dropins:
                  - name: 10-custom-config.conf
                    contents: |
                      [Service]
                      Environment=PATH=/opt/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin
                      ExecStartPre=mkdir -p /run/docker/libcontainerd
                      ExecStartPre=ln -fs /run/containerd/containerd.sock /run/docker/libcontainerd/docker-containerd.sock
                      ExecStart=
                      ExecStart=/usr/bin/containerd --config /etc/containerd/config.toml
              - name: docker.service
                enable: true
                dropins:
                  - name: 20-docker-opts.conf
                    contents: |
                      [Service]
                      Environment="DOCKER_OPTS=--iptables=false --bridge=none"
              - name: audit-rules.service
                mask: true
                enable: false
              - name: flatcar-openstack-hostname.service
                enabled: false
                mask: true
              - name: user-configdrive.service
                enabled: false
                mask: true
              - name: locksmithd.service
                enabled: false
                mask: true
              - name: network_up.service
                enabled: true
                contents: |
                  [Unit]
                  Description=Service that applies network metadata
                  Before=network-pre.target
                  Wants=network-pre.target
                  Wants=systemd-modules-load.service
                  After=systemd-modules-load.service 
                  [Service]
                  Type=oneshot
                  Restart=on-failure
                  RemainAfterExit=yes
                  ExecStart=/opt/network_up.sh
                  ExecStartPost=systemctl disable network_up.service
                  [Install]
                  WantedBy=network.target
              - name: kube_up.service
                enabled: true
                contents: |
                  [Unit]
                  Description=Install kube
                  Wants=network-online.target
                  Wants=network_up.target
                  After=network-online.target
                  After=network_up.target
                  [Service]
                  Type=oneshot
                  ExecStartPre=/usr/bin/sleep 10
                  ExecStart=/opt/bin/kube.sh
                  ExecStartPost=systemctl disable kube_up.service
              # needed to register node after kubeadm
              - name: kubelet_restart.service
                enabled: true
                contents: |
                  [Unit]
                  Description=Restart kubelet after kubeadm(join workaround)
                  Requires=kubeadm.service
                  After=kubeadm.service
                  [Service]
                  Type=oneshot
                  ExecStartPre=/usr/bin/sleep 60
                  ExecStart=systemctl restart kubelet
                  ExecStartPost=systemctl disable kubelet_restart.service
                  [Install]
                  WantedBy=multi-user.target
      preKubeadmCommands:
      - envsubst < /etc/kubeadm.yml > /etc/kubeadm.yml.tmp
      - mv /etc/kubeadm.yml.tmp /etc/kubeadm.yml
      users:
      - name: {{ $.Values.user.name }}
        passwd: {{ $.Values.user.passwordhash }}
        sshAuthorizedKeys:
        - {{ $.Values.user.key | quote }}
{{- end }}
