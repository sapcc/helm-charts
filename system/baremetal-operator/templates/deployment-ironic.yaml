---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: baremetal-operator-ironic
  namespace: {{ .Release.Namespace }}
spec:
  minReadySeconds: 10
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: ironic
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: ironic
      annotations:
        kubectl.kubernetes.io/default-container: ironic
        checksum/configmap-ironic: {{ include (print $.Template.BasePath "/configmap-ironic-config.yaml") . | sha256sum }}
        checksum/configmap-httpd: {{ include (print $.Template.BasePath "/configmap-ironic-httpd.yaml") . | sha256sum }}
    spec:
      hostNetwork: true
      containers:
      - command:
        - /opt/runironic
        envFrom:
        - secretRef:
            name: baremetal-operator-ironic-htpasswd
        - configMapRef:
            name: ironic-config
        image: "{{ $.Values.images.ironic.image }}:{{ $.Values.images.ironic.tag }}"
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - curl -sSf http://127.0.0.1:6385 || curl -sSfk https://127.0.0.1:6385
          failureThreshold: 10
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        name: ironic
        ports:
        - containerPort: {{ .Values.ironic.ironicPort }}
          name: ironic
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - curl -sSf http://127.0.0.1:6385 || curl -sSfk https://127.0.0.1:6385
          failureThreshold: 10
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsGroup: 994
          runAsUser: 997
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /shared
          name: ironic-data-volume
        - mountPath: /certs/ironic
          name: cert
          readOnly: true
        - mountPath: /opt/runironic
          name: ironic-config
          subPath: runironic
      - command:
        - /bin/runlogwatch.sh
        image: "{{ required ".Values.global.quayIoMirrorAlternateRegion is missing" $.Values.global.quayIoMirrorAlternateRegion }}/{{ $.Values.images.ironicHttpd.image }}:{{ $.Values.images.ironicHttpd.tag }}"
        imagePullPolicy: IfNotPresent
        name: ironic-log-watch
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsGroup: 994
          runAsUser: 997
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /shared
          name: ironic-data-volume
      - command:
        - /bin/runhttpd
        envFrom:
        - configMapRef:
            name: ironic-config-httpd
        - secretRef:
            name: baremetal-operator-ironic-htpasswd
        image: "{{ required ".Values.global.quayIoMirrorAlternateRegion is missing" $.Values.global.quayIoMirrorAlternateRegion }}/{{ $.Values.images.ironicHttpd.image }}:{{ $.Values.images.ironicHttpd.tag }}"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: {{ .Values.ironic.ipxePort }}
          name: ipxe
          protocol: TCP
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - curl -sSfk https://127.0.0.1:6180/images
          failureThreshold: 10
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        name: ironic-httpd
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - curl -sSfk https://127.0.0.1:6180/images
          failureThreshold: 10
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsGroup: 994
          runAsUser: 997
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /shared
          name: ironic-data-volume
        - mountPath: /certs/ipxe
          name: cert
          readOnly: true
        - mountPath: /tmp/inspector.ipxe.j2
          name: ironic-httpd
          subPath: inspector.ipxe.j2
      dnsPolicy: ClusterFirst
      initContainers:
      - command:
        - /usr/local/bin/get-resource.sh
        envFrom:
        - configMapRef:
            name: ironic-config
        image: "{{ required ".Values.global.quayIoMirrorAlternateRegion is missing" $.Values.global.quayIoMirrorAlternateRegion }}/{{ $.Values.images.ironicIpaDownloader.image }}:{{ $.Values.images.ironicIpaDownloader.tag }}"
        imagePullPolicy: IfNotPresent
        name: ironic-ipa-downloader
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsGroup: 994
          runAsUser: 997
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /shared
          name: ironic-data-volume
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 994
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationGracePeriodSeconds: 30
      volumes:
      - name: ironic-auth-config
        secret:
          defaultMode: 420
          secretName: baremetal-operator-ironic-auth-config
      - name: ironic-data-volume
        emptyDir: {}
      - name: cert
        secret:
          defaultMode: 420
          secretName: tls-ironic-service
      - configMap:
          defaultMode: 511
          name: ironic-config
        name: ironic-config
      - configMap:
          defaultMode: 511
          name: ironic-config-httpd
        name: ironic-httpd
