# Default values for sentry.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
serverReplicaCount: 1
workerReplicaCount: 1

#  SENTRY_FILESTORE_DIR
#
#secretKey: $(docker run --rm sentry config generate-secret-key)
#emailHost:
#serverEmail: '"Sentry" <root@localhost>'
#singleOrganization: false
#githubAppId:
#githubApiSecret:
#useSsl: false
#
#extraEnvVars:
#  e.g.
#  GITHUB_BASE_DOMAIN: github.example.com
#  GITHUB_API_DOMAIN: api.github.example.com
#
# initial user:
# adminEmail:
# adminPassword:
# Generate with: python -c 'import sys,uuid; sys.stdout.write(uuid.uuid4().hex+ uuid.uuid4().hex)
# adminToken:
organizationName: Monsoon
organizationSlug: monsoon
image:
  repository: sentry
  tag: 9.1.2-r3
  pullPolicy: IfNotPresent
service:
  name: sentry
  type: ClusterIP
  externalPort: 80
  internalPort: 9000
pruning_time: '0315'

ingress:
  enabled: false
#  host:
#  tls_crt:
#  tls_key:

operator:
  #sentryEndpoint: https://sentry.$region.cloud.sap/api/0/
  enabled: false
  image:
    repository: sapcc/kube-sentry
    tag: 0.2.1
    pullPolicy: IfNotPresent

postgresql:
  postgresDatabase: sentry
  persistence:
    enabled: true
    accessMode: ReadWriteMany
    size: 50Gi
  resources:
    requests:
      memory: 10Gi
      cpu: 4

redis:
  # redisPassword:
  persistence:
    enabled: true
    accessMode: ReadWriteMany
    size: 10Gi
  resources:
    requests:
      memory: 10Gi
      cpu: 2

# Deploy Sentry Prometheus alerts.
alerts:
  enabled: true
  # Name of the Prometheus to which the alerts should be assigned to.
  prometheus: openstack

pgmetrics:
  db_name: sentry
  alerts:
    large_database_size_enabled: false

  customMetrics:
    sentry_unresolved_issues:
      query: >
        SELECT o.slug AS organization, p.slug AS project, COUNT(*) FROM sentry_groupedmessage gm
          JOIN sentry_project p ON gm.project_id = p.id
          JOIN sentry_organization o ON p.organization_id = o.id
         WHERE gm.status = 0
         GROUP BY o.slug, p.slug
      metrics:
        - organization: {usage: LABEL, description: "Sentry organization"}
        - project:      {usage: LABEL, description: "Sentry project"}
        - gauge:        {usage: GAUGE, description: "Number of unresolved issues in project"}

    sentry_unresolved_issues_nova:
      query: >
        SELECT o.slug AS organization, p.slug AS project, message, COUNT(*) FROM sentry_groupedmessage gm
          JOIN sentry_project p ON gm.project_id = p.id
          JOIN sentry_organization o ON p.organization_id = o.id
         WHERE gm.status = 0 AND p.slug = 'nova'
         GROUP BY o.slug, p.slug, message
      metrics:
        - organization: {usage: LABEL, description: "Sentry organization"}
        - project:      {usage: LABEL, description: "Sentry project"}
        - message:      {usage: LABEL, description: "Issue message"}
        - gauge:        {usage: GAUGE, description: "Number of unresolved issues in project"}
