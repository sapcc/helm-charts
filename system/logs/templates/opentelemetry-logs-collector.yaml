apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: logs
  labels:
  {{- include "plugin.labels" . | nindent 4 }} 
  {{- if .Values.openTelemetryPlugin.openTelemetry.customLabels }}
  {{ toYaml .Values.openTelemetryPlugin.openTelemetry.customLabels | nindent 4 }}
  {{- end }}
spec:
  mode: daemonset
  tolerations:
  - operator: Exists
  podAnnotations:
    prometheus.io/scrape: "false"
  env:
    - name: NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: KUBE_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
    - name: cluster
      value: "{{ .Values.openTelemetryPlugin.openTelemetry.cluster }}"
    - name: region
      value: "{{ .Values.openTelemetryPlugin.openTelemetry.region }}"
    - name: index
      value: "{{ .Values.openTelemetryPlugin.openTelemetry.openSearchLogs.index }}"
  envFrom:
    - secretRef:
         name: otel-basic-auth
{{- if .Values.openTelemetryPlugin.openTelemetry.prometheus.podMonitor.enabled }}
  ports:
    - name: prometheus
      port: 9999
{{- end }}
  image: {{ index .Values "openTelemetryPlugin" "opentelemetry-operator" "manager" "collectorImage" "repository" }}:{{ index .Values "openTelemetryPlugin" "opentelemetry-operator" "manager" "collectorImage" "tag" }}
  volumeMounts:
  - mountPath: /var/log
    name: varlog
    readOnly: true
  volumes:
  - name: varlog
    hostPath:
      path: /var/log
  config:
    receivers:
{{- if .Values.openTelemetryPlugin.openTelemetry.logsCollector.journaldConfig.enabled }}
    {{- include "journald.receiver" . | nindent 6 -}}
{{ end }}
{{- if .Values.openTelemetryPlugin.openTelemetry.logsCollector.k8seventsConfig.enabled }}
      k8s_events:
        auth_type: serviceAccount
{{- end }}
{{- if .Values.openTelemetryPlugin.openTelemetry.logsCollector.containerdConfig.enabled }}
  {{- include "containerd.receiver" . | nindent 6 -}}
{{- end }}
{{- if .Values.openTelemetryPlugin.openTelemetry.prometheus.podMonitor.enabled }}
      prometheus/internal:
        config:
          scrape_configs:
            - job_name: 'internal'
              scrape_interval: 5s
              static_configs:
                - targets: ['127.0.0.1:8888']
{{- end }}

    processors:
      batch:
        send_batch_max_size: 500
        timeout: 5s
        send_batch_size : 10

{{- if .Values.openTelemetryPlugin.openTelemetry.prometheus.podMonitor.enabled }}
      attributes/prometheus:
        actions:
          - action: insert
            key: k8s_node_name
            value: ${KUBE_NODE_NAME}
          - action: insert
            key: k8s_cluster_name
            value: ${cluster}
          - action: insert
            key: region
            value: ${region}
          - action: delete
            key: service_instance_id
          - action: delete
            key: pod
{{- end }}
      attributes/cluster:
        actions:
          - action: insert
            key: k8s.cluster.name
            value: ${cluster}
          - action: insert
            key: region
            value: ${region}
          - action: insert
            key: k8s.node.name
            value: ${KUBE_NODE_NAME}
      attributes/failover_username_a:
        actions:
          - action: insert
            key: failover_username_opensearch
            value: ${failover_username_a}
      attributes/failover_username_b:
        actions:
          - action: insert
            key: failover_username_opensearch
            value: ${failover_username_b}
      transform/ingress:
        error_mode: ignore
        log_statements:
          - context: log
            conditions:
              - resource.attributes["app.label.name"] == "ingress-nginx"
            statements:
              - merge_maps(attributes, ExtractGrokPatterns(body, "%{IP:client.address} %{NOTSPACE:client.ident} %{NOTSPACE:client.auth} \\[%{HTTPDATE:timestamp}\\] \"%{WORD:request_method} %{NOTSPACE:request_path} %{WORD:network.protocol.name}/%{NOTSPACE:network.protocol.version}\" %{NUMBER:response} %{NUMBER:content_length:int} %{QUOTEDSTRING} \"%{GREEDYDATA:user_agent}\" %{NUMBER:request_length:int} %{BASE10NUM:request_time:float}( \\[%{NOTSPACE:service}\\])? ?(\\[\\])? %{IP:server.address}\\:%{NUMBER:server.port} %{NUMBER:upstream_response_length:int} %{BASE10NUM:upstream_response_time:float} %{NOTSPACE:upstream_status} %{NOTSPACE:request_id}", true),"upsert")
              - set(attributes["network.protocol.name"], ConvertCase(attributes["network.protocol.name"], "lower")) where attributes["network.protocol.name"] != nil
              - set(attributes["config.parsed"], "ingress-nginx") where attributes["client.address"] != nil

      transform/files:
        error_mode: ignore
        log_statements:
          - context: log
            conditions:
              - resource.attributes["log.type"] == "files"
            statements:
              - merge_maps(attributes, ExtractGrokPatterns(body, "%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{GREEDYDATA:log}", true), "upsert")
              - set(attributes["config.parsed"], "files") where attributes["log_level"] != nil

{{- if .Values.openTelemetryPlugin.openTelemetry.logsCollector.journaldConfig.enabled }}
    {{- include "journald.transform" . | nindent 6 -}}
{{- end }}
{{- if .Values.openTelemetryPlugin.openTelemetry.logsCollector.containerdConfig.enabled }}
    {{- include "containerd.transform" . | nindent 6 -}}
{{- end }}
{{- if .Values.openTelemetryPlugin.openTelemetry.logsCollector.k8seventsConfig.enabled }}
    {{- include "k8sevents.transform" . | nindent 6 -}}
{{- end }}

      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        filter:
          node_from_env_var: KUBE_NODE_NAME
        extract:
          metadata:
            - k8s.namespace.name
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.pod.ip
            - k8s.pod.start_time
            - k8s.deployment.name
            - k8s.deployment.uid
            - k8s.node.name
            - k8s.replicaset.name
            - k8s.replicaset.uid
            - k8s.statefulset.name
            - k8s.statefulset.uid
            - k8s.daemonset.name
            - k8s.daemonset.uid
            - k8s.job.name
            - k8s.job.uid
            - k8s.cronjob.name
            - k8s.node.uid
            - k8s.cluster.uid
            - k8s.container.name
            - container.image.name
            - container.image.tag
          labels:
            - tag_name: app.label.ingress-nginx
              key: ingress-nginx
              from: pod
            - tag_name: app.label.support-group
              key: ccloud/support-group
              from: pod
            - tag_name: app.label.app_name
              key: app.kubernetes.io/app_name
              from: pod
            - tag_name: app.label.component
              key: app.kubernetes.io/component
              from: pod
            - tag_name: app.label.name
              key: app.kubernetes.io/name
              from: pod
            - tag_name: app.label.instance
              key: app.kubernetes.io/instance
              from: pod
            - tag_name: app.label.pod-template-hash
              key: app.kubernetes.io/pod-template-hash
              from: pod
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.ip
          - sources:
              - from: resource_attribute
                name: k8s.pod.uid
          - sources:
              - from: resource_attribute
                name: k8s.pod.name
          - sources:
              - from: connection
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 30

    exporters:
      debug:
        verbosity: basic
      opensearch/failover_a:
        http:
          auth:
            authenticator: basicauth/failover_a
          endpoint: {{ .Values.openTelemetryPlugin.openTelemetry.openSearchLogs.endpoint }}
        logs_index: ${index}-datastream
      opensearch/failover_b:
        http:
          auth:
            authenticator: basicauth/failover_b
          endpoint: {{ .Values.openTelemetryPlugin.openTelemetry.openSearchLogs.endpoint }}
        logs_index: ${index}-datastream
      prometheus:
        endpoint: 0.0.0.0:9999

    extensions:
      basicauth/failover_a:
        client_auth:
          username: ${failover_username_a}
          password: ${failover_password_a}
      basicauth/failover_b:
        client_auth:
          username: ${failover_username_b}
          password: ${failover_password_b}

    connectors:
      forward: {}
      failover:
        priority_levels:
          - [logs/failover_a]
          - [logs/failover_b]
        retry_interval: 1h
        retry_gap: 15m
        max_retries: 0
    service:
      extensions:
        - basicauth/failover_a
        - basicauth/failover_b
{{- if .Values.openTelemetryPlugin.openTelemetry.prometheus.podMonitor.enabled }}
      telemetry:
        metrics:
          address: 127.0.0.1:8888
          level: detailed
{{- end }}
      pipelines:
        logs/forward:
          receivers: [forward]
          processors: [batch]
          exporters: [failover]
        logs/failover_a:
          receivers: [failover]
          processors: [attributes/failover_username_a]
          exporters: [opensearch/failover_a]
        logs/failover_b:
          receivers: [failover]
          processors: [attributes/failover_username_b]
          exporters: [opensearch/failover_b]
{{- if .Values.openTelemetryPlugin.openTelemetry.prometheus.podMonitor.enabled }}
        metrics/prometheus:
          receivers: [prometheus/internal]
          processors: [attributes/prometheus]
          exporters: [prometheus]
{{- end }}
{{- if .Values.openTelemetryPlugin.openTelemetry.logsCollector.journaldConfig.enabled }}
    {{- include "journald.pipeline" . | nindent 8 -}}
{{- end }}
{{- if .Values.openTelemetryPlugin.openTelemetry.logsCollector.containerdConfig.enabled }}
    {{- include "containerd.pipeline" . | nindent 8 -}}
{{- end }}
{{- if .Values.openTelemetryPlugin.openTelemetry.logsCollector.k8seventsConfig.enabled }}
    {{- include "k8sevents.pipeline" . | nindent 8 -}}
{{- end }}
