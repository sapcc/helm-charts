apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: gkresourcelimits
spec:
  crd:
    spec:
      names:
        kind: GkResourceLimits
      validation:
        openAPIV3Schema:
          properties: {}

  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package resourcelimits

        # We have such a bafflingly large amount of violations that
        # Gatekeeper cannot report them all at once. I'd rather have
        # *something* reported for as many things as possible, even if it
        # means sacrificing accuracy, so we report only one violation for
        # each offending pod, and we report on the deployment/daemonset level
        # if possible to avoid useless duplication of violations.

        resource_types["cpu"]
        resource_types["memory"]

        missing_limits_on_pod[{"container": container.name, "type": resource_type}] {
            container := input.review.object.spec.containers[_]
            limits := object.get(container.resources, "limits", {})
            resource_type := resource_types[_]
            object.get(limits, resource_type, "") == ""
        }

        missing_limits_on_pod_template[{"container": container.name, "type": resource_type}] {
            container := input.review.object.spec.template.spec.containers[_]
            limits := object.get(container.resources, "limits", {})
            resource_type := resource_types[_]
            object.get(limits, resource_type, "") == ""
        }

        pod_owners["ReplicaSet"]
        pod_owners["DaemonSet"]
        pod_owners["StatefulSet"]

        pod_belongs_to[kind] {
            ref := input.review.object.metadata.ownerReferences[_]
            kind := ref.kind
            kind == pod_owners[_]
        }

        violation[{"msg": msg}] {
            input.review.object.kind == "Pod"
            count(pod_belongs_to) == 0 # otherwise the violation will be reported on the DaemonSet or Deployment
            count(missing_limits_on_pod) > 0
            msg := "cpu and memory limits not set on some or all containers"
        }

        violation_owners["Deployment"]
        violation_owners["DaemonSet"]
        violation_owners["StatefulSet"]

        violation[{"msg": msg}] {
            input.review.object.kind == violation_owners[_]
            count(missing_limits_on_pod_template) > 0
            msg := "cpu and memory limits not set on some or all containers"
        }
