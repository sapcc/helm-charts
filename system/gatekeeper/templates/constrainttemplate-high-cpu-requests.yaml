apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: gkhighcpurequests
spec:
  crd:
    spec:
      names:
        kind: GkHighCPURequests
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            maxCpu:
              type: integer

  targets:
    - target: admission.k8s.gatekeeper.sh
      code:
        - engine: Rego
          source:
            version: "v1"
            libs:
              - |
                {{ .Files.Get "lib/add-support-labels.rego" | nindent 16 }}
              - |
                {{ .Files.Get "lib/traversal.rego" | nindent 16 }}
            rego: |
              package highcpurequests

              import data.lib.add_support_labels
              import data.lib.traversal

              canonify_cpu(orig) := new if {
                  is_number(orig)
                  new := orig
              }

              canonify_cpu(orig) := new if {
                  not is_number(orig)
                  not endswith(orig, "m")
                  regex.match(`^[0-9]*\.?[0-9]+$`, orig)
                  new := to_number(orig)
              }

              canonify_cpu(orig) := new if {
                  not is_number(orig)
                  endswith(orig, "m")
                  new := to_number(replace(orig, "m", "")) / 1000
              }

              iro := input.review.object
              pod := traversal.find_pod(iro)

              violation contains {"msg": add_support_labels.from_k8s_object(iro, msg)} if {
                  pod.isFound

                  total_cpu := sum([canonify_cpu(c) | c = pod.spec.containers[_].resources.requests.cpu])
                  total_cpu > input.parameters.maxCpu

                  msg := sprintf("requests %v CPU in total", [total_cpu])
              }
