{{- if .Capabilities.APIVersions.Has "templates.gatekeeper.sh/v1" }}
apiVersion: templates.gatekeeper.sh/v1
{{- else }}
apiVersion: templates.gatekeeper.sh/v1beta1
{{- end }}
kind: ConstraintTemplate
metadata:
  name: gkregionvaluemissing
spec:
  crd:
    spec:
      names:
        kind: GkRegionValueMissing

  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package gkregionvaluemissing

        violation[{"msg": msg}] {
          helm_release := input.review.object
          helm_release.kind == "Secret"
          helm_release.type == "helm.sh/release.v1"
          helm_release.metadata.labels.status == "deployed"

          parser_url := "http://helm-manifest-parser.kube-system.svc/v3"
          parser_resp := http.send({"url": parser_url, "method": "POST", "raw_body": helm_release.data.release, "timeout": "15s"})
          parser_resp.status_code == 200

          values := parser_resp.body.values
          values_global := get_default(values, "global", {})
          values_region := get_default(values_global, "region", "")
          values_region == ""

          msg := "missing .Values.global.region value"
        }

        # need to import some parts from Gatekeeper's pkg/target/regolib/src.rego
        # to make get_default() work

        has_field(object, field) {
          object[field]
        }
        has_field(object, field) {
          object[field] == false
        }
        has_field(object, field) = false {
          not object[field]
          not object[field] == false
        }

        get_default(object, field, _default) = output {
          has_field(object, field)
          output = object[field]
          output != null
        }
        get_default(object, field, _default) = output {
          has_field(object, field)
          object[field] == null
          output = _default
        }
        get_default(object, field, _default) = output {
          has_field(object, field) == false
          output = _default
        }
