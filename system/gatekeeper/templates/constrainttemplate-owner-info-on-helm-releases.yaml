{{- if .Capabilities.APIVersions.Has "templates.gatekeeper.sh/v1" }}
apiVersion: templates.gatekeeper.sh/v1
{{- else }}
apiVersion: templates.gatekeeper.sh/v1beta1
{{- end }}
kind: ConstraintTemplate
metadata:
  name: gkownerinfoonhelmreleases
spec:
  crd:
    spec:
      names:
        kind: GkOwnerInfoOnHelmReleases

  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package ownerinfoonhelmreleases

        configmaps = {obj |
          input.review.object.kind == "Secret"
          secret := input.review.object
          secret.type == "helm.sh/release.v1"
          secret.metadata.labels.status == "deployed"

          parser_url := "http://helm-manifest-parser.kube-system.svc/v3"
          parser_resp := http.send({"url": parser_url, "method": "POST", "raw_body": secret.data.release, "timeout": "15s"})
          parser_resp.status_code == 200

          obj := parser_resp.body.items[_]
          obj.kind == "ConfigMap"
          startswith(obj.metadata.name, "owner-of-")
        }

        violation[{"msg": msg}] {
          # Check if an 'owner-of-<release-name>' ConfigMap exists for this release.
          count(configmaps) == 0
          release_name := input.review.object.metadata.labels.name
          msg := sprintf("could not find ConfigMap: owner-of-%s", [release_name])
        }

        violation[{"msg": msg}] {
          count(configmaps) > 0

          # Check if 'primary-maintainer' label is defined. Existence of this label denotes that
          # the 'data.maintainers' field is defined and it contains at least one maintainer.
          obj := configmaps[_]
          pm := object.get(obj.metadata.labels, "primary-maintainer", "")
          pm == ""
          msg := sprintf(
            "ConfigMap %q does not have %q label: parent chart needs to define %q in its Values.yaml file with at least one maintainer",
            [obj.metadata.name, "primary-maintainer", "owner-info.maintainers"],
          )
        }
