{{- if .Capabilities.APIVersions.Has "templates.gatekeeper.sh/v1" }}
apiVersion: templates.gatekeeper.sh/v1
{{- else }}
apiVersion: templates.gatekeeper.sh/v1beta1
{{- end }}
kind: ConstraintTemplate
metadata:
  name: gkdeprecatedapiversions
spec:
  crd:
    spec:
      names:
        kind: GkDeprecatedApiVersions

  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package deprecatedapiversions

        deprecated_api_versions = {
          "1.16": {
            "apps/v1beta1",
            "apps/v1beta2",
            "extensions/v1beta1",
          },
          "1.22": {
            "admissionregistration.k8s.io/v1beta1",
            "apiextensions.k8s.io/v1beta1",
            "apiregistration.k8s.io/v1beta1",
            "authentication.k8s.io/v1beta1",
            "authorization.k8s.io/v1beta1",
            "certificates.k8s.io/v1beta1",
            "coordination.k8s.io/v1beta1",
            "networking.k8s.io/v1beta1",
            "rbac.authorization.k8s.io/v1beta1",
            "scheduling.k8s.io/v1beta1",
            "storage.k8s.io/v1beta1",
          },
        }

        helm_versions[2] {
          input.review.object.kind == "ConfigMap"
          input.review.object.metadata.labels.OWNER == "TILLER"
          input.review.object.metadata.labels.STATUS == "DEPLOYED"
        }

        helm_versions[3] {
          input.review.object.kind == "Secret"
          input.review.object.type == "helm.sh/release.v1"
          input.review.object.metadata.labels.status == "deployed"
        }

        violation[{"msg": msg, "details": {"name": obj_name, "kind": obj_kind}}] {
          helm_version := helm_versions[_]

          parser_url := sprintf("http://helm-manifest-parser.kube-system.svc/v%d", [helm_version])
          parser_resp := http.send({"url": parser_url, "method": "POST", "raw_body": input.review.object.data.release, "timeout": "15s"})
          parser_resp.status_code == 200

          obj := parser_resp.body.items[_]
          api_set := deprecated_api_versions[k8s_version]
          api_set[obj.apiVersion]

          obj_name := obj.metadata.name
          obj_kind := obj.kind
          msg := sprintf("%s %s declared with deprecated API version: %s (will break in k8s v%s) ", [obj_kind, obj_name, obj.apiVersion, k8s_version])
        }
