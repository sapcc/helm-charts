apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: gkforbiddenclusterwideobjects
spec:
  crd:
    spec:
      names:
        kind: GkForbiddenClusterwideObjects
      validation:
        openAPIV3Schema:
          type: object
          properties:
            allowlist:
              type: array
              items:
                description: positive allowlist entry
                type: object
                properties:
                  kind:
                    type: string
                  releaseNamespace:
                    type: string
                  releaseName:
                    type: string
          minItems: 0

  targets:
    - target: admission.k8s.gatekeeper.sh
      code:
        - engine: Rego
          source:
            version: "v1"
            libs:
              - |
                {{ .Files.Get "lib/add-support-labels.rego" | nindent 16 }}
            rego: |
              package forbiddenclusterwideobjects

              import data.lib.add_support_labels

              iro := input.review.object

              violation contains {"msg": add_support_labels.from_k8s_object(iro, msg)} if {
                  webhook := iro.webhooks[_]
                  not isWebhookAllowed(iro.kind, iro.metadata.annotations["meta.helm.sh/release-namespace"], iro.metadata.annotations["meta.helm.sh/release-name"])
                  not webhookTargetsSameNamespace(webhook)
                  msg := sprintf("webhook %q does not match our allowlist", [webhook.name])
              }

              isWebhookAllowed(kind, n, name) if {
                  entry := input.parameters.allowlist[_]

                  kind == entry.kind
                  n == entry.releaseNamespace
                  name == entry.releaseName
              }

              # TODO:
              # consider blanket-allowing all webhooks where the namespace selector only selects the same namespace 
              # where the service targeted by the webhook lives
              webhookTargetsSameNamespace(webhook) if {
                  selector := webhook.namespaceSelector
                  n := webhook.clientConfig.service.namespace

                  # TODO: evaluate selector
                  # Always return false for now
                  1 == 2
              }

              ########################################################################
              # TODO: consider additional cluster-scoped objects apart from admission webhooks (see `k api-resources --namespaced=false`)
