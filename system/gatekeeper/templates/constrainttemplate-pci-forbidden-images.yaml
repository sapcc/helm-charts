apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: gkpciforbiddenimages
spec:
  crd:
    spec:
      names:
        kind: GkPCIForbiddenImages
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            patterns:
              type: array
              items:
                description: regex pattern
                type: string
              minItems: 0

  targets:
    - target: admission.k8s.gatekeeper.sh
      code:
        - engine: Rego
          source:
            version: "v1"
            libs:
              - |
                {{ .Files.Get "lib/add-support-labels.rego" | nindent 16 }}
              - |
                {{ .Files.Get "lib/traversal.rego" | nindent 16 }}
            rego: |
              package pciforbiddenimages

              import data.lib.add_support_labels
              import data.lib.traversal

              iro := input.review.object
              containers := traversal.find_container_specs(iro)

              violation contains {"msg": add_support_labels.from_k8s_object(iro, msg)} if {
                  container := iro.spec.containers[_]

                  pattern := input.parameters.patterns[_]
                  regex.match(pattern, container.image)

                  msg := sprintf("container %q uses forbidden image: %s", [container.name, container.image])
              }
