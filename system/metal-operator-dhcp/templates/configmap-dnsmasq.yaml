kind: ConfigMap
apiVersion: v1
metadata:
  name: metal-dnsmasq
  namespace: {{ .Release.Namespace }}
data:
  dnsmasq.conf: |
    except-interface=lo
    bind-dynamic
    enable-tftp
    tftp-root=/shared/tftpboot
    log-queries

    # Configure listening for DNS (0 disables DNS)
    port=0
    log-dhcp

    {{ if .Values.local }}
    {{ range $pool := .Values.local.dhcpPools }}
    {{- $ipPoolStart := $pool.ipPoolStart -}}
    {{- $ipPoolEnd := $pool.ipPoolEnd -}}
    {{- $router := $pool.router -}}
    dhcp-range=set:{{ $pool.subnetPrefix }},{{ $ipPoolStart }},{{ $ipPoolEnd }},{{ $pool.mask }},{{ $.Values.dnsmasq.leaseTime }}
    dhcp-option=set:{{ $pool.subnetPrefix }},option:router,{{ $router }}
    dhcp-boot=tag:{{ $pool.subnetPrefix }},tag:ipxe,{{ $.Values.local.url }}/ipxe/${uuid}
    {{ end }}
    {{ end }}

    {{ if .Values.remote }}
    {{ range $pool := .Values.remote.dhcpPools }}
    {{- $ipPoolStart := $pool.ipPoolStart -}}
    {{- $ipPoolEnd := $pool.ipPoolEnd -}}
    {{- $router := $pool.router -}}
    dhcp-range=set:{{ $pool.subnetPrefix }},{{ $ipPoolStart }},{{ $ipPoolEnd }},{{ $pool.mask }},{{ $.Values.dnsmasq.leaseTime }}
    dhcp-option=set:{{ $pool.subnetPrefix }},option:router,{{ $router }}
    dhcp-boot=tag:{{ $pool.subnetPrefix }},tag:ipxe,{{ $.Values.remote.url }}/ipxe/${uuid}
    {{ end }}
    {{ end }}

    {{- if .Values.dnsmasq.staticHosts }}
    {{- range .Values.dnsmasq.staticHosts }}
    {{ . }}
    {{- end }} 
    {{- end }} 

    # Set dns servers
    dhcp-option=6,{{ .Values.dnsmasq.dnsServers }}
    dhcp-option=option:domain-name,cc.{{ .Values.global.region }}.cloud.sap

    # Set ntp servers
    dhcp-option=option:ntp-server,{{ .Values.ntpServers }}

    # IPv4 Configuration:
    dhcp-match=ipxe,175

    # Note: Need to test EFI booting
    dhcp-match=set:efi,option:client-arch,7
    dhcp-match=set:efi,option:client-arch,9
    dhcp-match=set:efi,option:client-arch,11
    # Client is PXE booting over EFI without iPXE ROM; send EFI version of iPXE chainloader
    dhcp-boot=tag:efi,tag:!ipxe,{{ .Values.ipxe.efi.file }}

    # Client is running PXE over BIOS; send BIOS version of iPXE chainloader
    dhcp-boot=/undionly.kpxe,{{ .Values.dnsmasq.externalIP }}
  initdnsmasq.sh: |
    #!/usr/bin/env bash
    set -euxo pipefail
    
    mkdir -p /shared/tftpboot

    # use ironcore efi
    curl -o /shared/tftpboot/{{ .Values.ipxe.efi.file }} {{ .Values.ipxe.efi.host }}/{{ .Values.ipxe.efi.file }}

    exec /usr/sbin/dnsmasq -d -q -C /opt/dnsmasq/dnsmasq.conf
  dhcp-init.sh: |
    #!/usr/bin/env bash
    set -euxo pipefail
    # make sure to update dhcp-stop script to keep commands aligned

    export INTERFACE=$(/sbin/ip route | grep -v cbr | awk '/default/ { print $5 }')

    echo "Outgoing inteface is ${INTERFACE}"

    echo "Adding rule for SNAT DHCP Reply to correct server IP address"

    if iptables-nft -t nat -C POSTROUTING -p udp --sport 67 --dport 67 -j SNAT --to-source ${DHCPSERVERIP} 2>/dev/null; then
      echo "Rule for SNAT DHCP Reply already present - skipping"
    else
      echo "Rule for SNAT DHCP Reply not present - creating rule"
      iptables-nft -t nat -I POSTROUTING 1 -p udp --sport 67 --dport 67 -j SNAT --to-source ${DHCPSERVERIP}
    fi

    if iptables-nft -t nat -C POSTROUTING -p udp --sport 69 --dport 69 -j SNAT --to-source ${DHCPSERVERIP} 2>/dev/null; then
      echo "Rule for SNAT TFTP Reply already present - skipping"
    else
      echo "Rule for SNAT TFTP Reply not present - creating rule"
      iptables-nft -t nat -I POSTROUTING 1 -p udp --sport 69 --dport 69 -j SNAT --to-source ${DHCPSERVERIP}
    fi
  dhcp-stop.sh: |
    #!/usr/bin/env bash
    set -euxo pipefail
    # make sure to update dhcp-init script to keep commands aligned

    echo "Deleting rule for SNAT DHCP Reply"
    iptables-nft -t nat -D POSTROUTING -p udp --sport 67 --dport 67 -j SNAT --to-source ${DHCPSERVERIP}

    echo "Deleting rule for SNAT TFTP Reply"
    iptables-nft -t nat -D POSTROUTING -p udp --sport 69 --dport 69 -j SNAT --to-source ${DHCPSERVERIP}
