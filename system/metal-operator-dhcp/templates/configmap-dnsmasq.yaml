kind: ConfigMap
apiVersion: v1
metadata:
  name: metal-dnsmasq
  namespace: {{ .Release.Namespace }}
data:
  dnsmasq.conf: |
    except-interface=lo
    bind-dynamic
    enable-tftp
    tftp-root=/shared/tftpboot
    log-queries

    # Configure listening for DNS (0 disables DNS)
    port=0
    log-dhcp
    {{ range $pool := .Values.dnsmasq.dhcpPools }}
    {{- $ipPoolStart := $pool.ipPoolStart -}}
    {{- $ipPoolEnd := $pool.ipPoolEnd -}}
    {{- if $pool.static -}}
    dhcp-range=set:{{ $pool.subnetPrefix }},{{ $pool.subnetPrefix }},static,{{ $pool.mask }},{{ $.Values.dnsmasq.leaseTime }}
    {{ else }}
    dhcp-range=set:{{ $pool.subnetPrefix }},{{ $ipPoolStart }},{{ $ipPoolEnd }},{{ $pool.mask }},{{ $.Values.dnsmasq.leaseTime }}
    {{- end -}}
    {{ end }}

    {{- if .Values.dnsmasq.staticHosts }}
    {{- range .Values.dnsmasq.staticHosts }}
    {{ . }}
    {{- end }} 
    {{- end }} 

    # It can be used when setting DNS or GW variables.
    # Set default router
    {{ range $pool := .Values.dnsmasq.dhcpPools }}
    {{- $router := $pool.router -}}
    dhcp-option=set:{{ $pool.subnetPrefix }},option:router,{{ $router }}
    {{ end }}

    # Set dns servers
    dhcp-option=6,{{ .Values.dnsmasq.dnsServers }}
    dhcp-option=option:domain-name,cc.{{ .Values.global.region }}.cloud.sap

    # IPv4 Configuration:
    dhcp-match=ipxe,175
    # Client is already running iPXE; move to next stage of chainloading
    dhcp-boot=tag:ipxe,{{ .Values.ipxe.url }}/ipxe/${uuid}

    # Note: Need to test EFI booting
    dhcp-match=set:efi,option:client-arch,7
    dhcp-match=set:efi,option:client-arch,9
    dhcp-match=set:efi,option:client-arch,11
    # Client is PXE booting over EFI without iPXE ROM; send EFI version of iPXE chainloader
    dhcp-boot=tag:efi,tag:!ipxe,{{ .Values.ipxe.efi.file }}

    # Client is running PXE over BIOS; send BIOS version of iPXE chainloader
    dhcp-boot=/undionly.kpxe,{{ .Values.dnsmasq.externalIP }}
  initdnsmasq.sh: |
    #!/usr/bin/env bash
    set -euxo pipefail
    
    mkdir -p /shared/tftpboot

    # use ironcore efi
    curl -o /shared/tftpboot/{{ .Values.ipxe.efi.file }} {{ .Values.ipxe.efi.host }}/{{ .Values.ipxe.efi.file }}

    exec /usr/sbin/dnsmasq -d -q -C /opt/dnsmasq/dnsmasq.conf
