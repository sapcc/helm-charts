global:
  region:
  domain:
  clusterType: kubernikus

# Disable the prometheus-operator kube-state-metrics sub-chart. We deploy independently.
kubeStateMetrics:
  enabled: false

# Disable the prometheus-operator prometheus-node-exporter sub-chart. We deploy independently.
nodeExporter:
  enabled: false

# Additional scrape configuration deployed via secrets.
extraScrapeConfig: ""

kubernikus-monitoring:
  prometheusName: kubernikus

kube-prometheus-stack:
  nameOverride: prometheus
  fullnameOverride: prometheus
  # Never manage CRDs. They are deployed via prometheus-crds Helm chart.
  manageCrds: false

  prometheusOperator:
    image:
      repository: keppel.global.cloud.sap/ccloud-dockerhub-mirror/sapcc/prometheus-operator
      tag: v0.47.0

    prometheusConfigReloaderImage:
      repository: keppel.global.cloud.sap/ccloud-dockerhub-mirror/sapcc/prometheus-config-reloader
      tag: v0.44.0

    # Both admissionWebhooks and tls requires admissionregistration.k8s.io/v1 .
    admissionWebhooks:
      enabled: false
    tls:
      enabled: false

    createCustomResource: false
    service:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/targets: "kubernetes"
        prometheus.io/port: "8080"
    serviceAccount:
      create: false
    tlsProxy:
      enabled: false

  operator:
    serviceAccountName: default
  # Disable creation of default aggregation and alerting rules.
  defaultRules:
    create: false
  # Disable the Prometheus instance. We deploy our own Prometheis.
  prometheus:
    enabled: false
  # Disable the Alertmanager instance. We deploy our own Alertmanagers.
  alertmanager:
    enabled: false
  # Disable all exporters.
  kubeApiServer:
    enabled: false
  kubelet:
    enabled: false
  kubeControllerManager:
    enabled: false
  coreDns:
    enabled: false
  kubeDns:
    enabled: false
  kubeEtcd:
    enabled: false
  kubeScheduler:
    enabled: false
  kubeStateMetrics:
    enabled: false
  nodeExporter:
    enabled: false
  grafana:
    enabled: false

absent-metrics-operator:
  enabled: true

kube-state-metrics:
  image:
    repository: keppel.global.cloud.sap/ccloud-k8sgcr-mirror/kube-state-metrics/kube-state-metrics

  customLabels:
    app: kube-state-metrics

  resources:
    requests:
      memory: 150Mi
      cpu: 100m

kube-state-metrics-exporter:
  prometheusName: kubernikus

prometheus-server:
  name: kubernikus

  retentionTime: 21d

  additionalScrapeConfigs:
    name: prometheus-kubernikus-additional-scrape-config
    key: scrape-config.yaml

  secrets:
    - prometheus-openstack-sso-cert

  ingress:
    enabled: true
    hosts:
      - prometheus.kubernikus

  internalIngress:
    enabled: true
    hosts:
      - prometheus-internal.kubernikus

  persistence:
    enabled: true
    size: 300Gi

  resources:
    requests:
      cpu: "1"
      memory: 4Gi

  serviceDiscoveries:
    endpoints:
      enabled: true
      # Scrape all targets regardless of their `prometheus.io/targets` annotation.
      limitToPrometheusTargets: false
    pods:
      enabled: true
      # Scrape all targets regardless of their `prometheus.io/targets` annotation.
      limitToPrometheusTargets: false
    kubeAPIServer:
      enabled: true
    cAdvisor:
      enabled: true
    kubelet:
      enabled: true
    nodeExporter:
      enabled: false
    kubeDNS:
      enabled: false

  # The tier to use for prometheus-server alerts.
  alerts:
    tier: kks

  # Send alerts to these alertmanagers.
  alertmanagers:
    # Enabled via secrets.
    authentication:
      enabled: false

    hosts:
      - alertmanager-internal.scaleout.eu-de-1.cloud.sap
      - alertmanager-internal.scaleout.eu-nl-1.cloud.sap

prometheus-collector:
  name: kubernikus-collector

  # Short-lived; Only for aggregation.
  retentionTime: 30m

  serviceDiscoveries:
    endpoints:
      enabled: false
    pods:
      enabled: false
    cAdvisor:
      enabled: true
    kubelet:
      enabled: true
    nodeExporter:
      enabled: false
    kubeDNS:
      enabled: false
    kubeAPIServer:
      enabled: true
      # Full list of APIserver metrics: https://github.com/kubernetes/apiserver/blob/master/pkg/endpoints/metrics/metrics.go .
      allowedMetrics: # Add metrics to scrape here @databus23
        - etcd_object_counts
        - apiserver_request_total

prometheus-kubernetes-rules:
  prometheusName: kubernikus
  tier: kks

prometheus-node-exporter:
  image:
    repository: prom/node-exporter

  rbac:
    pspEnabled: false

  extraArgs:
    - --collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)
    - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|bpf|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tmpfs|tracefs)$$
    - --path.rootfs=/rootfs
    - --collector.systemd.enable-task-metrics
    - --collector.systemd.enable-restarts-metrics
    - --collector.systemd.enable-start-time-metrics
    - --collector.processes

  extraHostVolumeMounts:
    - name: dbus
      hostPath: /var/run/dbus/system_bus_socket
      mountPath: /var/run/dbus/system_bus_socket
      readOnly: true
    - name: rootfs
      hostPath: /
      mountPath: /rootfs
      readOnly: true
      mountPropagation: HostToContainer

  resources:
    requests:
      memory: 100Mi
      cpu: 100m

ntp-exporter:
  alerts:
    prometheus: kubernikus
    tier: kks

event-exporter:
  rbac:
    create: true

  additional_metrics:
    - name: volume_mount_error_total
      event_matcher:
      - key: InvolvedObject.Kind
        expr: Pod
      - key: Reason
        expr: (FailedAttachVolume|FailedMount)
      - key: Type
        expr: Warning
      - key: Source.Component
        expr: attachdetach.*
      labels:
        node: Object.Spec.NodeName
    - name: volume_mount_success_total
      event_matcher:
      - key: InvolvedObject.Kind
        expr: Pod
      - key: Message
        expr: MountVolume.SetUp succeeded for volume .pvc-.*
      - key: Reason
        expr: SuccessfulMountVolume
      labels:
        node: Source.Host
    - name: volume_multi_attach_error_total
      event_matcher:
      - key: InvolvedObject.Kind
        expr: Pod
      - key: Message
        expr: Multi-Attach error for volume.*
      - key: Reason
        expr: FailedAttachVolume
      labels:
        node: InvolvedObject.Name
    - name: volume_mount_bad_request_total
      event_matcher:
      - key: InvolvedObject.Kind
        expr: Pod
      - key: Reason
        expr: (FailedAttachVolume|FailedMount)
      - key: Type
        expr: Warning
      - key: Source.Component
        expr: attachdetach.*
      - key: Message
        expr: ".*failed to attach ([-0-9a-f]+) volume to.*compute: Invalid request due to incorrect syntax or missing required parameters."
      labels:
        volume: Message[1]

grafana:
  image:
    repository: keppel.global.cloud.sap/ccloud-dockerhub-mirror/grafana/grafana

  testFramework:
    enabled: false
  defaultDashboardsEnabled: false
  admin:
    existingSecret: kube-monitoring-kubernikus-grafana-admin
    userKey: adminUser
    passwordKey: adminPassword
    # Defined via secrets.
    # username: admin-user
    # password: admin-password
  rbac:
    pspEnabled: false

  # Ingress disabled by default as hosts and tls are set via secrets.
  ingress:
    enabled: false
    annotations:
      kubernetes.io/tls-acme: "true"
      prometheus.io/probe: "true"
      nginx.ingress.kubernetes.io/configuration-snippet: |
        rewrite ^/$ /dashboard/db/kubernikus?refresh=1m&orgId=1&kiosk=true redirect;
      nginx.ingress.kubernetes.io/auth-tls-secret: "kube-system/ingress-cacrt"
      nginx.ingress.kubernetes.io/auth-tls-verify-depth: "3"
      nginx.ingress.kubernetes.io/auth-tls-verify-client: "optional"
      disco: "true"

    # Defined via secrets.
    # hosts:
    #   - grafana.domain.tld
    #
    # tls:
    #  - secretName: tls-grafana-domain-tld
    #    hosts:
    #      - grafana.domain.tld

  plugins: grafana-piechart-panel,natel-discrete-panel,grafana-worldmap-panel

  additionalDataSources:
    - name: prometheus
      type: prometheus
      isDefault: true
      access: proxy
      url: http://prometheus-kubernikus:9090/
      version: 1

  # Sidecar for discovering & reloading dashboard, datasource configmaps.
  sidecar:
    image:
      repository: keppel.global.cloud.sap/ccloud-dockerhub-mirror/kiwigrid/k8s-sidecar

    dashboards:
      enabled: true
      # Label that configmaps with dashboards should have to be added.
      label: grafana-dashboard
      searchNamespace: ALL

    datasources:
      enabled: true
      # Label that configmaps with datasources should have to be added.
      label: grafana-datasource

  grafana.ini:
    paths:
      data: /var/lib/grafana/data
      logs: /var/log/grafana
      plugins: /var/lib/grafana/plugins
      provisioning: /var/lib/grafana/provisioning

    server:
      protocol: http
      http_addr:
      http_port: 3000
      domain: localhost
      enforce_domain: false
      root_url: "%(protocol)s://%(domain)s:%(http_port)s"
      router_logging: false
      static_root_path: public
      enable_gzip: false
      cert_file:
      cert_key:
      socket: /tmp/grafana.sock

    users:
      allow_sign_up: false
      allow_org_create: false
      auto_assign_org: true
      auto_assign_org_role: Admin
      default_theme: dark

    auth.anonymous:
      enabled: true
      org_name: Main Org.
      org_role: Admin

    auth.proxy:
      enabled: true
      header_name: X-REMOTE-USER
      header_property: username
      auto_sign_up: true

    auth.basic:
      enabled: false

    smtp:
      enabled: false

    log:
      mode: console
      level: debug

    alerting:
      enabled: false

grafana-dashboards-kubernetes:
  enableDatasources: false

fluent-bit:
  extraVolumeMounts:
    - mountPath: /fluent-bit/etc/labelmap.json
      name: config
      subPath: labelmap.json

promtail:
  enabled: false
  pipelineStages:
    - docker: {}

loki:
  enabled: false
  # user:
  # password:
