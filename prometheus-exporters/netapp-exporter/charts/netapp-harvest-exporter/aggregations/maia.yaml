# document: https://documentation.global.cloud.sap/docs/customer/monitoring/operational-metrics--maia/metrics-metrics/#nfs-manila---capacity
groups:
  - name: manila-maia
    rules:
    #
    # capacity metrics
    #

    # sum available_bytes and logical_used_bytes when only space reporting is enabled
    # details see https://operations.global.cloud.sap/docs/operation/storage/manila/300-logical-space/
    - record: netapp_volume_total_bytes:pre
      expr: label_replace((netapp_volume_size_available{app="netapp-harvest-exporter-manila"} + netapp_volume_space_logical_used)
        * on (app, host, svm, volume) group_left() netapp_volume_labels{is_space_reporting_logical="true", is_space_enforcement_logical="false"}
        or netapp_volume_size_total{app="netapp-harvest-exporter-manila"}, "vserver", "$1", "svm", "(.*)")

    # use logical used bytes when logical space reporting is enabled
    - record: netapp_volume_used_bytes:pre
      expr: label_replace(netapp_volume_space_logical_used{app="netapp-harvest-exporter-manila"}
        * on (app, host, svm, volume) group_left() netapp_volume_labels{is_space_reporting_logical="true"}
        or netapp_volume_size_used{app="netapp-harvest-exporter-manila"}, "vserver", "$1", "svm", "(.*)")

    - record: netapp_volume_snapshot_reserved_bytes:pre
      expr: label_replace(netapp_volume_snapshot_reserve_size{app="netapp-harvest-exporter-manila"} * on (app, host, svm, volume) group_left() netapp_volume_labels, "vserver", "$1", "svm", "(.*)")

    - record: netapp_volume_snapshot_available_bytes:pre
      expr: label_replace(netapp_volume_snapshot_reserve_available{app="netapp-harvest-exporter-manila"} * on (app, host, svm, volume) group_left() netapp_volume_labels, "vserver", "$1", "svm", "(.*)")

    - record: netapp_volume_snapshot_used_bytes:pre
      expr: label_replace(netapp_volume_snapshots_size_used{app="netapp-harvest-exporter-manila"} * on (app, host, svm, volume) group_left() netapp_volume_labels, "vserver", "$1", "svm", "(.*)")

    - record: netapp_volume_inode_files_total:pre
      expr: label_replace(netapp_volume_inode_files_total{app="netapp-harvest-exporter-manila"} * on (app, host, svm, volume) group_left() netapp_volume_labels, "vserver", "$1", "svm", "(.*)")

    - record: netapp_volume_inode_files_used:pre
      expr: label_replace(netapp_volume_inode_files_used{app="netapp-harvest-exporter-manila"} * on (app, host, svm, volume) group_left() netapp_volume_labels, "vserver", "$1", "svm", "(.*)")

    #
    # performance metrics
    #

    - record: netapp_volume_total_ops:pre
      expr: label_replace(netapp_volume_total_ops{app="netapp-harvest-exporter-manila"} * on (app, host, svm, volume) group_left(project_id, share_id, share_name, share_type, volume_type) netapp_volume_labels, "vserver", "$1", "svm", "(.*)")

    - record: netapp_volume_read_ops:pre
      expr: label_replace(netapp_volume_read_ops{app="netapp-harvest-exporter-manila"} * on (app, host, svm, volume) group_left(project_id, share_id, share_name, share_type, volume_type) netapp_volume_labels, "vserver", "$1", "svm", "(.*)")

    - record: netapp_volume_write_ops:pre
      expr: label_replace(netapp_volume_write_ops{app="netapp-harvest-exporter-manila"} * on (app, host, svm, volume) group_left(project_id, share_id, share_name, share_type, volume_type) netapp_volume_labels, "vserver", "$1", "svm", "(.*)")

    # volume read throughput in bytes per second
    - record: netapp_volume_read_throughput:pre
      expr: label_replace(netapp_volume_read_data{app="netapp-harvest-exporter-manila"} * on (app, host, svm, volume) group_left(project_id, share_id, share_name, share_type, volume_type) netapp_volume_labels, "vserver", "$1", "svm", "(.*)")

    # volume write throughput in bytes per second
    - record: netapp_volume_write_throughput:pre
      expr: label_replace(netapp_volume_write_data{app="netapp-harvest-exporter-manila"} * on (app, host, svm, volume) group_left(project_id, share_id, share_name, share_type, volume_type) netapp_volume_labels, "vserver", "$1", "svm", "(.*)")

    - record: netapp_volume_read_latency_milliseconds:pre
      expr: label_replace(netapp_volume_read_latency{app="netapp-harvest-exporter-manila"} * on (app, host, svm, volume) group_left(project_id, share_id, share_name, share_type, volume_type) netapp_volume_labels, "vserver", "$1", "svm", "(.*)")

    - record: netapp_volume_write_latency_milliseconds:pre
      expr: label_replace(netapp_volume_write_latency{app="netapp-harvest-exporter-manila"} * on (app, host, svm, volume) group_left(project_id, share_id, share_name, share_type, volume_type) netapp_volume_labels, "vserver", "$1", "svm", "(.*)")

    #
    # only keep necessary labels visible to users
    #

    # We need to take average of the metrics to avoid exporting multiplied valuesï¼Œin case same filer is scraped by multiple harvest worker.
    - record: netapp_volume_total_bytes:maia2
      expr: avg by (host, vserver, volume, volume_type, share_name, share_id, share_type, project_id, availability_zone) (netapp_volume_total_bytes:pre{project_id!=""})

    - record: netapp_volume_used_bytes:maia2
      expr: avg by (host, vserver, volume, volume_type, share_name, share_id, share_type, project_id, availability_zone) (netapp_volume_used_bytes:pre{project_id!=""})

    - record: netapp_volume_available_bytes:maia2
      expr: netapp_volume_total_bytes:maia2 - netapp_volume_used_bytes:maia2

    - record: netapp_volume_used_percentage:maia2
      expr: round(netapp_volume_used_bytes:maia2 / netapp_volume_total_bytes:maia2 * 100)

    - record: netapp_volume_snapshot_reserved_bytes:maia2
      expr: avg by (host, vserver, volume, volume_type, share_name, share_id, share_type, project_id, availability_zone) (netapp_volume_snapshot_reserved_bytes:pre{project_id!=""})

    - record: netapp_volume_snapshot_available_bytes:maia2
      expr: avg by (host, vserver, volume, volume_type, share_name, share_id, share_type, project_id, availability_zone) (netapp_volume_snapshot_available_bytes:pre{project_id!=""})

    # note: snapshot used is NOT snapshot reserved minus snapshot available, because snapshot split can happen
    - record: netapp_volume_snapshot_used_bytes:maia2
      expr: avg by (host, vserver, volume, volume_type, share_name, share_id, share_type, project_id, availability_zone) (netapp_volume_snapshot_used_bytes:pre{project_id!=""})

    - record: netapp_volume_inode_files_total:maia2
      expr: avg by (host, vserver, volume, volume_type, share_name, share_id, share_type, project_id, availability_zone) (netapp_volume_inode_files_total:pre{project_id!=""})

    - record: netapp_volume_inode_files_used:maia2
      expr: avg by (host, vserver, volume, volume_type, share_name, share_id, share_type, project_id, availability_zone) (netapp_volume_inode_files_used:pre{project_id!=""})

    - record: netapp_volume_inode_files_used_percentage:maia2
      expr: round(netapp_volume_inode_files_used:maia2 / netapp_volume_inode_files_total:maia2 * 100)

    - record: netapp_volume_total_ops:maia2
      expr: avg by (host, vserver, volume, volume_type, share_name, share_id, share_type, project_id, availability_zone) (netapp_volume_total_ops:pre{project_id!=""})

    - record: netapp_volume_read_ops:maia
      expr: avg by (host, vserver, volume, volume_type, share_name, share_id, share_type, project_id, availability_zone) (netapp_volume_read_ops:pre{project_id!=""})

    - record: netapp_volume_write_ops:maia
      expr: avg by (host, vserver, volume, volume_type, share_name, share_id, share_type, project_id, availability_zone) (netapp_volume_write_ops:pre{project_id!=""})

    - record: netapp_volume_read_throughput:maia
      expr: avg by (host, vserver, volume, volume_type, share_name, share_id, share_type, project_id, availability_zone) (netapp_volume_read_throughput:pre{project_id!=""})

    - record: netapp_volume_write_throughput:maia
      expr: avg by (host, vserver, volume, volume_type, share_name, share_id, share_type, project_id, availability_zone) (netapp_volume_write_throughput:pre{project_id!=""})

    - record: netapp_volume_read_latency_milliseconds:maia
      expr: avg by (host, vserver, volume, volume_type, share_name, share_id, share_type, project_id, availability_zone) (netapp_volume_read_latency_milliseconds:pre{project_id!=""})

    - record: netapp_volume_write_latency_milliseconds:maia
      expr: avg by (host, vserver, volume, volume_type, share_name, share_id, share_type, project_id, availability_zone) (netapp_volume_write_latency_milliseconds:pre{project_id!=""})

    #
    # fall back to old metrics
    #

    - record: netapp_volume_total_bytes:maia
      expr: netapp_volume_total_bytes:maia2 or sum (netapp_volume_total_bytes:maia1{project_id!=""}) without (app, instance, job, filer, aggregate, node, snapshot_policy, volume_state)

    - record: netapp_volume_used_bytes:maia
      expr: netapp_volume_used_bytes:maia2 or sum (netapp_volume_used_bytes:maia1{project_id!=""}) without (app, instance, job, filer, aggregate, node, snapshot_policy, volume_state)

    - record: netapp_volume_available_bytes:maia
      expr: netapp_volume_available_bytes:maia2 or sum (netapp_volume_available_bytes:maia1{project_id!=""}) without (app, instance, job, filer, aggregate, node, snapshot_policy, volume_state)

    - record: netapp_volume_used_percentage:maia
      expr: netapp_volume_used_percentage:maia2 or sum (netapp_volume_used_percentage:maia1{project_id!=""}) without (app, instance, job, filer, aggregate, node, snapshot_policy, volume_state)

    - record: netapp_volume_snapshot_reserved_bytes:maia
      expr: netapp_volume_snapshot_reserved_bytes:maia2 or sum (netapp_volume_snapshot_reserved_bytes:maia1{project_id!=""}) without (app, instance, job, filer, aggregate, node, snapshot_policy, volume_state)

    - record: netapp_volume_snapshot_available_bytes:maia
      expr: netapp_volume_snapshot_available_bytes:maia2 or sum (netapp_volume_snapshot_available_bytes:maia1{project_id!=""}) without (app, instance, job, filer, aggregate, node, snapshot_policy, volume_state)

    - record: netapp_volume_snapshot_used_bytes:maia
      expr: netapp_volume_snapshot_used_bytes:maia2 or sum (netapp_volume_snapshot_used_bytes:maia1{project_id!=""}) without (app, instance, job, filer, aggregate, node, snapshot_policy, volume_state)

    - record: netapp_volume_inode_files_total:maia
      expr: netapp_volume_inode_files_total:maia2 or sum (netapp_volume_inode_files_total:maia1{project_id!=""}) without (app, instance, job, filer, aggregate, node, snapshot_policy, volume_state)

    - record: netapp_volume_inode_files_used:maia
      expr: netapp_volume_inode_files_used:maia2 or sum (netapp_volume_inode_files_used:maia1{project_id!=""}) without (app, instance, job, filer, aggregate, node, snapshot_policy, volume_state)

    - record: netapp_volume_inode_files_used_percentage:maia
      expr: netapp_volume_inode_files_used_percentage:maia2 or sum (netapp_volume_inode_files_used_percentage:maia1{project_id!=""}) without (app, instance, job, filer, aggregate, node, snapshot_policy, volume_state)

    - record: netapp_volume_total_ops:maia
      expr: netapp_volume_total_ops:maia2 or sum (netapp_volume_total_ops:maia1{project_id!=""}) without (app, instance, job, filer, aggregate, node, snapshot_policy, volume_state)

    #
    # snampirror relationship
    #

    - record: netapp_snapmirror_labels:maia
      expr: |
        sum(
          netapp_snapmirror_labels *
            on(destination_volume) group_left()
            label_replace(
            label_replace(
            label_replace(
            label_replace(
            label_replace(
              max (
                netapp_volume_labels{app="netapp-harvest-exporter-manila", volume=~"share.*"}
              ) by (filer, project_id, share_id, share_name, svm, volume),
              "destination_cluster", "$1", "filer", "(.*)"),
              "destination_project_id", "$1", "project_id", "(.*)"),
              "destination_share_id", "$1", "share_id", "(.*)"),
              "destination_share_name", "$1", "share_name", "(.*)"),
              "destination_volume", "$1", "volume", "(.*)")
        ) by (
          availability_zone, derived_relationship_type, destination_cluster,
          destination_location, destination_node, destination_project_id,
          destination_share_id, destination_share_name, destination_volume,
          destination_vserver, group_type, healthy, last_transfer_error,
          last_transfer_type, local,  region, policy_type, protectedBy,
          protectionSourceType, relationship_id, relationship_status,
          relationship_type, schedule, source_cluster, source_volume,
          source_vserver, unhealthy_reason
        )

    - record: netapp_snapmirror_lag_time:maia
      expr: |
        sum(
          netapp_snapmirror_lag_time *
            on(destination_volume) group_left()
            label_replace(
            label_replace(
            label_replace(
            label_replace(
            label_replace(
              max (
                netapp_volume_labels{app="netapp-harvest-exporter-manila", volume=~"share.*"}
              ) by (filer, project_id, share_id, share_name, svm, volume),
              "destination_cluster", "$1", "filer", "(.*)"),
              "destination_project_id", "$1", "project_id", "(.*)"),
              "destination_share_id", "$1", "share_id", "(.*)"),
              "destination_share_name", "$1", "share_name", "(.*)"),
              "destination_volume", "$1", "volume", "(.*)")
        ) by (
          destination_cluster, destination_location, destination_node,
          destination_project_id, destination_share_id, destination_share_name,
          destination_volume, destination_vserver, source_cluster,
          source_volume, source_vserver
        )

    - record: netapp_snapmirror_last_transfer_duration:maia
      expr: |
        sum(
          netapp_snapmirror_last_transfer_duration *
            on(destination_volume) group_left()
            label_replace(
            label_replace(
            label_replace(
            label_replace(
            label_replace(
              max (
                netapp_volume_labels{app="netapp-harvest-exporter-manila", volume=~"share.*"}
              ) by (filer, project_id, share_id, share_name, svm, volume),
              "destination_cluster", "$1", "filer", "(.*)"),
              "destination_project_id", "$1", "project_id", "(.*)"),
              "destination_share_id", "$1", "share_id", "(.*)"),
              "destination_share_name", "$1", "share_name", "(.*)"),
              "destination_volume", "$1", "volume", "(.*)")
        ) by (
          destination_cluster, destination_location, destination_node,
          destination_project_id, destination_share_id, destination_share_name,
          destination_volume, destination_vserver, source_cluster,
          source_volume, source_vserver
        )
